# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class IndustryFacilities(object):
    base_url = "https://esi.tech.ccp.is/latest/industry/facilities/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_industry_facilities_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_industry_facilities_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_industry_facilities_200_ok', 'type': 'object', 'properties': {'owner_id': {'format': 'int32', 'type': 'integer', 'description': 'Owner of the facility', 'title': 'get_industry_facilities_owner_id'}, 'region_id': {'format': 'int32', 'type': 'integer', 'description': 'Region ID where the facility is', 'title': 'get_industry_facilities_region_id'}, 'facility_id': {'format': 'int64', 'type': 'integer', 'description': 'ID of the facility', 'title': 'get_industry_facilities_facility_id'}, 'solar_system_id': {'format': 'int32', 'type': 'integer', 'description': 'Solar system ID where the facility is', 'title': 'get_industry_facilities_solar_system_id'}, 'tax': {'format': 'float', 'type': 'number', 'description': 'Tax imposed by the facility', 'title': 'get_industry_facilities_tax'}, 'type_id': {'format': 'int32', 'type': 'integer', 'description': 'Type ID of the facility', 'title': 'get_industry_facilities_type_id'}}, 'description': '200 ok object', 'required': ['facility_id', 'owner_id', 'type_id', 'solar_system_id', 'region_id']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_industry_facilities_ok'}, 'examples': {'application/json': [{'owner_id': 1000126, 'region_id': 10000001, 'facility_id': 60012544, 'solar_system_id': 30000032, 'tax': 0.1, 'type_id': 2502}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of prices'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Return a list of industry facilities
        
        ---
        
        Alternate route: `/v1/industry/facilities/`
        
        Alternate route: `/legacy/industry/facilities/`
        
        Alternate route: `/dev/industry/facilities/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class IndustrySystems(object):
    base_url = "https://esi.tech.ccp.is/latest/industry/systems/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_industry_systems_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_industry_systems_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_industry_systems_200_ok', 'type': 'object', 'properties': {'solar_system_id': {'format': 'int32', 'type': 'integer', 'description': 'solar_system_id integer', 'title': 'get_industry_systems_solar_system_id'}, 'cost_indices': {'items': {'title': 'get_industry_systems_cost_indice', 'type': 'object', 'properties': {'activity': {'enum': ['none', 'manufacturing', 'researching_technology', 'researching_time_efficiency', 'researching_material_efficiency', 'copying', 'duplicating', 'invention', 'reverse_engineering'], 'type': 'string', 'description': 'activity string', 'title': 'get_industry_systems_activity'}, 'cost_index': {'format': 'float', 'type': 'number', 'description': 'cost_index number', 'title': 'get_industry_systems_cost_index'}}, 'description': 'cost_indice object', 'required': ['activity', 'cost_index']}, 'type': 'array', 'description': 'cost_indices array', 'title': 'get_industry_systems_cost_indices'}}, 'description': '200 ok object', 'required': ['solar_system_id', 'cost_indices']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_industry_systems_ok'}, 'examples': {'application/json': [{'solar_system_id': 30011392, 'cost_indices': [{'activity': 'invention', 'cost_index': 0.00480411064973412}]}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of cost indicies'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Return cost indices for solar systems
        
        ---
        
        Alternate route: `/v1/industry/systems/`
        
        Alternate route: `/legacy/industry/systems/`
        
        Alternate route: `/dev/industry/systems/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)