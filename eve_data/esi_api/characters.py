# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class CharactersDetailPlanets(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/planets/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-planets.manage_planets.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_planets_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_planets_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'solar_system_id': 30000379, 'planet_type': 'plasma', 'num_pins': 1, 'owner_id': 90000001, 'last_update': '2016-11-28T16:42:51Z', 'planet_id': 40023691, 'upgrade_level': 0}, {'solar_system_id': 30000379, 'planet_type': 'barren', 'num_pins': 1, 'owner_id': 90000001, 'last_update': '2016-11-28T16:41:54Z', 'planet_id': 40023697, 'upgrade_level': 0}]}, 'description': 'List of colonies', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['solar_system_id', 'planet_id', 'planet_type', 'owner_id', 'last_update', 'upgrade_level', 'num_pins'], 'description': '200 ok object', 'title': 'get_characters_character_id_planets_200_ok', 'type': 'object', 'properties': {'solar_system_id': {'description': 'solar_system_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_planets_solar_system_id'}, 'planet_type': {'enum': ['temperate', 'barren', 'oceanic', 'ice', 'gas', 'lava', 'storm', 'plasma'], 'description': 'planet_type string', 'type': 'string', 'title': 'get_characters_character_id_planets_planet_type'}, 'num_pins': {'description': 'num_pins integer', 'format': 'int32', 'minimum': 1, 'type': 'integer', 'title': 'get_characters_character_id_planets_num_pins'}, 'owner_id': {'description': 'owner_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_planets_owner_id'}, 'last_update': {'description': 'last_update string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_planets_last_update'}, 'planet_id': {'description': 'planet_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id'}, 'upgrade_level': {'description': 'upgrade_level integer', 'type': 'integer', 'format': 'int32', 'maximum': 5, 'minimum': 0, 'title': 'get_characters_character_id_planets_upgrade_level'}}}, 'type': 'array', 'title': 'get_characters_character_id_planets_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_planets_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_planets_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Returns a list of all planetary colonies owned by a character.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/planets/`
        
        Alternate route: `/legacy/characters/{character_id}/planets/`
        
        Alternate route: `/dev/characters/{character_id}/planets/`
        
        
        ---
        
        This route is cached for up to 600 seconds

:type character_id: int
        :param character_id: Character id of the target character
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailSkills(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/skills/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-skills.read_skills.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_skills_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_skills_403_forbidden'}}}}, '200': {'examples': {'application/json': {'total_sp': 20000, 'skills': [{'skill_id': 1, 'current_skill_level': 1, 'skillpoints_in_skill': 10000}, {'skill_id': 2, 'current_skill_level': 1, 'skillpoints_in_skill': 10000}]}}, 'description': 'Known skills for the character', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok object', 'title': 'get_characters_character_id_skills_ok', 'type': 'object', 'properties': {'total_sp': {'description': 'total_sp integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_skills_total_sp'}, 'skills': {'description': 'skills array', 'items': {'description': 'skill object', 'title': 'get_characters_character_id_skills_skill', 'type': 'object', 'properties': {'skill_id': {'description': 'skill_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_skills_skill_id'}, 'current_skill_level': {'description': 'current_skill_level integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_skills_current_skill_level'}, 'skillpoints_in_skill': {'description': 'skillpoints_in_skill integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_skills_skillpoints_in_skill'}}}, 'type': 'array', 'title': 'get_characters_character_id_skills_skills'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_skills_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_skills_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                List all trained skills for the given character
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/skills/`
        
        Alternate route: `/dev/characters/{character_id}/skills/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailSearch(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/search/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-search.search_structures.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_search_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_search_403_forbidden'}}}}, '200': {'examples': {'application/json': {'station': [60004588, 60004594, 60005725, 60009106, 60012721, 60012724, 60012727], 'solarsystem': [30002510]}}, 'description': 'A list of search results', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok object', 'title': 'get_characters_character_id_search_ok', 'type': 'object', 'properties': {'inventorytype': {'description': 'inventorytype array', 'items': {'description': 'inventorytype integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_inventorytype'}, 'type': 'array', 'title': 'get_characters_character_id_search_inventorytype'}, 'structure': {'description': 'structure array', 'items': {'description': 'structure integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_search_structure'}, 'type': 'array', 'title': 'get_characters_character_id_search_structure'}, 'solarsystem': {'description': 'solarsystem array', 'items': {'description': 'solarsystem integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_solarsystem'}, 'type': 'array', 'title': 'get_characters_character_id_search_solarsystem'}, 'faction': {'description': 'faction array', 'items': {'description': 'faction integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_faction'}, 'type': 'array', 'title': 'get_characters_character_id_search_faction'}, 'wormhole': {'description': 'wormhole array', 'items': {'description': 'wormhole integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_wormhole'}, 'type': 'array', 'title': 'get_characters_character_id_search_wormhole'}, 'region': {'description': 'region array', 'items': {'description': 'region integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_region'}, 'type': 'array', 'title': 'get_characters_character_id_search_region'}, 'station': {'description': 'station array', 'items': {'description': 'station integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_station'}, 'type': 'array', 'title': 'get_characters_character_id_search_station'}, 'constellation': {'description': 'constellation array', 'items': {'description': 'constellation integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_constellation'}, 'type': 'array', 'title': 'get_characters_character_id_search_constellation'}, 'agent': {'description': 'agent array', 'items': {'description': 'agent integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_agent'}, 'type': 'array', 'title': 'get_characters_character_id_search_agent'}, 'alliance': {'description': 'alliance array', 'items': {'description': 'alliance integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_alliance'}, 'type': 'array', 'title': 'get_characters_character_id_search_alliance'}, 'character': {'description': 'character array', 'items': {'description': 'character integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_character'}, 'type': 'array', 'title': 'get_characters_character_id_search_character'}, 'corporation': {'description': 'corporation array', 'items': {'description': 'corporation integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_search_corporation'}, 'type': 'array', 'title': 'get_characters_character_id_search_corporation'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_search_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_search_500_internal_server_error'}}}}}

    def get(self, categories, character_id, search, datasource="tranquility",language="en-us",strict="False",**kwargs):
        """
                Search for entities that match a given sub-string.
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/search/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type categories: list
        :param categories: Type of entities to search for:type character_id: int
        :param character_id: An EVE character ID:type search: str
        :param search: The string to search on
:type datasource: str
        :param datasource: The server name you would like data from:type language: str
        :param language: Search locale:type strict: boolean
        :param strict: Whether the search should be a strict match
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"categories" : categories, "character_id" : character_id, "search" : search, "datasource" : datasource, "language" : language, "strict" : strict, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailContacts(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/contacts/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_contacts.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_contacts_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_contacts_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'contact_type': 'character', 'contact_id': 123, 'is_blocked': False, 'is_watched': True, 'standing': 10.0}]}, 'description': 'A list of contacts', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['standing', 'contact_type', 'contact_id'], 'description': '200 ok object', 'title': 'get_characters_character_id_contacts_200_ok', 'type': 'object', 'properties': {'contact_id': {'description': 'contact_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_contacts_contact_id'}, 'is_blocked': {'description': 'Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false', 'type': 'boolean', 'title': 'get_characters_character_id_contacts_is_blocked'}, 'label_id': {'description': 'Custom label of the contact', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_contacts_label_id'}, 'contact_type': {'enum': ['character', 'corporation', 'alliance', 'faction'], 'description': 'contact_type string', 'type': 'string', 'title': 'get_characters_character_id_contacts_contact_type'}, 'standing': {'description': 'Standing of the contact', 'format': 'float', 'type': 'number', 'title': 'get_characters_character_id_contacts_standing'}, 'is_watched': {'description': 'Whether this contact is being watched', 'type': 'boolean', 'title': 'get_characters_character_id_contacts_is_watched'}}}, 'type': 'array', 'title': 'get_characters_character_id_contacts_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_contacts_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_contacts_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",page="1",**kwargs):
        """
                Return contacts of a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`
        
        
        ---
        
        This route is cached for up to 300 seconds

:type character_id: int
        :param character_id: ID for a character
:type datasource: str
        :param datasource: The server name you would like data from:type page: int
        :param page: page integer
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, "page" : page, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.write_contacts.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'post_characters_character_id_contacts_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'post_characters_character_id_contacts_403_forbidden'}}}}, '201': {'examples': {'application/json': [123, 456]}, 'description': 'A list of contact ids that successfully created', 'schema': {'description': '201 created array', 'items': {'description': '201 created integer', 'format': 'int32', 'type': 'integer', 'title': 'post_characters_character_id_contacts_201_created'}, 'type': 'array', 'title': 'post_characters_character_id_contacts_created'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'post_characters_character_id_contacts_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'post_characters_character_id_contacts_500_internal_server_error'}}}}}

    def post(self, character_id, contact_ids, datasource="tranquility",label_id="0",standing=-10,watched="False",**kwargs):
        """
                Bulk add contacts with same settings
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`

:type character_id: int
        :param character_id: ID for a character:type contact_ids: None
        :param contact_ids: A list of contacts to add
:type datasource: str
        :param datasource: The server name you would like data from:type label_id: int
        :param label_id: Add a custom label to the new contact:type standing: number
        :param standing: Standing for the new contact:type watched: boolean
        :param watched: Whether the new contact should be watched, note this is only effective on characters
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "contact_ids" : contact_ids, "datasource" : datasource, "label_id" : label_id, "standing" : standing, "watched" : watched, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)

    delete_responses = {'204': {'description': 'Contacts deleted'}, '403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.write_contacts.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'delete_characters_character_id_contacts_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'delete_characters_character_id_contacts_403_forbidden'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'delete_characters_character_id_contacts_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'delete_characters_character_id_contacts_500_internal_server_error'}}}}}

    def delete(self, character_id, contact_ids, datasource="tranquility",**kwargs):
        """
                Bulk delete contacts
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`

:type character_id: int
        :param character_id: ID for a character:type contact_ids: None
        :param contact_ids: A list of contacts to edit
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "contact_ids" : contact_ids, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**kwargs_dict)

    put_responses = {'204': {'description': 'Contacts updated'}, '403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.write_contacts.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'put_characters_character_id_contacts_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'put_characters_character_id_contacts_403_forbidden'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'put_characters_character_id_contacts_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'put_characters_character_id_contacts_500_internal_server_error'}}}}}

    def put(self, character_id, contact_ids, datasource="tranquility",label_id="0",standing=-10,watched="False",**kwargs):
        """
                Bulk edit contacts with same settings
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`

:type character_id: int
        :param character_id: ID for a character:type contact_ids: None
        :param contact_ids: A list of contacts to edit
:type datasource: str
        :param datasource: The server name you would like data from:type label_id: int
        :param label_id: Add a custom label to the contact, use 0 for clearing label:type standing: number
        :param standing: Standing for the contact:type watched: boolean
        :param watched: Whether the contact should be watched, note this is only effective on characters
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "contact_ids" : contact_ids, "datasource" : datasource, "label_id" : label_id, "standing" : standing, "watched" : watched, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.put_responses) \
            .put(**kwargs_dict)


class CharactersDetailShip(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/ship/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-location.read_ship_type.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_ship_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_ship_403_forbidden'}}}}, '200': {'examples': {'application/json': {'ship_type_id': 1233, 'ship_name': 'SPACESHIPS!!!', 'ship_item_id': 1000000016991}}, 'description': 'Get the current ship type, name and id', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'required': ['ship_type_id', 'ship_item_id', 'ship_name'], 'description': '200 ok object', 'title': 'get_characters_character_id_ship_ok', 'type': 'object', 'properties': {'ship_type_id': {'description': 'ship_type_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_ship_ship_type_id'}, 'ship_name': {'description': 'ship_name string', 'type': 'string', 'title': 'get_characters_character_id_ship_ship_name'}, 'ship_item_id': {'description': "Item id's are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.", 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_ship_ship_item_id'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_ship_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_ship_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Get the current ship type, name and id
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/ship/`
        
        Alternate route: `/legacy/characters/{character_id}/ship/`
        
        Alternate route: `/dev/characters/{character_id}/ship/`
        
        
        ---
        
        This route is cached for up to 5 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailLoyaltyPoints(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/loyalty/points/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_loyalty.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_loyalty_points_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_loyalty_points_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'corporation_id': 123, 'loyalty_points': 100}]}, 'description': 'A list of loyalty points', 'schema': {'description': '200 ok array', 'items': {'required': ['corporation_id', 'loyalty_points'], 'description': '200 ok object', 'title': 'get_characters_character_id_loyalty_points_200_ok', 'type': 'object', 'properties': {'corporation_id': {'description': 'corporation_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_loyalty_points_corporation_id'}, 'loyalty_points': {'description': 'loyalty_points integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_loyalty_points_loyalty_points'}}}, 'type': 'array', 'title': 'get_characters_character_id_loyalty_points_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_loyalty_points_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_loyalty_points_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return a list of loyalty points for all corporations the character has worked for
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/loyalty/points/`
        
        Alternate route: `/legacy/characters/{character_id}/loyalty/points/`
        
        Alternate route: `/dev/characters/{character_id}/loyalty/points/`

:type character_id: int
        :param character_id: ID for a character
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersNames(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/names/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_names_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_names_500_internal_server_error'}}}}, '200': {'examples': {'application/json': [{'character_name': 'CCP Bartender', 'character_id': 95465499}]}, 'description': 'List of id/name associations', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['character_id', 'character_name'], 'description': '200 ok object', 'title': 'get_characters_names_200_ok', 'type': 'object', 'properties': {'character_name': {'description': 'character_name string', 'type': 'string', 'title': 'get_characters_names_character_name'}, 'character_id': {'description': 'character_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_names_character_id'}}}, 'type': 'array', 'title': 'get_characters_names_ok'}}}

    def get(self, character_ids, datasource="tranquility",**kwargs):
        """
                Resolve a set of character IDs to character names
        
        ---
        
        Alternate route: `/v1/characters/names/`
        
        Alternate route: `/legacy/characters/names/`
        
        Alternate route: `/dev/characters/names/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_ids: list
        :param character_ids: A comma separated list of character IDs
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_ids" : character_ids, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailCalendar(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/calendar/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-calendar.read_calendar_events.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_calendar_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_calendar_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'title': 'o7 The EVE Online Show', 'event_id': 1386435, 'event_response': 'accepted', 'importance': 0, 'event_date': '2016-06-26T20:00:00Z'}]}, 'description': 'A collection of event summaries', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': 'Up to 50 events from now or the event you requested\n', 'items': {'description': 'event', 'title': 'get_characters_character_id_calendar_200_ok', 'type': 'object', 'properties': {'title': {'description': 'title string', 'type': 'string', 'title': 'get_characters_character_id_calendar_title'}, 'event_id': {'description': 'event_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_calendar_event_id'}, 'event_response': {'enum': ['declined', 'not_responded', 'accepted', 'tentative'], 'description': 'event_response string', 'type': 'string', 'title': 'get_characters_character_id_calendar_event_response'}, 'importance': {'description': 'importance integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_calendar_importance'}, 'event_date': {'description': 'event_date string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_calendar_event_date'}}}, 'type': 'array', 'title': 'get_characters_character_id_calendar_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_calendar_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_calendar_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Get 50 event summaries from the calendar. If no event ID is given,
        the resource will return the next 50 chronological event summaries
        from now. If an event ID is specified, it will return the next 50
        chronological event summaries from after that event.
        
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/calendar/`
        
        Alternate route: `/legacy/characters/{character_id}/calendar/`
        
        Alternate route: `/dev/characters/{character_id}/calendar/`
        
        
        ---
        
        This route is cached for up to 5 seconds

:type character_id: int
        :param character_id: The character to retrieve events from
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: from_event, token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailLocation(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/location/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-location.read_location.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_location_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_location_403_forbidden'}}}}, '200': {'examples': {'application/json': {'solar_system_id': 30002505, 'structure_id': 1000000016989}}, 'description': 'Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'required': ['solar_system_id'], 'description': '200 ok object', 'title': 'get_characters_character_id_location_ok', 'type': 'object', 'properties': {'solar_system_id': {'description': 'solar_system_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_location_solar_system_id'}, 'structure_id': {'description': 'structure_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_location_structure_id'}, 'station_id': {'description': 'station_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_location_station_id'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_location_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_location_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/location/`
        
        Alternate route: `/legacy/characters/{character_id}/location/`
        
        Alternate route: `/dev/characters/{character_id}/location/`
        
        
        ---
        
        This route is cached for up to 5 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailClones(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/clones/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-clones.read_clones.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_clones_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_clones_403_forbidden'}}}}, '200': {'examples': {'application/json': {'home_location': {'location_type': 'structure', 'location_id': 1021348135816}, 'jump_clones': [{'location_id': 60003463, 'location_type': 'station', 'implants': [22118]}, {'location_id': 1021348135816, 'location_type': 'structure', 'implants': []}]}}, 'description': 'Clone information for the given character', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'required': ['jump_clones'], 'description': '200 ok object', 'title': 'get_characters_character_id_clones_ok', 'type': 'object', 'properties': {'home_location': {'description': 'home_location object', 'title': 'get_characters_character_id_clones_home_location', 'type': 'object', 'properties': {'location_type': {'enum': ['station', 'structure'], 'description': 'location_type string', 'type': 'string', 'title': 'get_characters_character_id_clones_location_type'}, 'location_id': {'description': 'location_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_clones_location_id'}}}, 'last_jump_date': {'description': 'last_jump_date string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_clones_last_jump_date'}, 'jump_clones': {'description': 'jump_clones array', 'items': {'description': 'jump_clone object', 'title': 'get_characters_character_id_clones_jump_clone', 'type': 'object', 'properties': {'location_id': {'description': 'location_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_clones_location_id'}, 'location_type': {'enum': ['station', 'structure'], 'description': 'location_type string', 'type': 'string', 'title': 'get_characters_character_id_clones_location_type'}, 'implants': {'description': 'implants array', 'items': {'description': 'implant integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_clones_implant'}, 'type': 'array', 'title': 'get_characters_character_id_clones_implants'}}}, 'type': 'array', 'title': 'get_characters_character_id_clones_jump_clones'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_clones_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_clones_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                A list of the character's clones
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/clones/`
        
        Alternate route: `/dev/characters/{character_id}/clones/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMailDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/{mail_id}/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_mail_mail_id_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_mail_mail_id_403_forbidden'}}}}, '404': {'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Mail not found', 'schema': {'description': 'Not found', 'title': 'get_characters_character_id_mail_mail_id_not_found', 'type': 'object', 'properties': {'error': {'description': 'Not found message', 'type': 'string', 'title': 'get_characters_character_id_mail_mail_id_404_not_found'}}}}, '200': {'examples': {'application/json': {'subject': 'test', 'read': False, 'body': 'blah blah blah', 'from': 90000001, 'timestamp': '2015-09-30T16:07:00Z', 'labels': [2, 32]}}, 'description': 'Contents of a mail', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok object', 'title': 'get_characters_character_id_mail_mail_id_ok', 'type': 'object', 'properties': {'subject': {'description': 'Mail subject', 'type': 'string', 'title': 'get_characters_character_id_mail_mail_id_subject'}, 'recipients': {'description': 'Recipients of the mail', 'items': {'required': ['recipient_type', 'recipient_id'], 'description': 'recipient object', 'title': 'get_characters_character_id_mail_mail_id_recipient', 'type': 'object', 'properties': {'recipient_id': {'description': 'recipient_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_mail_mail_id_recipient_id'}, 'recipient_type': {'enum': ['alliance', 'character', 'corporation', 'mailing_list'], 'description': 'recipient_type string', 'type': 'string', 'title': 'get_characters_character_id_mail_mail_id_recipient_type'}}}, 'uniqueItems': True, 'type': 'array', 'minItems': 1, 'maxItems': 50, 'title': 'get_characters_character_id_mail_mail_id_recipients'}, 'read': {'description': 'Whether the mail is flagged as read', 'type': 'boolean', 'title': 'get_characters_character_id_mail_mail_id_read'}, 'body': {'description': "Mail's body", 'type': 'string', 'title': 'get_characters_character_id_mail_mail_id_body'}, 'from': {'description': 'From whom the mail was sent', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_mail_mail_id_from'}, 'timestamp': {'description': 'When the mail was sent', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_mail_mail_id_timestamp'}, 'labels': {'description': 'Labels attached to the mail', 'items': {'description': 'label integer', 'uniqueItems': True, 'type': 'integer', 'format': 'int64', 'minimum': 0, 'title': 'get_characters_character_id_mail_mail_id_label'}, 'type': 'array', 'title': 'get_characters_character_id_mail_mail_id_labels'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_mail_mail_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_mail_mail_id_500_internal_server_error'}}}}}

    def get(self, character_id, mail_id, datasource="tranquility",**kwargs):
        """
                Return the contents of an EVE mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`
        
        
        ---
        
        This route is cached for up to 30 seconds

:type character_id: int
        :param character_id: An EVE character ID:type mail_id: int
        :param mail_id: An EVE mail ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "mail_id" : mail_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    delete_responses = {'204': {'description': 'Mail deleted'}, '403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'delete_characters_character_id_mail_mail_id_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'delete_characters_character_id_mail_mail_id_403_forbidden'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'delete_characters_character_id_mail_mail_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'delete_characters_character_id_mail_mail_id_500_internal_server_error'}}}}}

    def delete(self, character_id, mail_id, datasource="tranquility",**kwargs):
        """
                Delete a mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

:type character_id: int
        :param character_id: An EVE character ID:type mail_id: int
        :param mail_id: An EVE mail ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "mail_id" : mail_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**kwargs_dict)

    put_responses = {'204': {'description': 'Mail updated'}, '403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'put_characters_character_id_mail_mail_id_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'put_characters_character_id_mail_mail_id_403_forbidden'}}}}, '400': {'examples': {'application/json': {'error': 'Bad request message'}}, 'description': 'Invalid label ID; or No parameters in body -- nothing to do', 'schema': {'description': 'Bad request', 'title': 'put_characters_character_id_mail_mail_id_bad_request', 'type': 'object', 'properties': {'error': {'description': 'Bad request message', 'type': 'string', 'title': 'put_characters_character_id_mail_mail_id_400_bad_request'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'put_characters_character_id_mail_mail_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'put_characters_character_id_mail_mail_id_500_internal_server_error'}}}}}

    def put(self, character_id, contents, mail_id, datasource="tranquility",**kwargs):
        """
                Update metadata about a mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

:type character_id: int
        :param character_id: An EVE character ID:type contents: None
        :param contents: Data used to update the mail:type mail_id: int
        :param mail_id: An EVE mail ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "contents" : contents, "mail_id" : mail_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.put_responses) \
            .put(**kwargs_dict)


class CharactersDetailFittingsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/fittings/{fitting_id}/"

    delete_responses = {'204': {'description': 'Fitting deleted'}, '403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-fittings.write_fittings.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'delete_characters_character_id_fittings_fitting_id_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'delete_characters_character_id_fittings_fitting_id_403_forbidden'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'delete_characters_character_id_fittings_fitting_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'delete_characters_character_id_fittings_fitting_id_500_internal_server_error'}}}}}

    def delete(self, character_id, fitting_id, datasource="tranquility",**kwargs):
        """
                Delete a fitting from a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/fittings/{fitting_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/fittings/{fitting_id}/`
        
        Alternate route: `/dev/characters/{character_id}/fittings/{fitting_id}/`

:type character_id: int
        :param character_id: ID for a character:type fitting_id: int
        :param fitting_id: ID for a fitting of this character
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "fitting_id" : fitting_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**kwargs_dict)


class CharactersDetailCalendarDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/calendar/{event_id}/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-calendar.read_calendar_events.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_calendar_event_id_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_calendar_event_id_403_forbidden'}}}}, '200': {'examples': {'application/json': {'duration': 60, 'owner_name': 'EVE System', 'date': '2016-06-26T21:00:00Z', 'importance': 1, 'text': 'o7: The EVE Online Show features latest developer news, fast paced action, community overviews and a lot more with CCP Guard and CCP Mimic. Join the thrilling o7 live broadcast at 20:00 EVE time (=UTC) on <a href="http://www.twitch.tv/ccp">EVE TV</a>. Don\'t miss it!', 'owner_id': 1, 'title': 'o7 The EVE Online Show', 'event_id': 1386435, 'owner_type': 'eve_server', 'response': 'Undecided'}}, 'description': 'Full details of a specific event', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'required': ['event_id', 'owner_id', 'owner_name', 'date', 'title', 'duration', 'importance', 'response', 'text', 'owner_type'], 'description': 'Full details of a specific event', 'title': 'get_characters_character_id_calendar_event_id_ok', 'type': 'object', 'properties': {'duration': {'description': 'Length in minutes', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_calendar_event_id_duration'}, 'owner_name': {'description': 'owner_name string', 'type': 'string', 'title': 'get_characters_character_id_calendar_event_id_owner_name'}, 'date': {'description': 'date string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_calendar_event_id_date'}, 'importance': {'description': 'importance integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_calendar_event_id_importance'}, 'text': {'description': 'text string', 'type': 'string', 'title': 'get_characters_character_id_calendar_event_id_text'}, 'owner_id': {'description': 'owner_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_calendar_event_id_owner_id'}, 'title': {'description': 'title string', 'type': 'string', 'title': 'get_characters_character_id_calendar_event_id_title'}, 'event_id': {'description': 'event_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_calendar_event_id_event_id'}, 'owner_type': {'enum': ['eve_server', 'corporation', 'faction', 'character', 'alliance'], 'description': 'owner_type string', 'type': 'string', 'title': 'get_characters_character_id_calendar_event_id_owner_type'}, 'response': {'description': 'response string', 'type': 'string', 'title': 'get_characters_character_id_calendar_event_id_response'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_calendar_event_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_calendar_event_id_500_internal_server_error'}}}}}

    def get(self, character_id, event_id, datasource="tranquility",**kwargs):
        """
                Get all the information for a specific event
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`
        
        Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`
        
        
        ---
        
        This route is cached for up to 5 seconds

:type character_id: int
        :param character_id: The character id requesting the event:type event_id: int
        :param event_id: The id of the event requested
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "event_id" : event_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    put_responses = {'204': {'description': 'Event updated'}, '403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-calendar.respond_calendar_events.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'put_characters_character_id_calendar_event_id_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'put_characters_character_id_calendar_event_id_403_forbidden'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'put_characters_character_id_calendar_event_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'put_characters_character_id_calendar_event_id_500_internal_server_error'}}}}}

    def put(self, character_id, event_id, response, datasource="tranquility",**kwargs):
        """
                Set your response status to an event
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`
        
        Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`

:type character_id: int
        :param character_id: The character ID requesting the event:type event_id: int
        :param event_id: The ID of the event requested:type response: None
        :param response: The response value to set, overriding current value.
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "event_id" : event_id, "response" : response, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.put_responses) \
            .put(**kwargs_dict)


class CharactersDetailKillmailsRecent(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/killmails/recent/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-killmails.read_killmails.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_killmails_recent_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_killmails_recent_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'killmail_hash': '8eef5e8fb6b88fe3407c489df33822b2e3b57a5e', 'killmail_id': 2}, {'killmail_hash': 'b41ccb498ece33d64019f64c0db392aa3aa701fb', 'killmail_id': 1}]}, 'description': 'A list of killmail IDs and hashes', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['killmail_id', 'killmail_hash'], 'description': '200 ok object', 'title': 'get_characters_character_id_killmails_recent_200_ok', 'type': 'object', 'properties': {'killmail_hash': {'description': 'A hash of this killmail', 'type': 'string', 'title': 'get_characters_character_id_killmails_recent_killmail_hash'}, 'killmail_id': {'description': 'ID of this killmail', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_killmails_recent_killmail_id'}}}, 'type': 'array', 'title': 'get_characters_character_id_killmails_recent_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_killmails_recent_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_killmails_recent_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",max_count="50",**kwargs):
        """
                Return a list of character's recent kills and losses
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/killmails/recent/`
        
        Alternate route: `/legacy/characters/{character_id}/killmails/recent/`
        
        Alternate route: `/dev/characters/{character_id}/killmails/recent/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from:type max_count: int
        :param max_count: How many killmails to return at maximum
        :param kwargs: max_kill_id, token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, "max_count" : max_count, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMailLabelsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/labels/{label_id}/"

    delete_responses = {'204': {'description': 'Label deleted'}, '403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'delete_characters_character_id_mail_labels_label_id_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'delete_characters_character_id_mail_labels_label_id_403_forbidden'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'delete_characters_character_id_mail_labels_label_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'delete_characters_character_id_mail_labels_label_id_500_internal_server_error'}}}}, '422': {'examples': {'application/json': {'error': 'Unprocessable entity message'}}, 'description': 'Default labels cannot be deleted', 'schema': {'description': 'Unprocessable entity', 'title': 'delete_characters_character_id_mail_labels_label_id_unprocessable_entity', 'type': 'object', 'properties': {'error': {'description': 'Unprocessable entity message', 'type': 'string', 'title': 'delete_characters_character_id_mail_labels_label_id_422_unprocessable_entity'}}}}}

    def delete(self, character_id, label_id, datasource="tranquility",**kwargs):
        """
                Delete a mail label
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/labels/{label_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/labels/{label_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/labels/{label_id}/`

:type character_id: int
        :param character_id: An EVE character ID:type label_id: int
        :param label_id: An EVE label id
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "label_id" : label_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**kwargs_dict)


class CharactersDetailWallets(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/wallets/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-wallet.read_character_wallet.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_wallets_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_wallets_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'balance': 295000, 'wallet_id': 1000}]}, 'description': 'Wallet data for selected user', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'description': '200 ok object', 'title': 'get_characters_character_id_wallets_200_ok', 'type': 'object', 'properties': {'balance': {'description': "Wallet's balance in ISK hundredths.", 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_wallets_balance'}, 'wallet_id': {'description': 'wallet_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_wallets_wallet_id'}}}, 'type': 'array', 'title': 'get_characters_character_id_wallets_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_wallets_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_wallets_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                List your wallets and their balances. Characters typically have only one wallet, with wallet_id 1000 being the master wallet.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/wallets/`
        
        Alternate route: `/legacy/characters/{character_id}/wallets/`
        
        Alternate route: `/dev/characters/{character_id}/wallets/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMailLabels(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/labels/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_mail_labels_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_mail_labels_403_forbidden'}}}}, '200': {'examples': {'application/json': {'labels': [{'name': 'PINK', 'color_hex': '#660066', 'label_id': 16, 'unread_count': 4}, {'name': 'WHITE', 'color_hex': '#ffffff', 'label_id': 17, 'unread_count': 1}], 'total_unread_count': 5}}, 'description': 'A list of mail labels and unread counts', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok object', 'title': 'get_characters_character_id_mail_labels_ok', 'type': 'object', 'properties': {'labels': {'description': 'labels array', 'items': {'description': 'label object', 'title': 'get_characters_character_id_mail_labels_label', 'type': 'object', 'properties': {'unread_count': {'description': 'unread_count integer', 'format': 'int32', 'minimum': 0, 'type': 'integer', 'title': 'get_characters_character_id_mail_labels_unread_count'}, 'name': {'description': 'name string', 'title': 'get_characters_character_id_mail_labels_name', 'type': 'string', 'maxLength': 40}, 'color': {'enum': ['#ffffff', '#ffff01', '#ff6600', '#fe0000', '#9a0000', '#660066', '#0000fe', '#0099ff', '#01ffff', '#00ff33', '#349800', '#006634', '#666666', '#999999', '#e6e6e6', '#ffffcd', '#99ffff', '#ccff9a'], 'description': 'color string', 'default': '#ffffff', 'type': 'string', 'title': 'get_characters_character_id_mail_labels_color'}, 'label_id': {'description': 'label_id integer', 'format': 'int32', 'minimum': 0, 'type': 'integer', 'title': 'get_characters_character_id_mail_labels_label_id'}}}, 'type': 'array', 'title': 'get_characters_character_id_mail_labels_labels'}, 'total_unread_count': {'description': 'total_unread_count integer', 'format': 'int32', 'minimum': 0, 'type': 'integer', 'title': 'get_characters_character_id_mail_labels_total_unread_count'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_mail_labels_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_mail_labels_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return a list of the users mail labels, unread counts for each label and a total unread count.
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/mail/labels/`
        
        Alternate route: `/dev/characters/{character_id}/mail/labels/`
        
        
        ---
        
        This route is cached for up to 30 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'post_characters_character_id_mail_labels_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'post_characters_character_id_mail_labels_403_forbidden'}}}}, '201': {'examples': {'application/json': 128}, 'description': 'Label created', 'schema': {'description': 'Label ID', 'format': 'int64', 'type': 'integer', 'title': 'post_characters_character_id_mail_labels_created'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'post_characters_character_id_mail_labels_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'post_characters_character_id_mail_labels_500_internal_server_error'}}}}}

    def post(self, character_id, datasource="tranquility",**kwargs):
        """
                Create a mail label
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/mail/labels/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/labels/`
        
        Alternate route: `/dev/characters/{character_id}/mail/labels/`

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: label, token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class CharactersDetailFittings(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/fittings/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-fittings.read_fittings.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_fittings_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_fittings_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'name': 'Best Vindicator', 'description': 'Awesome Vindi fitting', 'items': [{'quantity': 1, 'type_id': 1234, 'flag': 12}], 'ship_type_id': 123, 'fitting_id': 1}]}, 'description': 'A list of fittings', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['fitting_id', 'name', 'description', 'ship_type_id', 'items'], 'description': '200 ok object', 'title': 'get_characters_character_id_fittings_200_ok', 'type': 'object', 'properties': {'name': {'description': 'name string', 'type': 'string', 'title': 'get_characters_character_id_fittings_name'}, 'description': {'description': 'description string', 'type': 'string', 'title': 'get_characters_character_id_fittings_description'}, 'items': {'description': 'items array', 'items': {'required': ['type_id', 'flag', 'quantity'], 'description': 'item object', 'title': 'get_characters_character_id_fittings_item', 'type': 'object', 'properties': {'quantity': {'description': 'quantity integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_fittings_quantity'}, 'type_id': {'description': 'type_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_fittings_type_id'}, 'flag': {'description': 'flag integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_fittings_flag'}}}, 'type': 'array', 'title': 'get_characters_character_id_fittings_items'}, 'ship_type_id': {'description': 'ship_type_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_fittings_ship_type_id'}, 'fitting_id': {'description': 'fitting_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_fittings_fitting_id'}}}, 'type': 'array', 'title': 'get_characters_character_id_fittings_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_fittings_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_fittings_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return fittings of a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/fittings/`
        
        Alternate route: `/legacy/characters/{character_id}/fittings/`
        
        Alternate route: `/dev/characters/{character_id}/fittings/`
        
        
        ---
        
        This route is cached for up to 300 seconds

:type character_id: int
        :param character_id: ID for a character
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-fittings.write_fittings.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'post_characters_character_id_fittings_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'post_characters_character_id_fittings_403_forbidden'}}}}, '201': {'examples': {'application/json': {'fitting_id': 2}}, 'description': 'A list of fittings', 'schema': {'required': ['fitting_id'], 'description': '201 created object', 'title': 'post_characters_character_id_fittings_created', 'type': 'object', 'properties': {'fitting_id': {'description': 'fitting_id integer', 'format': 'int32', 'type': 'integer', 'title': 'post_characters_character_id_fittings_fitting_id'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'post_characters_character_id_fittings_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'post_characters_character_id_fittings_500_internal_server_error'}}}}}

    def post(self, character_id, datasource="tranquility",**kwargs):
        """
                Save a new fitting for a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/fittings/`
        
        Alternate route: `/legacy/characters/{character_id}/fittings/`
        
        Alternate route: `/dev/characters/{character_id}/fittings/`

:type character_id: int
        :param character_id: ID for a character
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: fitting, token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class CharactersDetailPlanetsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/planets/{planet_id}/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-planets.manage_planets.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_planets_planet_id_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_planets_planet_id_403_forbidden'}}}}, '404': {'examples': {'application/json': {'error': 'Colony not found'}}, 'description': 'Colony not found', 'schema': {'description': 'Colony not found', 'title': 'get_characters_character_id_planets_planet_id_not_found', 'type': 'object', 'properties': {'error': {'description': 'error message', 'type': 'string', 'title': 'get_characters_character_id_planets_planet_id_error'}}}}, '200': {'examples': {'application/json': {'links': [{'source_pin_id': 1000000017021, 'destination_pin_id': 1000000017022, 'link_level': 0}], 'routes': [{'quantity': 20, 'source_pin_id': 1000000017029, 'destination_pin_id': 1000000017030, 'content_type_id': 2393, 'route_id': 4}], 'pins': [{'latitude': 1.55087844973, 'is_running': True, 'type_id': 2254, 'longitude': 0.717145933308, 'pin_id': 1000000017021}, {'latitude': 1.53360639935, 'is_running': True, 'type_id': 2256, 'longitude': 0.709775584394, 'pin_id': 1000000017022}]}}, 'description': 'Colony layout', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'required': ['links', 'pins', 'routes'], 'description': '200 ok object', 'title': 'get_characters_character_id_planets_planet_id_ok', 'type': 'object', 'properties': {'links': {'description': 'links array', 'items': {'required': ['source_pin_id', 'destination_pin_id', 'link_level'], 'description': 'link object', 'title': 'get_characters_character_id_planets_planet_id_link', 'type': 'object', 'properties': {'source_pin_id': {'description': 'source_pin_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_source_pin_id'}, 'destination_pin_id': {'description': 'destination_pin_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_destination_pin_id'}, 'link_level': {'description': 'link_level integer', 'type': 'integer', 'format': 'int32', 'maximum': 10, 'minimum': 0, 'title': 'get_characters_character_id_planets_planet_id_link_level'}}}, 'type': 'array', 'title': 'get_characters_character_id_planets_planet_id_links'}, 'routes': {'description': 'routes array', 'items': {'required': ['route_id', 'source_pin_id', 'destination_pin_id', 'content_type_id', 'quantity'], 'description': 'route object', 'title': 'get_characters_character_id_planets_planet_id_route', 'type': 'object', 'properties': {'waypoints': {'description': 'waypoints array', 'items': {'required': ['pin_id', 'order'], 'description': 'waypoint object', 'title': 'get_characters_character_id_planets_planet_id_waypoint', 'type': 'object', 'properties': {'order': {'description': 'order integer', 'type': 'integer', 'format': 'int32', 'maximum': 5, 'minimum': 1, 'title': 'get_characters_character_id_planets_planet_id_order'}, 'pin_id': {'description': 'pin_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_pin_id'}}}, 'type': 'array', 'title': 'get_characters_character_id_planets_planet_id_waypoints'}, 'quantity': {'description': 'quantity number', 'format': 'float', 'type': 'number', 'title': 'get_characters_character_id_planets_planet_id_quantity'}, 'destination_pin_id': {'description': 'destination_pin_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_destination_pin_id'}, 'source_pin_id': {'description': 'source_pin_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_source_pin_id'}, 'route_id': {'description': 'route_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_route_id'}, 'content_type_id': {'description': 'content_type_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_content_type_id'}}}, 'type': 'array', 'title': 'get_characters_character_id_planets_planet_id_routes'}, 'pins': {'description': 'pins array', 'items': {'required': ['pin_id', 'type_id', 'latitude', 'longitude'], 'description': 'pin object', 'title': 'get_characters_character_id_planets_planet_id_pin', 'type': 'object', 'properties': {'latitude': {'description': 'latitude number', 'format': 'float', 'type': 'number', 'title': 'get_characters_character_id_planets_planet_id_latitude'}, 'install_time': {'description': 'install_time string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_planets_planet_id_install_time'}, 'expiry_time': {'description': 'expiry_time string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_planets_planet_id_expiry_time'}, 'type_id': {'description': 'type_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_type_id'}, 'longitude': {'description': 'longitude number', 'format': 'float', 'type': 'number', 'title': 'get_characters_character_id_planets_planet_id_longitude'}, 'schematic_id': {'description': 'schematic_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_schematic_id'}, 'factory_details': {'required': ['schematic_id'], 'description': 'factory_details object', 'title': 'get_characters_character_id_planets_planet_id_factory_details', 'type': 'object', 'properties': {'schematic_id': {'description': 'schematic_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_schematic_id'}}}, 'last_cycle_start': {'description': 'last_cycle_start string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_planets_planet_id_last_cycle_start'}, 'extractor_details': {'required': ['heads'], 'description': 'extractor_details object', 'title': 'get_characters_character_id_planets_planet_id_extractor_details', 'type': 'object', 'properties': {'qty_per_cycle': {'description': 'qty_per_cycle integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_qty_per_cycle'}, 'cycle_time': {'description': 'in seconds', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_cycle_time'}, 'head_radius': {'description': 'head_radius number', 'format': 'float', 'type': 'number', 'title': 'get_characters_character_id_planets_planet_id_head_radius'}, 'heads': {'description': 'heads array', 'items': {'required': ['head_id', 'latitude', 'longitude'], 'description': 'head object', 'title': 'get_characters_character_id_planets_planet_id_head', 'type': 'object', 'properties': {'head_id': {'description': 'head_id integer', 'type': 'integer', 'format': 'int32', 'maximum': 9, 'minimum': 0, 'title': 'get_characters_character_id_planets_planet_id_head_id'}, 'longitude': {'description': 'longitude number', 'format': 'float', 'type': 'number', 'title': 'get_characters_character_id_planets_planet_id_longitude'}, 'latitude': {'description': 'latitude number', 'format': 'float', 'type': 'number', 'title': 'get_characters_character_id_planets_planet_id_latitude'}}}, 'type': 'array', 'title': 'get_characters_character_id_planets_planet_id_heads'}, 'product_type_id': {'description': 'product_type_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_product_type_id'}}}, 'pin_id': {'description': 'pin_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_planets_planet_id_pin_id'}}}, 'type': 'array', 'title': 'get_characters_character_id_planets_planet_id_pins'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_planets_planet_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_planets_planet_id_500_internal_server_error'}}}}}

    def get(self, character_id, planet_id, datasource="tranquility",**kwargs):
        """
                Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information on this endpoint will not update until this criteria is met.
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/planets/{planet_id}/`
        
        Alternate route: `/dev/characters/{character_id}/planets/{planet_id}/`
        
        
        ---
        
        This route is cached for up to 600 seconds

:type character_id: int
        :param character_id: Character id of the target character:type planet_id: int
        :param planet_id: Planet id of the target planet
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "planet_id" : planet_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_mail_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_mail_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'subject': 'Title for EVE Mail', 'recipients': [{'recipient_id': 90000002, 'recipient_type': 'character'}], 'timestamp': '2015-09-30T16:07:00Z', 'mail_id': 7, 'is_read': True, 'labels': [3], 'from': 90000001}]}, 'description': 'The requested mail', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'description': '200 ok object', 'title': 'get_characters_character_id_mail_200_ok', 'type': 'object', 'properties': {'subject': {'description': 'Mail subject', 'type': 'string', 'title': 'get_characters_character_id_mail_subject'}, 'recipients': {'description': 'Recipients of the mail', 'items': {'required': ['recipient_type', 'recipient_id'], 'description': 'recipient object', 'title': 'get_characters_character_id_mail_recipient', 'type': 'object', 'properties': {'recipient_id': {'description': 'recipient_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_mail_recipient_id'}, 'recipient_type': {'enum': ['alliance', 'character', 'corporation', 'mailing_list'], 'description': 'recipient_type string', 'type': 'string', 'title': 'get_characters_character_id_mail_recipient_type'}}}, 'uniqueItems': True, 'type': 'array', 'minItems': 1, 'maxItems': 50, 'title': 'get_characters_character_id_mail_recipients'}, 'timestamp': {'description': 'When the mail was sent', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_mail_timestamp'}, 'mail_id': {'description': 'mail_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_mail_mail_id'}, 'is_read': {'description': 'is_read boolean', 'type': 'boolean', 'title': 'get_characters_character_id_mail_is_read'}, 'labels': {'description': 'labels array', 'items': {'description': 'label integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_mail_label'}, 'uniqueItems': True, 'type': 'array', 'maxItems': 25, 'minimum': 0, 'title': 'get_characters_character_id_mail_labels'}, 'from': {'description': 'From whom the mail was sent', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_mail_from'}}}, 'type': 'array', 'title': 'get_characters_character_id_mail_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_mail_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_mail_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/`
        
        Alternate route: `/dev/characters/{character_id}/mail/`
        
        
        ---
        
        This route is cached for up to 30 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: labels, last_mail_id, token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'400': {'examples': {'application/json': {'error': 'Bad request message'}}, 'description': 'Only one corporation, alliance, or mailing list can be the\nrecipient of a mail\n', 'schema': {'description': 'Bad request', 'title': 'post_characters_character_id_mail_bad_request', 'type': 'object', 'properties': {'error': {'description': 'Bad request message', 'type': 'string', 'title': 'post_characters_character_id_mail_400_bad_request'}}}}, '201': {'examples': {'application/json': 13}, 'description': 'Mail created', 'schema': {'description': 'Mail ID', 'format': 'int32', 'type': 'integer', 'title': 'post_characters_character_id_mail_created'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'post_characters_character_id_mail_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'post_characters_character_id_mail_500_internal_server_error'}}}}, '403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.send_mail.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'post_characters_character_id_mail_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'post_characters_character_id_mail_403_forbidden'}}}}}

    def post(self, character_id, mail, datasource="tranquility",**kwargs):
        """
                Create and send a new mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/`
        
        Alternate route: `/dev/characters/{character_id}/mail/`

:type character_id: int
        :param character_id: The sender's character ID:type mail: None
        :param mail: The mail to send
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "mail" : mail, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class CharactersDetailCspa(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/cspa/"

    post_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_contacts.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'post_characters_character_id_cspa_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'post_characters_character_id_cspa_403_forbidden'}}}}, '201': {'examples': {'application/json': {'cost': 295000}}, 'description': 'Aggregate cost of sending a mail from the source character to the target characters, in ISK hundredths', 'schema': {'description': '201 created object', 'title': 'post_characters_character_id_cspa_created', 'type': 'object', 'properties': {'cost': {'description': 'cost integer', 'format': 'int64', 'type': 'integer', 'title': 'post_characters_character_id_cspa_cost'}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'post_characters_character_id_cspa_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'post_characters_character_id_cspa_500_internal_server_error'}}}}}

    def post(self, character_id, characters, datasource="tranquility",**kwargs):
        """
                Takes a source character ID in the url and a set of target character ID's in the body, returns a CSPA charge cost
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/cspa/`
        
        Alternate route: `/legacy/characters/{character_id}/cspa/`
        
        Alternate route: `/dev/characters/{character_id}/cspa/`

:type character_id: int
        :param character_id: An EVE character ID:type characters: None
        :param characters: The target characters to calculate the charge for
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "characters" : characters, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class CharactersDetailMailLists(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/lists/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_mail_lists_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_mail_lists_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'mailing_list_id': 1, 'name': 'test_mailing_list'}]}, 'description': 'Mailing lists', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['mailing_list_id', 'name'], 'description': '200 ok object', 'title': 'get_characters_character_id_mail_lists_200_ok', 'type': 'object', 'properties': {'mailing_list_id': {'description': 'Mailing list ID', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_mail_lists_mailing_list_id'}, 'name': {'description': 'name string', 'type': 'string', 'title': 'get_characters_character_id_mail_lists_name'}}}, 'type': 'array', 'title': 'get_characters_character_id_mail_lists_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_mail_lists_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_mail_lists_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return all mailing lists that the character is subscribed to
        
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/lists/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/lists/`
        
        Alternate route: `/dev/characters/{character_id}/mail/lists/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailSkillqueue(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/skillqueue/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-skills.read_skillqueue.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_skillqueue_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_skillqueue_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'finish_date': '2016-06-29T10:47:00Z', 'finished_level': 3, 'skill_id': 1, 'start_date': '2016-06-29T10:46:00Z', 'queue_position': 0}, {'finish_date': '2016-07-15T10:47:00Z', 'finished_level': 4, 'skill_id': 1, 'start_date': '2016-06-29T10:47:00Z', 'queue_position': 1}, {'finish_date': '2016-08-30T10:47:00Z', 'finished_level': 2, 'skill_id': 2, 'start_date': '2016-07-15T10:47:00Z', 'queue_position': 2}]}, 'description': 'The current skill queue, sorted ascending by finishing time', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['skill_id', 'finished_level', 'queue_position'], 'description': '200 ok object', 'title': 'get_characters_character_id_skillqueue_200_ok', 'type': 'object', 'properties': {'finish_date': {'description': 'finish_date string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_skillqueue_finish_date'}, 'level_start_sp': {'description': "Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.", 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_skillqueue_level_start_sp'}, 'skill_id': {'description': 'skill_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_skillqueue_skill_id'}, 'finished_level': {'description': 'finished_level integer', 'type': 'integer', 'format': 'int32', 'maximum': 5, 'minimum': 0, 'title': 'get_characters_character_id_skillqueue_finished_level'}, 'queue_position': {'description': 'queue_position integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_skillqueue_queue_position'}, 'start_date': {'description': 'start_date string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_skillqueue_start_date'}, 'level_end_sp': {'description': 'level_end_sp integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_skillqueue_level_end_sp'}, 'training_start_sp': {'description': 'training_start_sp integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_skillqueue_training_start_sp'}}}, 'type': 'array', 'title': 'get_characters_character_id_skillqueue_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_skillqueue_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_skillqueue_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                List the configured skill queue for the given character
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/skillqueue/`
        
        Alternate route: `/legacy/characters/{character_id}/skillqueue/`
        
        Alternate route: `/dev/characters/{character_id}/skillqueue/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: Character id of the target character
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailPortrait(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/portrait/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_portrait_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_portrait_500_internal_server_error'}}}}, '404': {'examples': {'application/json': {'error': 'No image server for this datasource'}}, 'description': 'No image server for this datasource', 'schema': {'description': 'No image server for this datasource', 'title': 'get_characters_character_id_portrait_not_found', 'type': 'object', 'properties': {'error': {'description': 'error message', 'type': 'string', 'title': 'get_characters_character_id_portrait_error'}}}}, '200': {'examples': {'application/json': {'px64x64': 'https://imageserver.eveonline.com/Character/95465499_64.jpg', 'px128x128': 'https://imageserver.eveonline.com/Character/95465499_128.jpg', 'px256x256': 'https://imageserver.eveonline.com/Character/95465499_256.jpg', 'px512x512': 'https://imageserver.eveonline.com/Character/95465499_512.jpg'}}, 'description': 'Public data for the given character', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok object', 'title': 'get_characters_character_id_portrait_ok', 'type': 'object', 'properties': {'px64x64': {'description': 'px64x64 string', 'type': 'string', 'title': 'get_characters_character_id_portrait_px64x64'}, 'px128x128': {'description': 'px128x128 string', 'type': 'string', 'title': 'get_characters_character_id_portrait_px128x128'}, 'px256x256': {'description': 'px256x256 string', 'type': 'string', 'title': 'get_characters_character_id_portrait_px256x256'}, 'px512x512': {'description': 'px512x512 string', 'type': 'string', 'title': 'get_characters_character_id_portrait_px512x512'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Get portrait urls for a character
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/portrait/`
        
        Alternate route: `/dev/characters/{character_id}/portrait/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailBookmarksFolders(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/bookmarks/folders/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-bookmarks.read_character_bookmarks.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_bookmarks_folders_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_bookmarks_folders_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'owner_id': 90000001, 'folder_id': 5, 'name': 'Icecream'}]}, 'description': 'List of bookmark folders', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'description': '200 ok object', 'title': 'get_characters_character_id_bookmarks_folders_200_ok', 'type': 'object', 'properties': {'owner_id': {'description': 'owner_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_bookmarks_folders_owner_id'}, 'folder_id': {'description': 'folder_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_bookmarks_folders_folder_id'}, 'name': {'description': 'name string', 'type': 'string', 'title': 'get_characters_character_id_bookmarks_folders_name'}}}, 'type': 'array', 'title': 'get_characters_character_id_bookmarks_folders_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_bookmarks_folders_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_bookmarks_folders_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                List your character's personal bookmark folders
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/bookmarks/folders/`
        
        Alternate route: `/legacy/characters/{character_id}/bookmarks/folders/`
        
        Alternate route: `/dev/characters/{character_id}/bookmarks/folders/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_500_internal_server_error'}}}}, '404': {'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Character not found', 'schema': {'description': 'Not found', 'title': 'get_characters_character_id_not_found', 'type': 'object', 'properties': {'error': {'description': 'Not found message', 'type': 'string', 'title': 'get_characters_character_id_404_not_found'}}}}, '200': {'examples': {'application/json': {'bloodline_id': 3, 'corporation_id': 109299958, 'description': '', 'gender': 'male', 'name': 'CCP Bartender', 'birthday': '2015-03-24T11:37:00Z', 'race_id': 2, 'ancestry_id': 19}}, 'description': 'Public data for the given character', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'required': ['corporation_id', 'birthday', 'name', 'gender', 'race_id', 'bloodline_id'], 'description': '200 ok object', 'title': 'get_characters_character_id_ok', 'type': 'object', 'properties': {'bloodline_id': {'description': 'bloodline_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_bloodline_id'}, 'corporation_id': {'description': "The character's corporation ID", 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_corporation_id'}, 'race_id': {'description': 'race_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_race_id'}, 'security_status': {'description': 'security_status number', 'type': 'number', 'format': 'float', 'maximum': 10, 'minimum': -10, 'title': 'get_characters_character_id_security_status'}, 'description': {'description': 'description string', 'type': 'string', 'title': 'get_characters_character_id_description'}, 'gender': {'enum': ['female', 'male'], 'description': 'gender string', 'type': 'string', 'title': 'get_characters_character_id_gender'}, 'name': {'description': 'name string', 'type': 'string', 'title': 'get_characters_character_id_name'}, 'birthday': {'description': 'Creation date of the character', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_birthday'}, 'alliance_id': {'description': "The character's alliance ID", 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_alliance_id'}, 'ancestry_id': {'description': 'ancestry_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_ancestry_id'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Public information about a character
        
        ---
        
        Alternate route: `/v4/characters/{character_id}/`
        
        Alternate route: `/dev/characters/{character_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailAssets(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/assets/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-assets.read_assets.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_assets_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_assets_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'location_type': 'station', 'is_singleton': True, 'type_id': 3516, 'item_id': 1000000016835, 'location_flag': 'Hangar', 'location_id': 60002959}]}, 'description': 'A flat list of the users assets', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['type_id', 'location_id', 'location_type', 'item_id', 'location_flag', 'is_singleton'], 'description': '200 ok object', 'title': 'get_characters_character_id_assets_200_ok', 'type': 'object', 'properties': {'location_type': {'enum': ['station', 'solar_system', 'other'], 'description': 'location_type string', 'type': 'string', 'title': 'get_characters_character_id_assets_location_type'}, 'is_singleton': {'description': 'is_singleton boolean', 'type': 'boolean', 'title': 'get_characters_character_id_assets_is_singleton'}, 'type_id': {'description': 'type_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_assets_type_id'}, 'item_id': {'description': 'item_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_assets_item_id'}, 'quantity': {'description': 'quantity integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_assets_quantity'}, 'location_flag': {'enum': ['AutoFit', 'Cargo', 'CorpseBay', 'DroneBay', 'FleetHangar', 'Deliveries', 'HiddenModifiers', 'Hangar', 'HangarAll', 'LoSlot0', 'LoSlot1', 'LoSlot2', 'LoSlot3', 'LoSlot4', 'LoSlot5', 'LoSlot6', 'LoSlot7', 'MedSlot0', 'MedSlot1', 'MedSlot2', 'MedSlot3', 'MedSlot4', 'MedSlot5', 'MedSlot6', 'MedSlot7', 'HiSlot0', 'HiSlot1', 'HiSlot2', 'HiSlot3', 'HiSlot4', 'HiSlot5', 'HiSlot6', 'HiSlot7', 'AssetSafety', 'Locked', 'Unlocked', 'Implant', 'QuafeBay', 'RigSlot0', 'RigSlot1', 'RigSlot2', 'RigSlot3', 'RigSlot4', 'RigSlot5', 'RigSlot6', 'RigSlot7', 'ShipHangar', 'SpecializedFuelBay', 'SpecializedOreHold', 'SpecializedGasHold', 'SpecializedMineralHold', 'SpecializedSalvageHold', 'SpecializedShipHold', 'SpecializedSmallShipHold', 'SpecializedMediumShipHold', 'SpecializedLargeShipHold', 'SpecializedIndustrialShipHold', 'SpecializedAmmoHold', 'SpecializedCommandCenterHold', 'SpecializedPlanetaryCommoditiesHold', 'SpecializedMaterialBay', 'SubSystemSlot0', 'SubSystemSlot1', 'SubSystemSlot2', 'SubSystemSlot3', 'SubSystemSlot4', 'SubSystemSlot5', 'SubSystemSlot6', 'SubSystemSlot7', 'FighterBay', 'FighterTube0', 'FighterTube1', 'FighterTube2', 'FighterTube3', 'FighterTube4', 'Module'], 'description': 'location_flag string', 'type': 'string', 'title': 'get_characters_character_id_assets_location_flag'}, 'location_id': {'description': 'location_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_assets_location_id'}}}, 'type': 'array', 'title': 'get_characters_character_id_assets_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_assets_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_assets_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return a list of the characters assets
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/assets/`
        
        Alternate route: `/legacy/characters/{character_id}/assets/`
        
        Alternate route: `/dev/characters/{character_id}/assets/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: Character id of the target character
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailBookmarks(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/bookmarks/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-bookmarks.read_character_bookmarks.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_bookmarks_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_bookmarks_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'memo': 'aoeu ( Citadel )', 'folder_id': 5, 'target': {'item': {'type_id': 35832, 'item_id': 1000000012668}, 'location_id': 30000005}, 'bookmark_id': 32, 'owner_id': 90000001, 'creator_id': 90000001, 'create_date': '2016-08-09T11:57:47Z', 'note': ''}]}, 'description': 'A list of bookmarks', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['bookmark_id', 'creator_id', 'owner_id', 'create_date', 'memo', 'note', 'target'], 'description': '200 ok object', 'title': 'get_characters_character_id_bookmarks_200_ok', 'type': 'object', 'properties': {'memo': {'description': 'memo string', 'type': 'string', 'title': 'get_characters_character_id_bookmarks_memo'}, 'folder_id': {'description': 'folder_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_bookmarks_folder_id'}, 'target': {'required': ['location_id'], 'description': 'target object', 'title': 'get_characters_character_id_bookmarks_target', 'type': 'object', 'properties': {'item': {'required': ['item_id', 'type_id'], 'description': 'item object', 'title': 'get_characters_character_id_bookmarks_item', 'type': 'object', 'properties': {'type_id': {'description': 'type_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_bookmarks_type_id'}, 'item_id': {'description': 'item_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_bookmarks_item_id'}}}, 'location_id': {'description': 'location_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_bookmarks_location_id'}, 'coordinates': {'required': ['x', 'y', 'z'], 'description': 'coordinates object', 'title': 'get_characters_character_id_bookmarks_coordinates', 'type': 'object', 'properties': {'z': {'description': 'z number', 'format': 'double', 'type': 'number', 'title': 'get_characters_character_id_bookmarks_z'}, 'y': {'description': 'y number', 'format': 'double', 'type': 'number', 'title': 'get_characters_character_id_bookmarks_y'}, 'x': {'description': 'x number', 'format': 'double', 'type': 'number', 'title': 'get_characters_character_id_bookmarks_x'}}}}}, 'bookmark_id': {'description': 'bookmark_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_bookmarks_bookmark_id'}, 'owner_id': {'description': 'owner_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_bookmarks_owner_id'}, 'creator_id': {'description': 'creator_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_bookmarks_creator_id'}, 'create_date': {'description': 'create_date string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_bookmarks_create_date'}, 'note': {'description': 'note string', 'type': 'string', 'title': 'get_characters_character_id_bookmarks_note'}}}, 'type': 'array', 'title': 'get_characters_character_id_bookmarks_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_bookmarks_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_bookmarks_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                List your character's personal bookmarks
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/bookmarks/`
        
        Alternate route: `/legacy/characters/{character_id}/bookmarks/`
        
        Alternate route: `/dev/characters/{character_id}/bookmarks/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailContactsLabels(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/contacts/labels/"

    get_responses = {'403': {'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_contacts.v1'}}, 'description': 'Forbidden', 'schema': {'description': 'Forbidden', 'title': 'get_characters_character_id_contacts_labels_forbidden', 'type': 'object', 'properties': {'error': {'description': 'Forbidden message', 'type': 'string', 'title': 'get_characters_character_id_contacts_labels_403_forbidden'}}}}, '200': {'examples': {'application/json': [{'label_id': 123, 'label_name': 'Friends'}]}, 'description': 'A list of contact labels', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['label_id', 'label_name'], 'description': '200 ok object', 'title': 'get_characters_character_id_contacts_labels_200_ok', 'type': 'object', 'properties': {'label_id': {'description': 'label_id integer', 'format': 'int64', 'type': 'integer', 'title': 'get_characters_character_id_contacts_labels_label_id'}, 'label_name': {'description': 'label_name string', 'type': 'string', 'title': 'get_characters_character_id_contacts_labels_label_name'}}}, 'type': 'array', 'title': 'get_characters_character_id_contacts_labels_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_contacts_labels_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_contacts_labels_500_internal_server_error'}}}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return custom labels for contacts the character defined
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/labels/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/labels/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/labels/`
        
        
        ---
        
        This route is cached for up to 300 seconds

:type character_id: int
        :param character_id: ID for a character
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailCorporationhistory(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/corporationhistory/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_characters_character_id_corporationhistory_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_characters_character_id_corporationhistory_500_internal_server_error'}}}}, '200': {'examples': {'application/json': [{'corporation_id': 90000001, 'start_date': '2016-06-26T20:00:00Z', 'record_id': 500, 'is_deleted': False}, {'corporation_id': 90000002, 'start_date': '2016-07-26T20:00:00Z', 'record_id': 501, 'is_deleted': False}]}, 'description': 'Corporation history for the given character', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'description': '200 ok object', 'title': 'get_characters_character_id_corporationhistory_200_ok', 'type': 'object', 'properties': {'corporation_id': {'description': 'corporation_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_corporationhistory_corporation_id'}, 'start_date': {'description': 'start_date string', 'format': 'date-time', 'type': 'string', 'title': 'get_characters_character_id_corporationhistory_start_date'}, 'record_id': {'description': 'An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous', 'format': 'int32', 'type': 'integer', 'title': 'get_characters_character_id_corporationhistory_record_id'}, 'is_deleted': {'description': 'True if the corporation has been deleted', 'type': 'boolean', 'title': 'get_characters_character_id_corporationhistory_is_deleted'}}}, 'type': 'array', 'title': 'get_characters_character_id_corporationhistory_ok'}}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Get a list of all the corporations a character has been a member of
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/corporationhistory/`
        
        Alternate route: `/legacy/characters/{character_id}/corporationhistory/`
        
        Alternate route: `/dev/characters/{character_id}/corporationhistory/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)