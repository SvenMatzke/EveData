# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class CharactersDetailBookmarks(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/bookmarks/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of bookmarks', 'examples': {'application/json': [{'create_date': '2016-08-09T11:57:47Z', 'owner_id': 90000001, 'memo': 'aoeu ( Citadel )', 'creator_id': 90000001, 'bookmark_id': 32, 'note': '', 'folder_id': 5, 'target': {'location_id': 30000005, 'item': {'type_id': 35832, 'item_id': 1000000012668}}}]}, 'schema': {'title': 'get_characters_character_id_bookmarks_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_bookmarks_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['bookmark_id', 'creator_id', 'owner_id', 'create_date', 'memo', 'note', 'target'], 'properties': {'create_date': {'type': 'string', 'format': 'date-time', 'description': 'create_date string', 'title': 'get_characters_character_id_bookmarks_create_date'}, 'owner_id': {'type': 'integer', 'format': 'int32', 'description': 'owner_id integer', 'title': 'get_characters_character_id_bookmarks_owner_id'}, 'memo': {'type': 'string', 'description': 'memo string', 'title': 'get_characters_character_id_bookmarks_memo'}, 'creator_id': {'type': 'integer', 'format': 'int32', 'description': 'creator_id integer', 'title': 'get_characters_character_id_bookmarks_creator_id'}, 'bookmark_id': {'type': 'integer', 'format': 'int64', 'description': 'bookmark_id integer', 'title': 'get_characters_character_id_bookmarks_bookmark_id'}, 'note': {'type': 'string', 'description': 'note string', 'title': 'get_characters_character_id_bookmarks_note'}, 'folder_id': {'type': 'integer', 'format': 'int32', 'description': 'folder_id integer', 'title': 'get_characters_character_id_bookmarks_folder_id'}, 'target': {'title': 'get_characters_character_id_bookmarks_target', 'type': 'object', 'description': 'target object', 'required': ['location_id'], 'properties': {'coordinates': {'title': 'get_characters_character_id_bookmarks_coordinates', 'type': 'object', 'description': 'coordinates object', 'required': ['x', 'y', 'z'], 'properties': {'z': {'type': 'number', 'format': 'double', 'description': 'z number', 'title': 'get_characters_character_id_bookmarks_z'}, 'y': {'type': 'number', 'format': 'double', 'description': 'y number', 'title': 'get_characters_character_id_bookmarks_y'}, 'x': {'type': 'number', 'format': 'double', 'description': 'x number', 'title': 'get_characters_character_id_bookmarks_x'}}}, 'location_id': {'type': 'integer', 'format': 'int64', 'description': 'location_id integer', 'title': 'get_characters_character_id_bookmarks_location_id'}, 'item': {'title': 'get_characters_character_id_bookmarks_item', 'type': 'object', 'description': 'item object', 'required': ['item_id', 'type_id'], 'properties': {'type_id': {'type': 'integer', 'format': 'int32', 'description': 'type_id integer', 'title': 'get_characters_character_id_bookmarks_type_id'}, 'item_id': {'type': 'integer', 'format': 'int64', 'description': 'item_id integer', 'title': 'get_characters_character_id_bookmarks_item_id'}}}}}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_bookmarks_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_bookmarks_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-bookmarks.read_character_bookmarks.v1'}}, 'schema': {'title': 'get_characters_character_id_bookmarks_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_bookmarks_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                List your character's personal bookmarks
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/bookmarks/`
        
        Alternate route: `/legacy/characters/{character_id}/bookmarks/`
        
        Alternate route: `/dev/characters/{character_id}/bookmarks/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailPortrait(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/portrait/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Public data for the given character', 'examples': {'application/json': {'px64x64': 'https://imageserver.eveonline.com/Character/95465499_64.jpg', 'px256x256': 'https://imageserver.eveonline.com/Character/95465499_256.jpg', 'px128x128': 'https://imageserver.eveonline.com/Character/95465499_128.jpg', 'px512x512': 'https://imageserver.eveonline.com/Character/95465499_512.jpg'}}, 'schema': {'title': 'get_characters_character_id_portrait_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'px64x64': {'type': 'string', 'description': 'px64x64 string', 'title': 'get_characters_character_id_portrait_px64x64'}, 'px256x256': {'type': 'string', 'description': 'px256x256 string', 'title': 'get_characters_character_id_portrait_px256x256'}, 'px128x128': {'type': 'string', 'description': 'px128x128 string', 'title': 'get_characters_character_id_portrait_px128x128'}, 'px512x512': {'type': 'string', 'description': 'px512x512 string', 'title': 'get_characters_character_id_portrait_px512x512'}}}}, '404': {'description': 'No image server for this datasource', 'examples': {'application/json': {'error': 'No image server for this datasource'}}, 'schema': {'title': 'get_characters_character_id_portrait_not_found', 'type': 'object', 'description': 'No image server for this datasource', 'properties': {'error': {'type': 'string', 'description': 'error message', 'title': 'get_characters_character_id_portrait_error'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_portrait_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_portrait_500_internal_server_error'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Get portrait urls for a character
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/portrait/`
        
        Alternate route: `/dev/characters/{character_id}/portrait/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailContacts(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/contacts/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of contacts', 'examples': {'application/json': [{'is_watched': True, 'contact_id': 123, 'contact_type': 'character', 'standing': 10.0, 'is_blocked': False}]}, 'schema': {'title': 'get_characters_character_id_contacts_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_contacts_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['standing', 'contact_type', 'contact_id'], 'properties': {'is_watched': {'type': 'boolean', 'description': 'Whether this contact is being watched', 'title': 'get_characters_character_id_contacts_is_watched'}, 'contact_id': {'type': 'integer', 'format': 'int32', 'description': 'contact_id integer', 'title': 'get_characters_character_id_contacts_contact_id'}, 'contact_type': {'title': 'get_characters_character_id_contacts_contact_type', 'type': 'string', 'description': 'contact_type string', 'enum': ['character', 'corporation', 'alliance', 'faction']}, 'is_blocked': {'type': 'boolean', 'description': 'Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false', 'title': 'get_characters_character_id_contacts_is_blocked'}, 'label_id': {'type': 'integer', 'format': 'int64', 'description': 'Custom label of the contact', 'title': 'get_characters_character_id_contacts_label_id'}, 'standing': {'type': 'number', 'format': 'float', 'description': 'Standing of the contact', 'title': 'get_characters_character_id_contacts_standing'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_contacts_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_contacts_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_contacts.v1'}}, 'schema': {'title': 'get_characters_character_id_contacts_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_contacts_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'ID for a character', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'page', 'format': 'int32', 'default': 1, 'type': 'integer', 'in': 'query', 'minimum': 1, 'required': False, 'description': 'page integer'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",page= 1,**kwargs
    ):
        """
                Return contacts of a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`
        
        
        ---
        
        This route is cached for up to 300 seconds

        :type character_id: int
        :param character_id: ID for a character

        :type datasource: str
        :param datasource: The server name you would like data from

        :type page: int
        :param page: page integer

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "page" : page, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'201': {'description': 'A list of contact ids that successfully created', 'examples': {'application/json': [123, 456]}, 'schema': {'title': 'post_characters_character_id_contacts_created', 'type': 'array', 'description': '201 created array', 'items': {'type': 'integer', 'format': 'int32', 'description': '201 created integer', 'title': 'post_characters_character_id_contacts_201_created'}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'post_characters_character_id_contacts_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_characters_character_id_contacts_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.write_contacts.v1'}}, 'schema': {'title': 'post_characters_character_id_contacts_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_characters_character_id_contacts_403_forbidden'}}}}}

    def post(self, character_id, contact_ids, datasource="tranquility",label_id, standing, token="None",user_agent="None",watched, x_user_agent="None",):
        """
                Bulk add contacts with same settings
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`

        :type character_id: int
        :param character_id: ID for a character

        :type contact_ids: None
        :param contact_ids: A list of contacts to add

        :type datasource: str
        :param datasource: The server name you would like data from

        :type label_id: int
        :param label_id: Add a custom label to the new contact

        :type standing: number
        :param standing: Standing for the new contact

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type watched: boolean
        :param watched: Whether the new contact should be watched, note this is only effective on characters

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**{"character_id":character_id, "contact_ids":contact_ids, "datasource":datasource, "label_id":label_id, "standing":standing, "token":token, "user_agent":user_agent, "watched":watched, "X-User-Agent":x_user_agent, })

    delete_responses = {'204': {'description': 'Contacts deleted'}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'delete_characters_character_id_contacts_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'delete_characters_character_id_contacts_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.write_contacts.v1'}}, 'schema': {'title': 'delete_characters_character_id_contacts_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'delete_characters_character_id_contacts_403_forbidden'}}}}}

    def delete(self, character_id, contact_ids, datasource="tranquility",token="None",user_agent="None",x_user_agent="None",):
        """
                Bulk delete contacts
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`

        :type character_id: int
        :param character_id: ID for a character

        :type contact_ids: None
        :param contact_ids: A list of contacts to edit

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**{"character_id":character_id, "contact_ids":contact_ids, "datasource":datasource, "token":token, "user_agent":user_agent, "X-User-Agent":x_user_agent, })

    put_responses = {'204': {'description': 'Contacts updated'}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'put_characters_character_id_contacts_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'put_characters_character_id_contacts_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.write_contacts.v1'}}, 'schema': {'title': 'put_characters_character_id_contacts_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'put_characters_character_id_contacts_403_forbidden'}}}}}

    def put(self, character_id, contact_ids, datasource="tranquility",label_id, standing, token="None",user_agent="None",watched, x_user_agent="None",):
        """
                Bulk edit contacts with same settings
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`

        :type character_id: int
        :param character_id: ID for a character

        :type contact_ids: None
        :param contact_ids: A list of contacts to edit

        :type datasource: str
        :param datasource: The server name you would like data from

        :type label_id: int
        :param label_id: Add a custom label to the contact, use 0 for clearing label

        :type standing: number
        :param standing: Standing for the contact

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type watched: boolean
        :param watched: Whether the contact should be watched, note this is only effective on characters

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.put_responses) \
            .put(**{"character_id": character_id, "contact_ids": contact_ids, "datasource": datasource, "label_id": label_id, "standing": standing, "token": token, "user_agent": user_agent, "watched": watched, "X-User-Agent": x_user_agent, })


class CharactersNames(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/names/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of id/name associations', 'examples': {'application/json': [{'character_name': 'CCP Bartender', 'character_id': 95465499}]}, 'schema': {'title': 'get_characters_names_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_names_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['character_id', 'character_name'], 'properties': {'character_name': {'type': 'string', 'description': 'character_name string', 'title': 'get_characters_names_character_name'}, 'character_id': {'type': 'integer', 'format': 'int64', 'description': 'character_id integer', 'title': 'get_characters_names_character_id'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_names_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_names_500_internal_server_error'}}}}}
    parameter = [{'name': 'character_ids', 'description': 'A comma separated list of character IDs', 'minItems': 1, 'type': 'array', 'in': 'query', 'required': True, 'items': {'type': 'integer', 'format': 'int64'}}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_ids, datasource= "tranquility",**kwargs
    ):
        """
                Resolve a set of character IDs to character names
        
        ---
        
        Alternate route: `/v1/characters/names/`
        
        Alternate route: `/legacy/characters/names/`
        
        Alternate route: `/dev/characters/names/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type character_ids: list
        :param character_ids: A comma separated list of character IDs

        :type datasource: str
        :param datasource: The server name you would like data from

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_ids" : character_ids, "datasource" : datasource, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailCorporationhistory(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/corporationhistory/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Corporation history for the given character', 'examples': {'application/json': [{'corporation_id': 90000001, 'is_deleted': False, 'record_id': 500, 'start_date': '2016-06-26T20:00:00Z'}, {'corporation_id': 90000002, 'is_deleted': False, 'record_id': 501, 'start_date': '2016-07-26T20:00:00Z'}]}, 'schema': {'title': 'get_characters_character_id_corporationhistory_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_corporationhistory_200_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'corporation_id': {'type': 'integer', 'format': 'int32', 'description': 'corporation_id integer', 'title': 'get_characters_character_id_corporationhistory_corporation_id'}, 'is_deleted': {'type': 'boolean', 'description': 'True if the corporation has been deleted', 'title': 'get_characters_character_id_corporationhistory_is_deleted'}, 'record_id': {'type': 'integer', 'format': 'int32', 'description': 'An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous', 'title': 'get_characters_character_id_corporationhistory_record_id'}, 'start_date': {'type': 'string', 'format': 'date-time', 'description': 'start_date string', 'title': 'get_characters_character_id_corporationhistory_start_date'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_corporationhistory_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_corporationhistory_500_internal_server_error'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Get a list of all the corporations a character has been a member of
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/corporationhistory/`
        
        Alternate route: `/legacy/characters/{character_id}/corporationhistory/`
        
        Alternate route: `/dev/characters/{character_id}/corporationhistory/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailPlanets(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/planets/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of colonies', 'examples': {'application/json': [{'owner_id': 90000001, 'planet_type': 'plasma', 'num_pins': 1, 'upgrade_level': 0, 'solar_system_id': 30000379, 'last_update': '2016-11-28T16:42:51Z', 'planet_id': 40023691}, {'owner_id': 90000001, 'planet_type': 'barren', 'num_pins': 1, 'upgrade_level': 0, 'solar_system_id': 30000379, 'last_update': '2016-11-28T16:41:54Z', 'planet_id': 40023697}]}, 'schema': {'title': 'get_characters_character_id_planets_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_planets_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['solar_system_id', 'planet_id', 'planet_type', 'owner_id', 'last_update', 'upgrade_level', 'num_pins'], 'properties': {'owner_id': {'type': 'integer', 'format': 'int32', 'description': 'owner_id integer', 'title': 'get_characters_character_id_planets_owner_id'}, 'planet_type': {'title': 'get_characters_character_id_planets_planet_type', 'type': 'string', 'description': 'planet_type string', 'enum': ['temperate', 'barren', 'oceanic', 'ice', 'gas', 'lava', 'storm', 'plasma']}, 'num_pins': {'type': 'integer', 'title': 'get_characters_character_id_planets_num_pins', 'format': 'int32', 'description': 'num_pins integer', 'minimum': 1}, 'upgrade_level': {'format': 'int32', 'description': 'upgrade_level integer', 'type': 'integer', 'maximum': 5, 'minimum': 0, 'title': 'get_characters_character_id_planets_upgrade_level'}, 'solar_system_id': {'type': 'integer', 'format': 'int32', 'description': 'solar_system_id integer', 'title': 'get_characters_character_id_planets_solar_system_id'}, 'last_update': {'type': 'string', 'format': 'date-time', 'description': 'last_update string', 'title': 'get_characters_character_id_planets_last_update'}, 'planet_id': {'type': 'integer', 'format': 'int32', 'description': 'planet_id integer', 'title': 'get_characters_character_id_planets_planet_id'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_planets_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_planets_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-planets.manage_planets.v1'}}, 'schema': {'title': 'get_characters_character_id_planets_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_planets_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'Character id of the target character', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Returns a list of all planetary colonies owned by a character.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/planets/`
        
        Alternate route: `/legacy/characters/{character_id}/planets/`
        
        Alternate route: `/dev/characters/{character_id}/planets/`
        
        
        ---
        
        This route is cached for up to 600 seconds

        :type character_id: int
        :param character_id: Character id of the target character

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailSkills(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/skills/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Known skills for the character', 'examples': {'application/json': {'skills': [{'skill_id': 1, 'current_skill_level': 1, 'skillpoints_in_skill': 10000}, {'skill_id': 2, 'current_skill_level': 1, 'skillpoints_in_skill': 10000}], 'total_sp': 20000}}, 'schema': {'title': 'get_characters_character_id_skills_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'skills': {'title': 'get_characters_character_id_skills_skills', 'type': 'array', 'description': 'skills array', 'items': {'title': 'get_characters_character_id_skills_skill', 'type': 'object', 'description': 'skill object', 'properties': {'skill_id': {'type': 'integer', 'format': 'int32', 'description': 'skill_id integer', 'title': 'get_characters_character_id_skills_skill_id'}, 'current_skill_level': {'type': 'integer', 'format': 'int32', 'description': 'current_skill_level integer', 'title': 'get_characters_character_id_skills_current_skill_level'}, 'skillpoints_in_skill': {'type': 'integer', 'format': 'int64', 'description': 'skillpoints_in_skill integer', 'title': 'get_characters_character_id_skills_skillpoints_in_skill'}}}}, 'total_sp': {'type': 'integer', 'format': 'int64', 'description': 'total_sp integer', 'title': 'get_characters_character_id_skills_total_sp'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_skills_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_skills_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-skills.read_skills.v1'}}, 'schema': {'title': 'get_characters_character_id_skills_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_skills_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                List all trained skills for the given character
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/skills/`
        
        Alternate route: `/dev/characters/{character_id}/skills/`
        
        
        ---
        
        This route is cached for up to 120 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'The requested mail', 'examples': {'application/json': [{'subject': 'Title for EVE Mail', 'mail_id': 7, 'recipients': [{'recipient_id': 90000002, 'recipient_type': 'character'}], 'is_read': True, 'labels': [3], 'timestamp': '2015-09-30T16:07:00Z', 'from': 90000001}]}, 'schema': {'title': 'get_characters_character_id_mail_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_mail_200_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'subject': {'type': 'string', 'description': 'Mail subject', 'title': 'get_characters_character_id_mail_subject'}, 'mail_id': {'type': 'integer', 'format': 'int64', 'description': 'mail_id integer', 'title': 'get_characters_character_id_mail_mail_id'}, 'recipients': {'uniqueItems': True, 'description': 'Recipients of the mail', 'minItems': 1, 'maxItems': 50, 'items': {'title': 'get_characters_character_id_mail_recipient', 'type': 'object', 'description': 'recipient object', 'required': ['recipient_type', 'recipient_id'], 'properties': {'recipient_id': {'type': 'integer', 'format': 'int32', 'description': 'recipient_id integer', 'title': 'get_characters_character_id_mail_recipient_id'}, 'recipient_type': {'title': 'get_characters_character_id_mail_recipient_type', 'type': 'string', 'description': 'recipient_type string', 'enum': ['alliance', 'character', 'corporation', 'mailing_list']}}}, 'type': 'array', 'title': 'get_characters_character_id_mail_recipients'}, 'is_read': {'type': 'boolean', 'description': 'is_read boolean', 'title': 'get_characters_character_id_mail_is_read'}, 'labels': {'uniqueItems': True, 'description': 'labels array', 'maxItems': 25, 'items': {'type': 'integer', 'format': 'int64', 'description': 'label integer', 'title': 'get_characters_character_id_mail_label'}, 'type': 'array', 'minimum': 0, 'title': 'get_characters_character_id_mail_labels'}, 'timestamp': {'type': 'string', 'format': 'date-time', 'description': 'When the mail was sent', 'title': 'get_characters_character_id_mail_timestamp'}, 'from': {'type': 'integer', 'format': 'int32', 'description': 'From whom the mail was sent', 'title': 'get_characters_character_id_mail_from'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_mail_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_mail_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'schema': {'title': 'get_characters_character_id_mail_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_mail_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'labels', 'uniqueItems': True, 'description': 'Fetch only mails that match one or more of the given labels', 'minItems': 1, 'type': 'array', 'in': 'query', 'required': False, 'items': {'type': 'integer', 'format': 'int64', 'minimum': 0}}, {'name': 'last_mail_id', 'in': 'query', 'type': 'integer', 'format': 'int32', 'description': 'List only mail with an ID lower than the given ID, if present'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",labels= ,**kwargs
    ):
        """
                Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/`
        
        Alternate route: `/dev/characters/{character_id}/mail/`
        
        
        ---
        
        This route is cached for up to 30 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type labels: list
        :param labels: Fetch only mails that match one or more of the given labels

        :type last_mail_id: int
        :param last_mail_id: List only mail with an ID lower than the given ID, if present

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "labels" : labels, "last_mail_id" : last_mail_id, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'400': {'description': 'Only one corporation, alliance, or mailing list can be the\nrecipient of a mail\n', 'examples': {'application/json': {'error': 'Bad request message'}}, 'schema': {'title': 'post_characters_character_id_mail_bad_request', 'type': 'object', 'description': 'Bad request', 'properties': {'error': {'type': 'string', 'description': 'Bad request message', 'title': 'post_characters_character_id_mail_400_bad_request'}}}}, '201': {'description': 'Mail created', 'examples': {'application/json': 13}, 'schema': {'type': 'integer', 'format': 'int32', 'description': 'Mail ID', 'title': 'post_characters_character_id_mail_created'}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'post_characters_character_id_mail_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_characters_character_id_mail_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.send_mail.v1'}}, 'schema': {'title': 'post_characters_character_id_mail_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_characters_character_id_mail_403_forbidden'}}}}}

    def post(self, character_id, datasource="tranquility",mail, token="None",user_agent="None",x_user_agent="None",):
        """
                Create and send a new mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/`
        
        Alternate route: `/dev/characters/{character_id}/mail/`

        :type character_id: int
        :param character_id: The sender's character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type mail: None
        :param mail: The mail to send

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**{"character_id":character_id, "datasource":datasource, "mail":mail, "token":token, "user_agent":user_agent, "X-User-Agent":x_user_agent, })


class CharactersDetailMailLists(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/lists/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Mailing lists', 'examples': {'application/json': [{'name': 'test_mailing_list', 'mailing_list_id': 1}]}, 'schema': {'title': 'get_characters_character_id_mail_lists_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_mail_lists_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['mailing_list_id', 'name'], 'properties': {'name': {'type': 'string', 'description': 'name string', 'title': 'get_characters_character_id_mail_lists_name'}, 'mailing_list_id': {'type': 'integer', 'format': 'int32', 'description': 'Mailing list ID', 'title': 'get_characters_character_id_mail_lists_mailing_list_id'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_mail_lists_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_mail_lists_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'schema': {'title': 'get_characters_character_id_mail_lists_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_mail_lists_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Return all mailing lists that the character is subscribed to
        
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/lists/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/lists/`
        
        Alternate route: `/dev/characters/{character_id}/mail/lists/`
        
        
        ---
        
        This route is cached for up to 120 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailCalendar(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/calendar/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A collection of event summaries', 'examples': {'application/json': [{'event_response': 'accepted', 'event_id': 1386435, 'title': 'o7 The EVE Online Show', 'event_date': '2016-06-26T20:00:00Z', 'importance': 0}]}, 'schema': {'title': 'get_characters_character_id_calendar_ok', 'type': 'array', 'description': 'Up to 50 events from now or the event you requested\n', 'items': {'title': 'get_characters_character_id_calendar_200_ok', 'type': 'object', 'description': 'event', 'properties': {'event_response': {'title': 'get_characters_character_id_calendar_event_response', 'type': 'string', 'description': 'event_response string', 'enum': ['declined', 'not_responded', 'accepted', 'tentative']}, 'event_id': {'type': 'integer', 'format': 'int32', 'description': 'event_id integer', 'title': 'get_characters_character_id_calendar_event_id'}, 'title': {'type': 'string', 'description': 'title string', 'title': 'get_characters_character_id_calendar_title'}, 'event_date': {'type': 'string', 'format': 'date-time', 'description': 'event_date string', 'title': 'get_characters_character_id_calendar_event_date'}, 'importance': {'type': 'integer', 'format': 'int32', 'description': 'importance integer', 'title': 'get_characters_character_id_calendar_importance'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_calendar_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_calendar_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-calendar.read_calendar_events.v1'}}, 'schema': {'title': 'get_characters_character_id_calendar_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_calendar_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'The character to retrieve events from', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'from_event', 'format': 'int32', 'description': 'The event ID to retrieve events from', 'type': 'integer', 'in': 'query', 'required': False}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",from_event= ,**kwargs
    ):
        """
                Get 50 event summaries from the calendar. If no event ID is given,
        the resource will return the next 50 chronological event summaries
        from now. If an event ID is specified, it will return the next 50
        chronological event summaries from after that event.
        
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/calendar/`
        
        Alternate route: `/legacy/characters/{character_id}/calendar/`
        
        Alternate route: `/dev/characters/{character_id}/calendar/`
        
        
        ---
        
        This route is cached for up to 5 seconds

        :type character_id: int
        :param character_id: The character to retrieve events from

        :type datasource: str
        :param datasource: The server name you would like data from

        :type from_event: int
        :param from_event: The event ID to retrieve events from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "from_event" : from_event, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailLocation(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/location/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.', 'examples': {'application/json': {'solar_system_id': 30002505, 'structure_id': 1000000016989}}, 'schema': {'title': 'get_characters_character_id_location_ok', 'type': 'object', 'description': '200 ok object', 'required': ['solar_system_id'], 'properties': {'solar_system_id': {'type': 'integer', 'format': 'int32', 'description': 'solar_system_id integer', 'title': 'get_characters_character_id_location_solar_system_id'}, 'structure_id': {'type': 'integer', 'format': 'int64', 'description': 'structure_id integer', 'title': 'get_characters_character_id_location_structure_id'}, 'station_id': {'type': 'integer', 'format': 'int32', 'description': 'station_id integer', 'title': 'get_characters_character_id_location_station_id'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_location_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_location_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-location.read_location.v1'}}, 'schema': {'title': 'get_characters_character_id_location_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_location_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/location/`
        
        Alternate route: `/legacy/characters/{character_id}/location/`
        
        Alternate route: `/dev/characters/{character_id}/location/`
        
        
        ---
        
        This route is cached for up to 5 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Public data for the given character', 'examples': {'application/json': {'corporation_id': 109299958, 'ancestry_id': 19, 'name': 'CCP Bartender', 'description': '', 'race_id': 2, 'gender': 'male', 'bloodline_id': 3, 'birthday': '2015-03-24T11:37:00Z'}}, 'schema': {'title': 'get_characters_character_id_ok', 'type': 'object', 'description': '200 ok object', 'required': ['corporation_id', 'birthday', 'name', 'gender', 'race_id', 'bloodline_id'], 'properties': {'corporation_id': {'type': 'integer', 'format': 'int32', 'description': "The character's corporation ID", 'title': 'get_characters_character_id_corporation_id'}, 'ancestry_id': {'type': 'integer', 'format': 'int32', 'description': 'ancestry_id integer', 'title': 'get_characters_character_id_ancestry_id'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_characters_character_id_name'}, 'gender': {'title': 'get_characters_character_id_gender', 'type': 'string', 'description': 'gender string', 'enum': ['female', 'male']}, 'description': {'type': 'string', 'description': 'description string', 'title': 'get_characters_character_id_description'}, 'race_id': {'type': 'integer', 'format': 'int32', 'description': 'race_id integer', 'title': 'get_characters_character_id_race_id'}, 'security_status': {'format': 'float', 'description': 'security_status number', 'type': 'number', 'maximum': 10, 'minimum': -10, 'title': 'get_characters_character_id_security_status'}, 'alliance_id': {'type': 'integer', 'format': 'int32', 'description': "The character's alliance ID", 'title': 'get_characters_character_id_alliance_id'}, 'bloodline_id': {'type': 'integer', 'format': 'int32', 'description': 'bloodline_id integer', 'title': 'get_characters_character_id_bloodline_id'}, 'birthday': {'type': 'string', 'format': 'date-time', 'description': 'Creation date of the character', 'title': 'get_characters_character_id_birthday'}}}}, '404': {'description': 'Character not found', 'examples': {'application/json': {'error': 'Not found message'}}, 'schema': {'title': 'get_characters_character_id_not_found', 'type': 'object', 'description': 'Not found', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_characters_character_id_404_not_found'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_500_internal_server_error'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Public information about a character
        
        ---
        
        Alternate route: `/v4/characters/{character_id}/`
        
        Alternate route: `/dev/characters/{character_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailFittingsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/fittings/{fitting_id}/"

    delete_responses = {'204': {'description': 'Fitting deleted'}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'delete_characters_character_id_fittings_fitting_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'delete_characters_character_id_fittings_fitting_id_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-fittings.write_fittings.v1'}}, 'schema': {'title': 'delete_characters_character_id_fittings_fitting_id_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'delete_characters_character_id_fittings_fitting_id_403_forbidden'}}}}}

    def delete(self, character_id, datasource="tranquility",fitting_id, token="None",user_agent="None",x_user_agent="None",):
        """
                Delete a fitting from a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/fittings/{fitting_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/fittings/{fitting_id}/`
        
        Alternate route: `/dev/characters/{character_id}/fittings/{fitting_id}/`

        :type character_id: int
        :param character_id: ID for a character

        :type datasource: str
        :param datasource: The server name you would like data from

        :type fitting_id: int
        :param fitting_id: ID for a fitting of this character

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**{"character_id":character_id, "datasource":datasource, "fitting_id":fitting_id, "token":token, "user_agent":user_agent, "X-User-Agent":x_user_agent, })


class CharactersDetailContactsLabels(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/contacts/labels/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of contact labels', 'examples': {'application/json': [{'label_id': 123, 'label_name': 'Friends'}]}, 'schema': {'title': 'get_characters_character_id_contacts_labels_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_contacts_labels_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['label_id', 'label_name'], 'properties': {'label_id': {'type': 'integer', 'format': 'int64', 'description': 'label_id integer', 'title': 'get_characters_character_id_contacts_labels_label_id'}, 'label_name': {'type': 'string', 'description': 'label_name string', 'title': 'get_characters_character_id_contacts_labels_label_name'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_contacts_labels_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_contacts_labels_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_contacts.v1'}}, 'schema': {'title': 'get_characters_character_id_contacts_labels_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_contacts_labels_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'ID for a character', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Return custom labels for contacts the character defined
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/labels/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/labels/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/labels/`
        
        
        ---
        
        This route is cached for up to 300 seconds

        :type character_id: int
        :param character_id: ID for a character

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMailLabels(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/labels/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of mail labels and unread counts', 'examples': {'application/json': {'labels': [{'name': 'PINK', 'unread_count': 4, 'color_hex': '#660066', 'label_id': 16}, {'name': 'WHITE', 'unread_count': 1, 'color_hex': '#ffffff', 'label_id': 17}], 'total_unread_count': 5}}, 'schema': {'title': 'get_characters_character_id_mail_labels_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'labels': {'title': 'get_characters_character_id_mail_labels_labels', 'type': 'array', 'description': 'labels array', 'items': {'title': 'get_characters_character_id_mail_labels_label', 'type': 'object', 'description': 'label object', 'properties': {'name': {'maxLength': 40, 'type': 'string', 'description': 'name string', 'title': 'get_characters_character_id_mail_labels_name'}, 'unread_count': {'type': 'integer', 'title': 'get_characters_character_id_mail_labels_unread_count', 'format': 'int32', 'description': 'unread_count integer', 'minimum': 0}, 'color': {'type': 'string', 'enum': ['#ffffff', '#ffff01', '#ff6600', '#fe0000', '#9a0000', '#660066', '#0000fe', '#0099ff', '#01ffff', '#00ff33', '#349800', '#006634', '#666666', '#999999', '#e6e6e6', '#ffffcd', '#99ffff', '#ccff9a'], 'title': 'get_characters_character_id_mail_labels_color', 'default': '#ffffff', 'description': 'color string'}, 'label_id': {'type': 'integer', 'title': 'get_characters_character_id_mail_labels_label_id', 'format': 'int32', 'description': 'label_id integer', 'minimum': 0}}}}, 'total_unread_count': {'type': 'integer', 'title': 'get_characters_character_id_mail_labels_total_unread_count', 'format': 'int32', 'description': 'total_unread_count integer', 'minimum': 0}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_mail_labels_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_mail_labels_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'schema': {'title': 'get_characters_character_id_mail_labels_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_mail_labels_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Return a list of the users mail labels, unread counts for each label and a total unread count.
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/mail/labels/`
        
        Alternate route: `/dev/characters/{character_id}/mail/labels/`
        
        
        ---
        
        This route is cached for up to 30 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'201': {'description': 'Label created', 'examples': {'application/json': 128}, 'schema': {'type': 'integer', 'format': 'int64', 'description': 'Label ID', 'title': 'post_characters_character_id_mail_labels_created'}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'post_characters_character_id_mail_labels_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_characters_character_id_mail_labels_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'schema': {'title': 'post_characters_character_id_mail_labels_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_characters_character_id_mail_labels_403_forbidden'}}}}}

    def post(self, character_id, datasource="tranquility",label="None",token="None",user_agent="None",x_user_agent="None",):
        """
                Create a mail label
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/mail/labels/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/labels/`
        
        Alternate route: `/dev/characters/{character_id}/mail/labels/`

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type label: None
        :param label: Label to create

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**{"character_id":character_id, "datasource":datasource, "label":label, "token":token, "user_agent":user_agent, "X-User-Agent":x_user_agent, })


class CharactersDetailWallets(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/wallets/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Wallet data for selected user', 'examples': {'application/json': [{'wallet_id': 1000, 'balance': 295000}]}, 'schema': {'title': 'get_characters_character_id_wallets_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_wallets_200_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'wallet_id': {'type': 'integer', 'format': 'int32', 'description': 'wallet_id integer', 'title': 'get_characters_character_id_wallets_wallet_id'}, 'balance': {'type': 'integer', 'format': 'int64', 'description': "Wallet's balance in ISK hundredths.", 'title': 'get_characters_character_id_wallets_balance'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_wallets_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_wallets_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-wallet.read_character_wallet.v1'}}, 'schema': {'title': 'get_characters_character_id_wallets_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_wallets_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                List your wallets and their balances. Characters typically have only one wallet, with wallet_id 1000 being the master wallet.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/wallets/`
        
        Alternate route: `/legacy/characters/{character_id}/wallets/`
        
        Alternate route: `/dev/characters/{character_id}/wallets/`
        
        
        ---
        
        This route is cached for up to 120 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailKillmailsRecent(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/killmails/recent/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of killmail IDs and hashes', 'examples': {'application/json': [{'killmail_hash': '8eef5e8fb6b88fe3407c489df33822b2e3b57a5e', 'killmail_id': 2}, {'killmail_hash': 'b41ccb498ece33d64019f64c0db392aa3aa701fb', 'killmail_id': 1}]}, 'schema': {'title': 'get_characters_character_id_killmails_recent_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_killmails_recent_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['killmail_id', 'killmail_hash'], 'properties': {'killmail_hash': {'type': 'string', 'description': 'A hash of this killmail', 'title': 'get_characters_character_id_killmails_recent_killmail_hash'}, 'killmail_id': {'type': 'integer', 'format': 'int32', 'description': 'ID of this killmail', 'title': 'get_characters_character_id_killmails_recent_killmail_id'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_killmails_recent_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_killmails_recent_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-killmails.read_killmails.v1'}}, 'schema': {'title': 'get_characters_character_id_killmails_recent_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_killmails_recent_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'max_count', 'type': 'integer', 'format': 'int32', 'default': 50, 'in': 'query', 'maximum': 5000, 'required': False, 'description': 'How many killmails to return at maximum'}, {'name': 'max_kill_id', 'format': 'int32', 'description': 'Only return killmails with ID smaller than this.\n', 'type': 'integer', 'in': 'query', 'required': False}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",max_count= ,max_kill_id= ,**kwargs
    ):
        """
                Return a list of character's recent kills and losses
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/killmails/recent/`
        
        Alternate route: `/legacy/characters/{character_id}/killmails/recent/`
        
        Alternate route: `/dev/characters/{character_id}/killmails/recent/`
        
        
        ---
        
        This route is cached for up to 120 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type max_count: int
        :param max_count: How many killmails to return at maximum

        :type max_kill_id: int
        :param max_kill_id: Only return killmails with ID smaller than this.


        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "max_count" : max_count, "max_kill_id" : max_kill_id, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailAssets(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/assets/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A flat list of the users assets', 'examples': {'application/json': [{'location_flag': 'Hangar', 'is_singleton': True, 'location_type': 'station', 'location_id': 60002959, 'type_id': 3516, 'item_id': 1000000016835}]}, 'schema': {'title': 'get_characters_character_id_assets_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_assets_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['type_id', 'location_id', 'location_type', 'item_id', 'location_flag', 'is_singleton'], 'properties': {'location_flag': {'title': 'get_characters_character_id_assets_location_flag', 'type': 'string', 'description': 'location_flag string', 'enum': ['AutoFit', 'Cargo', 'CorpseBay', 'DroneBay', 'FleetHangar', 'Deliveries', 'HiddenModifiers', 'Hangar', 'HangarAll', 'LoSlot0', 'LoSlot1', 'LoSlot2', 'LoSlot3', 'LoSlot4', 'LoSlot5', 'LoSlot6', 'LoSlot7', 'MedSlot0', 'MedSlot1', 'MedSlot2', 'MedSlot3', 'MedSlot4', 'MedSlot5', 'MedSlot6', 'MedSlot7', 'HiSlot0', 'HiSlot1', 'HiSlot2', 'HiSlot3', 'HiSlot4', 'HiSlot5', 'HiSlot6', 'HiSlot7', 'AssetSafety', 'Locked', 'Unlocked', 'Implant', 'QuafeBay', 'RigSlot0', 'RigSlot1', 'RigSlot2', 'RigSlot3', 'RigSlot4', 'RigSlot5', 'RigSlot6', 'RigSlot7', 'ShipHangar', 'SpecializedFuelBay', 'SpecializedOreHold', 'SpecializedGasHold', 'SpecializedMineralHold', 'SpecializedSalvageHold', 'SpecializedShipHold', 'SpecializedSmallShipHold', 'SpecializedMediumShipHold', 'SpecializedLargeShipHold', 'SpecializedIndustrialShipHold', 'SpecializedAmmoHold', 'SpecializedCommandCenterHold', 'SpecializedPlanetaryCommoditiesHold', 'SpecializedMaterialBay', 'SubSystemSlot0', 'SubSystemSlot1', 'SubSystemSlot2', 'SubSystemSlot3', 'SubSystemSlot4', 'SubSystemSlot5', 'SubSystemSlot6', 'SubSystemSlot7', 'FighterBay', 'FighterTube0', 'FighterTube1', 'FighterTube2', 'FighterTube3', 'FighterTube4', 'Module']}, 'is_singleton': {'type': 'boolean', 'description': 'is_singleton boolean', 'title': 'get_characters_character_id_assets_is_singleton'}, 'location_type': {'title': 'get_characters_character_id_assets_location_type', 'type': 'string', 'description': 'location_type string', 'enum': ['station', 'solar_system', 'other']}, 'quantity': {'type': 'integer', 'format': 'int32', 'description': 'quantity integer', 'title': 'get_characters_character_id_assets_quantity'}, 'location_id': {'type': 'integer', 'format': 'int64', 'description': 'location_id integer', 'title': 'get_characters_character_id_assets_location_id'}, 'type_id': {'type': 'integer', 'format': 'int32', 'description': 'type_id integer', 'title': 'get_characters_character_id_assets_type_id'}, 'item_id': {'type': 'integer', 'format': 'int64', 'description': 'item_id integer', 'title': 'get_characters_character_id_assets_item_id'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_assets_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_assets_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-assets.read_assets.v1'}}, 'schema': {'title': 'get_characters_character_id_assets_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_assets_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'Character id of the target character', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Return a list of the characters assets
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/assets/`
        
        Alternate route: `/legacy/characters/{character_id}/assets/`
        
        Alternate route: `/dev/characters/{character_id}/assets/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type character_id: int
        :param character_id: Character id of the target character

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailSkillqueue(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/skillqueue/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'The current skill queue, sorted ascending by finishing time', 'examples': {'application/json': [{'queue_position': 0, 'start_date': '2016-06-29T10:46:00Z', 'skill_id': 1, 'finished_level': 3, 'finish_date': '2016-06-29T10:47:00Z'}, {'queue_position': 1, 'start_date': '2016-06-29T10:47:00Z', 'skill_id': 1, 'finished_level': 4, 'finish_date': '2016-07-15T10:47:00Z'}, {'queue_position': 2, 'start_date': '2016-07-15T10:47:00Z', 'skill_id': 2, 'finished_level': 2, 'finish_date': '2016-08-30T10:47:00Z'}]}, 'schema': {'title': 'get_characters_character_id_skillqueue_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_skillqueue_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['skill_id', 'finished_level', 'queue_position'], 'properties': {'queue_position': {'type': 'integer', 'format': 'int32', 'description': 'queue_position integer', 'title': 'get_characters_character_id_skillqueue_queue_position'}, 'skill_id': {'type': 'integer', 'format': 'int32', 'description': 'skill_id integer', 'title': 'get_characters_character_id_skillqueue_skill_id'}, 'finished_level': {'format': 'int32', 'description': 'finished_level integer', 'type': 'integer', 'maximum': 5, 'minimum': 0, 'title': 'get_characters_character_id_skillqueue_finished_level'}, 'training_start_sp': {'type': 'integer', 'format': 'int32', 'description': 'training_start_sp integer', 'title': 'get_characters_character_id_skillqueue_training_start_sp'}, 'start_date': {'type': 'string', 'format': 'date-time', 'description': 'start_date string', 'title': 'get_characters_character_id_skillqueue_start_date'}, 'level_end_sp': {'type': 'integer', 'format': 'int32', 'description': 'level_end_sp integer', 'title': 'get_characters_character_id_skillqueue_level_end_sp'}, 'level_start_sp': {'type': 'integer', 'format': 'int32', 'description': "Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.", 'title': 'get_characters_character_id_skillqueue_level_start_sp'}, 'finish_date': {'type': 'string', 'format': 'date-time', 'description': 'finish_date string', 'title': 'get_characters_character_id_skillqueue_finish_date'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_skillqueue_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_skillqueue_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-skills.read_skillqueue.v1'}}, 'schema': {'title': 'get_characters_character_id_skillqueue_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_skillqueue_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'Character id of the target character', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                List the configured skill queue for the given character
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/skillqueue/`
        
        Alternate route: `/legacy/characters/{character_id}/skillqueue/`
        
        Alternate route: `/dev/characters/{character_id}/skillqueue/`
        
        
        ---
        
        This route is cached for up to 120 seconds

        :type character_id: int
        :param character_id: Character id of the target character

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailFittings(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/fittings/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of fittings', 'examples': {'application/json': [{'name': 'Best Vindicator', 'ship_type_id': 123, 'items': [{'type_id': 1234, 'flag': 12, 'quantity': 1}], 'description': 'Awesome Vindi fitting', 'fitting_id': 1}]}, 'schema': {'title': 'get_characters_character_id_fittings_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_fittings_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['fitting_id', 'name', 'description', 'ship_type_id', 'items'], 'properties': {'name': {'type': 'string', 'description': 'name string', 'title': 'get_characters_character_id_fittings_name'}, 'ship_type_id': {'type': 'integer', 'format': 'int32', 'description': 'ship_type_id integer', 'title': 'get_characters_character_id_fittings_ship_type_id'}, 'items': {'title': 'get_characters_character_id_fittings_items', 'type': 'array', 'description': 'items array', 'items': {'title': 'get_characters_character_id_fittings_item', 'type': 'object', 'description': 'item object', 'required': ['type_id', 'flag', 'quantity'], 'properties': {'type_id': {'type': 'integer', 'format': 'int32', 'description': 'type_id integer', 'title': 'get_characters_character_id_fittings_type_id'}, 'flag': {'type': 'integer', 'format': 'int32', 'description': 'flag integer', 'title': 'get_characters_character_id_fittings_flag'}, 'quantity': {'type': 'integer', 'format': 'int32', 'description': 'quantity integer', 'title': 'get_characters_character_id_fittings_quantity'}}}}, 'description': {'type': 'string', 'description': 'description string', 'title': 'get_characters_character_id_fittings_description'}, 'fitting_id': {'type': 'integer', 'format': 'int32', 'description': 'fitting_id integer', 'title': 'get_characters_character_id_fittings_fitting_id'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_fittings_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_fittings_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-fittings.read_fittings.v1'}}, 'schema': {'title': 'get_characters_character_id_fittings_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_fittings_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'ID for a character', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Return fittings of a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/fittings/`
        
        Alternate route: `/legacy/characters/{character_id}/fittings/`
        
        Alternate route: `/dev/characters/{character_id}/fittings/`
        
        
        ---
        
        This route is cached for up to 300 seconds

        :type character_id: int
        :param character_id: ID for a character

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'201': {'description': 'A list of fittings', 'examples': {'application/json': {'fitting_id': 2}}, 'schema': {'title': 'post_characters_character_id_fittings_created', 'type': 'object', 'description': '201 created object', 'required': ['fitting_id'], 'properties': {'fitting_id': {'type': 'integer', 'format': 'int32', 'description': 'fitting_id integer', 'title': 'post_characters_character_id_fittings_fitting_id'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'post_characters_character_id_fittings_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_characters_character_id_fittings_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-fittings.write_fittings.v1'}}, 'schema': {'title': 'post_characters_character_id_fittings_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_characters_character_id_fittings_403_forbidden'}}}}}

    def post(self, character_id, datasource="tranquility",fitting="None",token="None",user_agent="None",x_user_agent="None",):
        """
                Save a new fitting for a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/fittings/`
        
        Alternate route: `/legacy/characters/{character_id}/fittings/`
        
        Alternate route: `/dev/characters/{character_id}/fittings/`

        :type character_id: int
        :param character_id: ID for a character

        :type datasource: str
        :param datasource: The server name you would like data from

        :type fitting: None
        :param fitting: Details about the new fitting

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**{"character_id":character_id, "datasource":datasource, "fitting":fitting, "token":token, "user_agent":user_agent, "X-User-Agent":x_user_agent, })


class CharactersDetailMailLabelsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/labels/{label_id}/"

    delete_responses = {'422': {'description': 'Default labels cannot be deleted', 'examples': {'application/json': {'error': 'Unprocessable entity message'}}, 'schema': {'title': 'delete_characters_character_id_mail_labels_label_id_unprocessable_entity', 'type': 'object', 'description': 'Unprocessable entity', 'properties': {'error': {'type': 'string', 'description': 'Unprocessable entity message', 'title': 'delete_characters_character_id_mail_labels_label_id_422_unprocessable_entity'}}}}, '204': {'description': 'Label deleted'}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'delete_characters_character_id_mail_labels_label_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'delete_characters_character_id_mail_labels_label_id_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'schema': {'title': 'delete_characters_character_id_mail_labels_label_id_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'delete_characters_character_id_mail_labels_label_id_403_forbidden'}}}}}

    def delete(self, character_id, datasource="tranquility",label_id, token="None",user_agent="None",x_user_agent="None",):
        """
                Delete a mail label
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/labels/{label_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/labels/{label_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/labels/{label_id}/`

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type label_id: int
        :param label_id: An EVE label id

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**{"character_id":character_id, "datasource":datasource, "label_id":label_id, "token":token, "user_agent":user_agent, "X-User-Agent":x_user_agent, })


class CharactersDetailCalendarDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/calendar/{event_id}/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Full details of a specific event', 'examples': {'application/json': {'date': '2016-06-26T21:00:00Z', 'owner_type': 'eve_server', 'event_id': 1386435, 'owner_id': 1, 'owner_name': 'EVE System', 'duration': 60, 'text': 'o7: The EVE Online Show features latest developer news, fast paced action, community overviews and a lot more with CCP Guard and CCP Mimic. Join the thrilling o7 live broadcast at 20:00 EVE time (=UTC) on <a href="http://www.twitch.tv/ccp">EVE TV</a>. Don\'t miss it!', 'response': 'Undecided', 'title': 'o7 The EVE Online Show', 'importance': 1}}, 'schema': {'title': 'get_characters_character_id_calendar_event_id_ok', 'type': 'object', 'description': 'Full details of a specific event', 'required': ['event_id', 'owner_id', 'owner_name', 'date', 'title', 'duration', 'importance', 'response', 'text', 'owner_type'], 'properties': {'date': {'type': 'string', 'format': 'date-time', 'description': 'date string', 'title': 'get_characters_character_id_calendar_event_id_date'}, 'owner_type': {'title': 'get_characters_character_id_calendar_event_id_owner_type', 'type': 'string', 'description': 'owner_type string', 'enum': ['eve_server', 'corporation', 'faction', 'character', 'alliance']}, 'event_id': {'type': 'integer', 'format': 'int32', 'description': 'event_id integer', 'title': 'get_characters_character_id_calendar_event_id_event_id'}, 'owner_id': {'type': 'integer', 'format': 'int32', 'description': 'owner_id integer', 'title': 'get_characters_character_id_calendar_event_id_owner_id'}, 'owner_name': {'type': 'string', 'description': 'owner_name string', 'title': 'get_characters_character_id_calendar_event_id_owner_name'}, 'duration': {'type': 'integer', 'format': 'int32', 'description': 'Length in minutes', 'title': 'get_characters_character_id_calendar_event_id_duration'}, 'text': {'type': 'string', 'description': 'text string', 'title': 'get_characters_character_id_calendar_event_id_text'}, 'response': {'type': 'string', 'description': 'response string', 'title': 'get_characters_character_id_calendar_event_id_response'}, 'title': {'type': 'string', 'description': 'title string', 'title': 'get_characters_character_id_calendar_event_id_title'}, 'importance': {'type': 'integer', 'format': 'int32', 'description': 'importance integer', 'title': 'get_characters_character_id_calendar_event_id_importance'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_calendar_event_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_calendar_event_id_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-calendar.read_calendar_events.v1'}}, 'schema': {'title': 'get_characters_character_id_calendar_event_id_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_calendar_event_id_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'The character id requesting the event', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'event_id', 'format': 'int32', 'description': 'The id of the event requested', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",event_id, **kwargs
    ):
        """
                Get all the information for a specific event
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`
        
        Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`
        
        
        ---
        
        This route is cached for up to 5 seconds

        :type character_id: int
        :param character_id: The character id requesting the event

        :type datasource: str
        :param datasource: The server name you would like data from

        :type event_id: int
        :param event_id: The id of the event requested

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "event_id" : event_id, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    put_responses = {'204': {'description': 'Event updated'}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'put_characters_character_id_calendar_event_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'put_characters_character_id_calendar_event_id_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-calendar.respond_calendar_events.v1'}}, 'schema': {'title': 'put_characters_character_id_calendar_event_id_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'put_characters_character_id_calendar_event_id_403_forbidden'}}}}}

    def put(self, character_id, datasource="tranquility",event_id, response, token="None",user_agent="None",x_user_agent="None",):
        """
                Set your response status to an event
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`
        
        Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`

        :type character_id: int
        :param character_id: The character ID requesting the event

        :type datasource: str
        :param datasource: The server name you would like data from

        :type event_id: int
        :param event_id: The ID of the event requested

        :type response: None
        :param response: The response value to set, overriding current value.

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.put_responses) \
            .put(**{"character_id": character_id, "datasource": datasource, "event_id": event_id, "response": response, "token": token, "user_agent": user_agent, "X-User-Agent": x_user_agent, })


class CharactersDetailClones(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/clones/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Clone information for the given character', 'examples': {'application/json': {'jump_clones': [{'location_id': 60003463, 'location_type': 'station', 'implants': [22118]}, {'location_id': 1021348135816, 'location_type': 'structure', 'implants': []}], 'home_location': {'location_id': 1021348135816, 'location_type': 'structure'}}}, 'schema': {'title': 'get_characters_character_id_clones_ok', 'type': 'object', 'description': '200 ok object', 'required': ['jump_clones'], 'properties': {'jump_clones': {'title': 'get_characters_character_id_clones_jump_clones', 'type': 'array', 'description': 'jump_clones array', 'items': {'title': 'get_characters_character_id_clones_jump_clone', 'type': 'object', 'description': 'jump_clone object', 'properties': {'location_id': {'type': 'integer', 'format': 'int64', 'description': 'location_id integer', 'title': 'get_characters_character_id_clones_location_id'}, 'location_type': {'title': 'get_characters_character_id_clones_location_type', 'type': 'string', 'description': 'location_type string', 'enum': ['station', 'structure']}, 'implants': {'title': 'get_characters_character_id_clones_implants', 'type': 'array', 'description': 'implants array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'implant integer', 'title': 'get_characters_character_id_clones_implant'}}}}}, 'last_jump_date': {'type': 'string', 'format': 'date-time', 'description': 'last_jump_date string', 'title': 'get_characters_character_id_clones_last_jump_date'}, 'home_location': {'title': 'get_characters_character_id_clones_home_location', 'type': 'object', 'description': 'home_location object', 'properties': {'location_id': {'type': 'integer', 'format': 'int64', 'description': 'location_id integer', 'title': 'get_characters_character_id_clones_location_id'}, 'location_type': {'title': 'get_characters_character_id_clones_location_type', 'type': 'string', 'description': 'location_type string', 'enum': ['station', 'structure']}}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_clones_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_clones_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-clones.read_clones.v1'}}, 'schema': {'title': 'get_characters_character_id_clones_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_clones_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                A list of the character's clones
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/clones/`
        
        Alternate route: `/dev/characters/{character_id}/clones/`
        
        
        ---
        
        This route is cached for up to 120 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailSearch(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/search/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of search results', 'examples': {'application/json': {'solarsystem': [30002510], 'station': [60004588, 60004594, 60005725, 60009106, 60012721, 60012724, 60012727]}}, 'schema': {'title': 'get_characters_character_id_search_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'solarsystem': {'title': 'get_characters_character_id_search_solarsystem', 'type': 'array', 'description': 'solarsystem array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'solarsystem integer', 'title': 'get_characters_character_id_search_solarsystem'}}, 'faction': {'title': 'get_characters_character_id_search_faction', 'type': 'array', 'description': 'faction array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'faction integer', 'title': 'get_characters_character_id_search_faction'}}, 'wormhole': {'title': 'get_characters_character_id_search_wormhole', 'type': 'array', 'description': 'wormhole array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'wormhole integer', 'title': 'get_characters_character_id_search_wormhole'}}, 'corporation': {'title': 'get_characters_character_id_search_corporation', 'type': 'array', 'description': 'corporation array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'corporation integer', 'title': 'get_characters_character_id_search_corporation'}}, 'constellation': {'title': 'get_characters_character_id_search_constellation', 'type': 'array', 'description': 'constellation array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'constellation integer', 'title': 'get_characters_character_id_search_constellation'}}, 'character': {'title': 'get_characters_character_id_search_character', 'type': 'array', 'description': 'character array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'character integer', 'title': 'get_characters_character_id_search_character'}}, 'structure': {'title': 'get_characters_character_id_search_structure', 'type': 'array', 'description': 'structure array', 'items': {'type': 'integer', 'format': 'int64', 'description': 'structure integer', 'title': 'get_characters_character_id_search_structure'}}, 'alliance': {'title': 'get_characters_character_id_search_alliance', 'type': 'array', 'description': 'alliance array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'alliance integer', 'title': 'get_characters_character_id_search_alliance'}}, 'station': {'title': 'get_characters_character_id_search_station', 'type': 'array', 'description': 'station array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'station integer', 'title': 'get_characters_character_id_search_station'}}, 'region': {'title': 'get_characters_character_id_search_region', 'type': 'array', 'description': 'region array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'region integer', 'title': 'get_characters_character_id_search_region'}}, 'inventorytype': {'title': 'get_characters_character_id_search_inventorytype', 'type': 'array', 'description': 'inventorytype array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'inventorytype integer', 'title': 'get_characters_character_id_search_inventorytype'}}, 'agent': {'title': 'get_characters_character_id_search_agent', 'type': 'array', 'description': 'agent array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'agent integer', 'title': 'get_characters_character_id_search_agent'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_search_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_search_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-search.search_structures.v1'}}, 'schema': {'title': 'get_characters_character_id_search_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_search_403_forbidden'}}}}}
    parameter = [{'name': 'categories', 'uniqueItems': True, 'description': 'Type of entities to search for', 'minItems': 1, 'type': 'array', 'in': 'query', 'required': True, 'items': {'type': 'string', 'enum': ['agent', 'alliance', 'character', 'constellation', 'corporation', 'faction', 'inventorytype', 'region', 'solarsystem', 'station', 'structure', 'wormhole']}}, {'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'language', 'default': 'en-us', 'enum': ['en-us', 'de', 'fr', 'ru', 'ja', 'zh'], 'type': 'string', 'in': 'query', 'description': 'Search locale'}, {'name': 'search', 'minLength': 3, 'description': 'The string to search on', 'type': 'string', 'in': 'query', 'required': True}, {'name': 'strict', 'type': 'boolean', 'in': 'query', 'default': False, 'description': 'Whether the search should be a strict match'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, categories, character_id, datasource= "tranquility",language= "en-us",search, strict= "False",**kwargs
    ):
        """
                Search for entities that match a given sub-string.
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/search/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type categories: list
        :param categories: Type of entities to search for

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type language: str
        :param language: Search locale

        :type search: str
        :param search: The string to search on

        :type strict: boolean
        :param strict: Whether the search should be a strict match

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"categories" : categories, "character_id" : character_id, "datasource" : datasource, "language" : language, "search" : search, "strict" : strict, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMailDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/{mail_id}/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Contents of a mail', 'examples': {'application/json': {'subject': 'test', 'timestamp': '2015-09-30T16:07:00Z', 'labels': [2, 32], 'body': 'blah blah blah', 'read': False, 'from': 90000001}}, 'schema': {'title': 'get_characters_character_id_mail_mail_id_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'subject': {'type': 'string', 'description': 'Mail subject', 'title': 'get_characters_character_id_mail_mail_id_subject'}, 'timestamp': {'type': 'string', 'format': 'date-time', 'description': 'When the mail was sent', 'title': 'get_characters_character_id_mail_mail_id_timestamp'}, 'labels': {'title': 'get_characters_character_id_mail_mail_id_labels', 'type': 'array', 'description': 'Labels attached to the mail', 'items': {'uniqueItems': True, 'format': 'int64', 'description': 'label integer', 'type': 'integer', 'minimum': 0, 'title': 'get_characters_character_id_mail_mail_id_label'}}, 'recipients': {'uniqueItems': True, 'description': 'Recipients of the mail', 'minItems': 1, 'maxItems': 50, 'items': {'title': 'get_characters_character_id_mail_mail_id_recipient', 'type': 'object', 'description': 'recipient object', 'required': ['recipient_type', 'recipient_id'], 'properties': {'recipient_id': {'type': 'integer', 'format': 'int32', 'description': 'recipient_id integer', 'title': 'get_characters_character_id_mail_mail_id_recipient_id'}, 'recipient_type': {'title': 'get_characters_character_id_mail_mail_id_recipient_type', 'type': 'string', 'description': 'recipient_type string', 'enum': ['alliance', 'character', 'corporation', 'mailing_list']}}}, 'type': 'array', 'title': 'get_characters_character_id_mail_mail_id_recipients'}, 'body': {'type': 'string', 'description': "Mail's body", 'title': 'get_characters_character_id_mail_mail_id_body'}, 'read': {'type': 'boolean', 'description': 'Whether the mail is flagged as read', 'title': 'get_characters_character_id_mail_mail_id_read'}, 'from': {'type': 'integer', 'format': 'int32', 'description': 'From whom the mail was sent', 'title': 'get_characters_character_id_mail_mail_id_from'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_mail_mail_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_mail_mail_id_500_internal_server_error'}}}}, '404': {'description': 'Mail not found', 'examples': {'application/json': {'error': 'Not found message'}}, 'schema': {'title': 'get_characters_character_id_mail_mail_id_not_found', 'type': 'object', 'description': 'Not found', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_characters_character_id_mail_mail_id_404_not_found'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'schema': {'title': 'get_characters_character_id_mail_mail_id_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_mail_mail_id_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'mail_id', 'format': 'int32', 'description': 'An EVE mail ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",mail_id, **kwargs
    ):
        """
                Return the contents of an EVE mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`
        
        
        ---
        
        This route is cached for up to 30 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type mail_id: int
        :param mail_id: An EVE mail ID

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "mail_id" : mail_id, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    delete_responses = {'204': {'description': 'Mail deleted'}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'delete_characters_character_id_mail_mail_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'delete_characters_character_id_mail_mail_id_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'schema': {'title': 'delete_characters_character_id_mail_mail_id_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'delete_characters_character_id_mail_mail_id_403_forbidden'}}}}}

    def delete(self, character_id, datasource="tranquility",mail_id, token="None",user_agent="None",x_user_agent="None",):
        """
                Delete a mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type mail_id: int
        :param mail_id: An EVE mail ID

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**{"character_id":character_id, "datasource":datasource, "mail_id":mail_id, "token":token, "user_agent":user_agent, "X-User-Agent":x_user_agent, })

    put_responses = {'400': {'description': 'Invalid label ID; or No parameters in body -- nothing to do', 'examples': {'application/json': {'error': 'Bad request message'}}, 'schema': {'title': 'put_characters_character_id_mail_mail_id_bad_request', 'type': 'object', 'description': 'Bad request', 'properties': {'error': {'type': 'string', 'description': 'Bad request message', 'title': 'put_characters_character_id_mail_mail_id_400_bad_request'}}}}, '204': {'description': 'Mail updated'}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'put_characters_character_id_mail_mail_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'put_characters_character_id_mail_mail_id_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'schema': {'title': 'put_characters_character_id_mail_mail_id_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'put_characters_character_id_mail_mail_id_403_forbidden'}}}}}

    def put(self, character_id, contents, datasource="tranquility",mail_id, token="None",user_agent="None",x_user_agent="None",):
        """
                Update metadata about a mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

        :type character_id: int
        :param character_id: An EVE character ID

        :type contents: None
        :param contents: Data used to update the mail

        :type datasource: str
        :param datasource: The server name you would like data from

        :type mail_id: int
        :param mail_id: An EVE mail ID

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.put_responses) \
            .put(**{"character_id": character_id, "contents": contents, "datasource": datasource, "mail_id": mail_id, "token": token, "user_agent": user_agent, "X-User-Agent": x_user_agent, })


class CharactersDetailPlanetsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/planets/{planet_id}/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Colony layout', 'examples': {'application/json': {'links': [{'link_level': 0, 'source_pin_id': 1000000017021, 'destination_pin_id': 1000000017022}], 'routes': [{'content_type_id': 2393, 'route_id': 4, 'quantity': 20, 'source_pin_id': 1000000017029, 'destination_pin_id': 1000000017030}], 'pins': [{'latitude': 1.55087844973, 'is_running': True, 'type_id': 2254, 'pin_id': 1000000017021, 'longitude': 0.717145933308}, {'latitude': 1.53360639935, 'is_running': True, 'type_id': 2256, 'pin_id': 1000000017022, 'longitude': 0.709775584394}]}}, 'schema': {'title': 'get_characters_character_id_planets_planet_id_ok', 'type': 'object', 'description': '200 ok object', 'required': ['links', 'pins', 'routes'], 'properties': {'links': {'title': 'get_characters_character_id_planets_planet_id_links', 'type': 'array', 'description': 'links array', 'items': {'title': 'get_characters_character_id_planets_planet_id_link', 'type': 'object', 'description': 'link object', 'required': ['source_pin_id', 'destination_pin_id', 'link_level'], 'properties': {'link_level': {'format': 'int32', 'description': 'link_level integer', 'type': 'integer', 'maximum': 10, 'minimum': 0, 'title': 'get_characters_character_id_planets_planet_id_link_level'}, 'source_pin_id': {'type': 'integer', 'format': 'int64', 'description': 'source_pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_source_pin_id'}, 'destination_pin_id': {'type': 'integer', 'format': 'int64', 'description': 'destination_pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_destination_pin_id'}}}}, 'routes': {'title': 'get_characters_character_id_planets_planet_id_routes', 'type': 'array', 'description': 'routes array', 'items': {'title': 'get_characters_character_id_planets_planet_id_route', 'type': 'object', 'description': 'route object', 'required': ['route_id', 'source_pin_id', 'destination_pin_id', 'content_type_id', 'quantity'], 'properties': {'source_pin_id': {'type': 'integer', 'format': 'int64', 'description': 'source_pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_source_pin_id'}, 'route_id': {'type': 'integer', 'format': 'int64', 'description': 'route_id integer', 'title': 'get_characters_character_id_planets_planet_id_route_id'}, 'quantity': {'type': 'integer', 'format': 'int64', 'description': 'quantity integer', 'title': 'get_characters_character_id_planets_planet_id_quantity'}, 'waypoints': {'title': 'get_characters_character_id_planets_planet_id_waypoints', 'type': 'array', 'description': 'waypoints array', 'items': {'title': 'get_characters_character_id_planets_planet_id_waypoint', 'type': 'object', 'description': 'waypoint object', 'required': ['pin_id', 'order'], 'properties': {'pin_id': {'type': 'integer', 'format': 'int64', 'description': 'pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_pin_id'}, 'order': {'format': 'int32', 'description': 'order integer', 'type': 'integer', 'maximum': 5, 'minimum': 1, 'title': 'get_characters_character_id_planets_planet_id_order'}}}}, 'content_type_id': {'type': 'integer', 'format': 'int32', 'description': 'content_type_id integer', 'title': 'get_characters_character_id_planets_planet_id_content_type_id'}, 'destination_pin_id': {'type': 'integer', 'format': 'int64', 'description': 'destination_pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_destination_pin_id'}}}}, 'pins': {'title': 'get_characters_character_id_planets_planet_id_pins', 'type': 'array', 'description': 'pins array', 'items': {'title': 'get_characters_character_id_planets_planet_id_pin', 'type': 'object', 'description': 'pin object', 'required': ['pin_id', 'type_id', 'latitude', 'longitude'], 'properties': {'factory_details': {'title': 'get_characters_character_id_planets_planet_id_factory_details', 'type': 'object', 'description': 'factory_details object', 'required': ['schematic_id'], 'properties': {'schematic_id': {'type': 'integer', 'format': 'int32', 'description': 'schematic_id integer', 'title': 'get_characters_character_id_planets_planet_id_schematic_id'}}}, 'latitude': {'type': 'number', 'format': 'float', 'description': 'latitude number', 'title': 'get_characters_character_id_planets_planet_id_latitude'}, 'pin_id': {'type': 'integer', 'format': 'int64', 'description': 'pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_pin_id'}, 'install_time': {'type': 'string', 'format': 'date-time', 'description': 'install_time string', 'title': 'get_characters_character_id_planets_planet_id_install_time'}, 'schematic_id': {'type': 'integer', 'format': 'int32', 'description': 'schematic_id integer', 'title': 'get_characters_character_id_planets_planet_id_schematic_id'}, 'type_id': {'type': 'integer', 'format': 'int32', 'description': 'type_id integer', 'title': 'get_characters_character_id_planets_planet_id_type_id'}, 'last_cycle_start': {'type': 'string', 'format': 'date-time', 'description': 'last_cycle_start string', 'title': 'get_characters_character_id_planets_planet_id_last_cycle_start'}, 'expiry_time': {'type': 'string', 'format': 'date-time', 'description': 'expiry_time string', 'title': 'get_characters_character_id_planets_planet_id_expiry_time'}, 'extractor_details': {'title': 'get_characters_character_id_planets_planet_id_extractor_details', 'type': 'object', 'description': 'extractor_details object', 'required': ['heads', 'product_type_id', 'cycle_time', 'head_radius', 'qty_per_cycle'], 'properties': {'qty_per_cycle': {'type': 'integer', 'format': 'int32', 'description': 'qty_per_cycle integer', 'title': 'get_characters_character_id_planets_planet_id_qty_per_cycle'}, 'cycle_time': {'type': 'integer', 'format': 'int32', 'description': 'in seconds', 'title': 'get_characters_character_id_planets_planet_id_cycle_time'}, 'head_radius': {'type': 'number', 'format': 'float', 'description': 'head_radius number', 'title': 'get_characters_character_id_planets_planet_id_head_radius'}, 'product_type_id': {'type': 'integer', 'format': 'int32', 'description': 'product_type_id integer', 'title': 'get_characters_character_id_planets_planet_id_product_type_id'}, 'heads': {'title': 'get_characters_character_id_planets_planet_id_heads', 'type': 'array', 'description': 'heads array', 'items': {'title': 'get_characters_character_id_planets_planet_id_head', 'type': 'object', 'description': 'head object', 'required': ['head_id', 'latitude', 'longitude'], 'properties': {'latitude': {'type': 'number', 'format': 'float', 'description': 'latitude number', 'title': 'get_characters_character_id_planets_planet_id_latitude'}, 'head_id': {'format': 'int32', 'description': 'head_id integer', 'type': 'integer', 'maximum': 9, 'minimum': 0, 'title': 'get_characters_character_id_planets_planet_id_head_id'}, 'longitude': {'type': 'number', 'format': 'float', 'description': 'longitude number', 'title': 'get_characters_character_id_planets_planet_id_longitude'}}}}}}, 'longitude': {'type': 'number', 'format': 'float', 'description': 'longitude number', 'title': 'get_characters_character_id_planets_planet_id_longitude'}}}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_planets_planet_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_planets_planet_id_500_internal_server_error'}}}}, '404': {'description': 'Colony not found', 'examples': {'application/json': {'error': 'Colony not found'}}, 'schema': {'title': 'get_characters_character_id_planets_planet_id_not_found', 'type': 'object', 'description': 'Colony not found', 'properties': {'error': {'type': 'string', 'description': 'error message', 'title': 'get_characters_character_id_planets_planet_id_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-planets.manage_planets.v1'}}, 'schema': {'title': 'get_characters_character_id_planets_planet_id_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_planets_planet_id_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'Character id of the target character', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'planet_id', 'format': 'int32', 'description': 'Planet id of the target planet', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",planet_id, **kwargs
    ):
        """
                Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information on this endpoint will not update until this criteria is met.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/planets/{planet_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/planets/{planet_id}/`
        
        
        ---
        
        This route is cached for up to 600 seconds

        :type character_id: int
        :param character_id: Character id of the target character

        :type datasource: str
        :param datasource: The server name you would like data from

        :type planet_id: int
        :param planet_id: Planet id of the target planet

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "planet_id" : planet_id, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailCspa(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/cspa/"

    post_responses = {'201': {'description': 'Aggregate cost of sending a mail from the source character to the target characters, in ISK hundredths', 'examples': {'application/json': {'cost': 295000}}, 'schema': {'title': 'post_characters_character_id_cspa_created', 'type': 'object', 'description': '201 created object', 'properties': {'cost': {'type': 'integer', 'format': 'int64', 'description': 'cost integer', 'title': 'post_characters_character_id_cspa_cost'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'post_characters_character_id_cspa_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_characters_character_id_cspa_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_contacts.v1'}}, 'schema': {'title': 'post_characters_character_id_cspa_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_characters_character_id_cspa_403_forbidden'}}}}}

    def post(self, character_id, characters, datasource="tranquility",token="None",user_agent="None",x_user_agent="None",):
        """
                Takes a source character ID in the url and a set of target character ID's in the body, returns a CSPA charge cost
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/cspa/`
        
        Alternate route: `/legacy/characters/{character_id}/cspa/`
        
        Alternate route: `/dev/characters/{character_id}/cspa/`

        :type character_id: int
        :param character_id: An EVE character ID

        :type characters: None
        :param characters: The target characters to calculate the charge for

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**{"character_id":character_id, "characters":characters, "datasource":datasource, "token":token, "user_agent":user_agent, "X-User-Agent":x_user_agent, })


class CharactersDetailBookmarksFolders(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/bookmarks/folders/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of bookmark folders', 'examples': {'application/json': [{'name': 'Icecream', 'owner_id': 90000001, 'folder_id': 5}]}, 'schema': {'title': 'get_characters_character_id_bookmarks_folders_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_characters_character_id_bookmarks_folders_200_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'name': {'type': 'string', 'description': 'name string', 'title': 'get_characters_character_id_bookmarks_folders_name'}, 'owner_id': {'type': 'integer', 'format': 'int32', 'description': 'owner_id integer', 'title': 'get_characters_character_id_bookmarks_folders_owner_id'}, 'folder_id': {'type': 'integer', 'format': 'int32', 'description': 'folder_id integer', 'title': 'get_characters_character_id_bookmarks_folders_folder_id'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_bookmarks_folders_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_bookmarks_folders_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-bookmarks.read_character_bookmarks.v1'}}, 'schema': {'title': 'get_characters_character_id_bookmarks_folders_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_bookmarks_folders_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                List your character's personal bookmark folders
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/bookmarks/folders/`
        
        Alternate route: `/legacy/characters/{character_id}/bookmarks/folders/`
        
        Alternate route: `/dev/characters/{character_id}/bookmarks/folders/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailShip(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/ship/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Get the current ship type, name and id', 'examples': {'application/json': {'ship_type_id': 1233, 'ship_name': 'SPACESHIPS!!!', 'ship_item_id': 1000000016991}}, 'schema': {'title': 'get_characters_character_id_ship_ok', 'type': 'object', 'description': '200 ok object', 'required': ['ship_type_id', 'ship_item_id', 'ship_name'], 'properties': {'ship_type_id': {'type': 'integer', 'format': 'int32', 'description': 'ship_type_id integer', 'title': 'get_characters_character_id_ship_ship_type_id'}, 'ship_name': {'type': 'string', 'description': 'ship_name string', 'title': 'get_characters_character_id_ship_ship_name'}, 'ship_item_id': {'type': 'integer', 'format': 'int64', 'description': "Item id's are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.", 'title': 'get_characters_character_id_ship_ship_item_id'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_characters_character_id_ship_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_ship_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-location.read_ship_type.v1'}}, 'schema': {'title': 'get_characters_character_id_ship_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_ship_403_forbidden'}}}}}
    parameter = [{'name': 'character_id', 'format': 'int32', 'description': 'An EVE character ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, character_id, datasource= "tranquility",**kwargs
    ):
        """
                Get the current ship type, name and id
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/ship/`
        
        Alternate route: `/legacy/characters/{character_id}/ship/`
        
        Alternate route: `/dev/characters/{character_id}/ship/`
        
        
        ---
        
        This route is cached for up to 5 seconds

        :type character_id: int
        :param character_id: An EVE character ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"character_id" : character_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)