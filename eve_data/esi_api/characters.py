# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class CharactersDetailBookmarksFolders(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/bookmarks/folders/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_bookmarks_folders_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_bookmarks_folders_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_bookmarks_folders_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_bookmarks_folders_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-bookmarks.read_character_bookmarks.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'type': 'object', 'properties': {'owner_id': {'format': 'int32', 'type': 'integer', 'description': 'owner_id integer', 'title': 'get_characters_character_id_bookmarks_folders_owner_id'}, 'folder_id': {'format': 'int32', 'type': 'integer', 'description': 'folder_id integer', 'title': 'get_characters_character_id_bookmarks_folders_folder_id'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_characters_character_id_bookmarks_folders_name'}}, 'description': '200 ok object', 'title': 'get_characters_character_id_bookmarks_folders_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_bookmarks_folders_ok'}, 'examples': {'application/json': [{'owner_id': 90000001, 'folder_id': 5, 'name': 'Icecream'}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of bookmark folders'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                List your character's personal bookmark folders
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/bookmarks/folders/`
        
        Alternate route: `/legacy/characters/{character_id}/bookmarks/folders/`
        
        Alternate route: `/dev/characters/{character_id}/bookmarks/folders/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_characters_character_id_ok', 'type': 'object', 'properties': {'ancestry_id': {'format': 'int32', 'type': 'integer', 'description': 'ancestry_id integer', 'title': 'get_characters_character_id_ancestry_id'}, 'corporation_id': {'format': 'int32', 'type': 'integer', 'description': "The character's corporation ID", 'title': 'get_characters_character_id_corporation_id'}, 'alliance_id': {'format': 'int32', 'type': 'integer', 'description': "The character's alliance ID", 'title': 'get_characters_character_id_alliance_id'}, 'security_status': {'maximum': 10, 'format': 'float', 'minimum': -10, 'type': 'number', 'description': 'security_status number', 'title': 'get_characters_character_id_security_status'}, 'birthday': {'format': 'date-time', 'type': 'string', 'description': 'Creation date of the character', 'title': 'get_characters_character_id_birthday'}, 'race_id': {'format': 'int32', 'type': 'integer', 'description': 'race_id integer', 'title': 'get_characters_character_id_race_id'}, 'bloodline_id': {'format': 'int32', 'type': 'integer', 'description': 'bloodline_id integer', 'title': 'get_characters_character_id_bloodline_id'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_characters_character_id_name'}, 'description': {'type': 'string', 'description': 'description string', 'title': 'get_characters_character_id_description'}, 'gender': {'enum': ['female', 'male'], 'type': 'string', 'description': 'gender string', 'title': 'get_characters_character_id_gender'}}, 'description': '200 ok object', 'required': ['corporation_id', 'birthday', 'name', 'gender', 'race_id', 'bloodline_id']}, 'examples': {'application/json': {'ancestry_id': 19, 'corporation_id': 109299958, 'birthday': '2015-03-24T11:37:00Z', 'race_id': 2, 'bloodline_id': 3, 'name': 'CCP Bartender', 'description': '', 'gender': 'male'}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Public data for the given character'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_characters_character_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_characters_character_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Character not found'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Public information about a character
        
        ---
        
        Alternate route: `/v4/characters/{character_id}/`
        
        Alternate route: `/dev/characters/{character_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailContactsLabels(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/contacts/labels/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_contacts_labels_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_contacts_labels_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_contacts_labels_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_contacts_labels_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_contacts.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_characters_character_id_contacts_labels_200_ok', 'type': 'object', 'properties': {'label_id': {'format': 'int64', 'type': 'integer', 'description': 'label_id integer', 'title': 'get_characters_character_id_contacts_labels_label_id'}, 'label_name': {'type': 'string', 'description': 'label_name string', 'title': 'get_characters_character_id_contacts_labels_label_name'}}, 'description': '200 ok object', 'required': ['label_id', 'label_name']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_contacts_labels_ok'}, 'examples': {'application/json': [{'label_id': 123, 'label_name': 'Friends'}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of contact labels'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return custom labels for contacts the character defined
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/labels/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/labels/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/labels/`
        
        
        ---
        
        This route is cached for up to 300 seconds

:type character_id: int
        :param character_id: ID for a character
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMailLabelsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/labels/{label_id}/"

    delete_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'delete_characters_character_id_mail_labels_label_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'delete_characters_character_id_mail_labels_label_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'delete_characters_character_id_mail_labels_label_id_403_forbidden'}}, 'description': 'Forbidden', 'title': 'delete_characters_character_id_mail_labels_label_id_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Label deleted'}, '422': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Unprocessable entity message', 'title': 'delete_characters_character_id_mail_labels_label_id_422_unprocessable_entity'}}, 'description': 'Unprocessable entity', 'title': 'delete_characters_character_id_mail_labels_label_id_unprocessable_entity'}, 'examples': {'application/json': {'error': 'Unprocessable entity message'}}, 'description': 'Default labels cannot be deleted'}}

    def delete(self, character_id, label_id, datasource="tranquility",**kwargs):
        """
                Delete a mail label
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/labels/{label_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/labels/{label_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/labels/{label_id}/`

:type character_id: int
        :param character_id: An EVE character ID
:type label_id: int
        :param label_id: An EVE label id
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "label_id" : label_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**kwargs_dict)


class CharactersDetailSkillqueue(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/skillqueue/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_skillqueue_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_skillqueue_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_skillqueue_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_skillqueue_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-skills.read_skillqueue.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_characters_character_id_skillqueue_200_ok', 'type': 'object', 'properties': {'start_date': {'format': 'date-time', 'type': 'string', 'description': 'start_date string', 'title': 'get_characters_character_id_skillqueue_start_date'}, 'finish_date': {'format': 'date-time', 'type': 'string', 'description': 'finish_date string', 'title': 'get_characters_character_id_skillqueue_finish_date'}, 'skill_id': {'format': 'int32', 'type': 'integer', 'description': 'skill_id integer', 'title': 'get_characters_character_id_skillqueue_skill_id'}, 'finished_level': {'maximum': 5, 'format': 'int32', 'minimum': 0, 'type': 'integer', 'description': 'finished_level integer', 'title': 'get_characters_character_id_skillqueue_finished_level'}, 'queue_position': {'format': 'int32', 'type': 'integer', 'description': 'queue_position integer', 'title': 'get_characters_character_id_skillqueue_queue_position'}, 'level_start_sp': {'format': 'int32', 'type': 'integer', 'description': "Amount of SP that was in the skill when it started training it's current level. Used to calculate % of current level complete.", 'title': 'get_characters_character_id_skillqueue_level_start_sp'}, 'level_end_sp': {'format': 'int32', 'type': 'integer', 'description': 'level_end_sp integer', 'title': 'get_characters_character_id_skillqueue_level_end_sp'}, 'training_start_sp': {'format': 'int32', 'type': 'integer', 'description': 'training_start_sp integer', 'title': 'get_characters_character_id_skillqueue_training_start_sp'}}, 'description': '200 ok object', 'required': ['skill_id', 'finished_level', 'queue_position']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_skillqueue_ok'}, 'examples': {'application/json': [{'queue_position': 0, 'finish_date': '2016-06-29T10:47:00Z', 'start_date': '2016-06-29T10:46:00Z', 'skill_id': 1, 'finished_level': 3}, {'queue_position': 1, 'finish_date': '2016-07-15T10:47:00Z', 'start_date': '2016-06-29T10:47:00Z', 'skill_id': 1, 'finished_level': 4}, {'queue_position': 2, 'finish_date': '2016-08-30T10:47:00Z', 'start_date': '2016-07-15T10:47:00Z', 'skill_id': 2, 'finished_level': 2}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'The current skill queue, sorted ascending by finishing time'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                List the configured skill queue for the given character
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/skillqueue/`
        
        Alternate route: `/legacy/characters/{character_id}/skillqueue/`
        
        Alternate route: `/dev/characters/{character_id}/skillqueue/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: Character id of the target character
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailFittings(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/fittings/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_fittings_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_fittings_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_fittings_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_fittings_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-fittings.read_fittings.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_characters_character_id_fittings_200_ok', 'type': 'object', 'properties': {'ship_type_id': {'format': 'int32', 'type': 'integer', 'description': 'ship_type_id integer', 'title': 'get_characters_character_id_fittings_ship_type_id'}, 'fitting_id': {'format': 'int32', 'type': 'integer', 'description': 'fitting_id integer', 'title': 'get_characters_character_id_fittings_fitting_id'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_characters_character_id_fittings_name'}, 'description': {'type': 'string', 'description': 'description string', 'title': 'get_characters_character_id_fittings_description'}, 'items': {'items': {'title': 'get_characters_character_id_fittings_item', 'type': 'object', 'properties': {'flag': {'format': 'int32', 'type': 'integer', 'description': 'flag integer', 'title': 'get_characters_character_id_fittings_flag'}, 'quantity': {'format': 'int32', 'type': 'integer', 'description': 'quantity integer', 'title': 'get_characters_character_id_fittings_quantity'}, 'type_id': {'format': 'int32', 'type': 'integer', 'description': 'type_id integer', 'title': 'get_characters_character_id_fittings_type_id'}}, 'description': 'item object', 'required': ['type_id', 'flag', 'quantity']}, 'type': 'array', 'description': 'items array', 'title': 'get_characters_character_id_fittings_items'}}, 'description': '200 ok object', 'required': ['fitting_id', 'name', 'description', 'ship_type_id', 'items']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_fittings_ok'}, 'examples': {'application/json': [{'ship_type_id': 123, 'fitting_id': 1, 'name': 'Best Vindicator', 'description': 'Awesome Vindi fitting', 'items': [{'flag': 12, 'quantity': 1, 'type_id': 1234}]}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of fittings'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return fittings of a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/fittings/`
        
        Alternate route: `/legacy/characters/{character_id}/fittings/`
        
        Alternate route: `/dev/characters/{character_id}/fittings/`
        
        
        ---
        
        This route is cached for up to 300 seconds

:type character_id: int
        :param character_id: ID for a character
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_characters_character_id_fittings_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_characters_character_id_fittings_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_characters_character_id_fittings_403_forbidden'}}, 'description': 'Forbidden', 'title': 'post_characters_character_id_fittings_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-fittings.write_fittings.v1'}}, 'description': 'Forbidden'}, '201': {'schema': {'title': 'post_characters_character_id_fittings_created', 'type': 'object', 'properties': {'fitting_id': {'format': 'int32', 'type': 'integer', 'description': 'fitting_id integer', 'title': 'post_characters_character_id_fittings_fitting_id'}}, 'description': '201 created object', 'required': ['fitting_id']}, 'examples': {'application/json': {'fitting_id': 2}}, 'description': 'A list of fittings'}}

    def post(self, character_id, datasource="tranquility",**kwargs):
        """
                Save a new fitting for a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/fittings/`
        
        Alternate route: `/legacy/characters/{character_id}/fittings/`
        
        Alternate route: `/dev/characters/{character_id}/fittings/`

:type character_id: int
        :param character_id: ID for a character
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: fitting, token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class CharactersDetailSearch(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/search/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_search_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_search_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_search_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_search_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-search.search_structures.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'type': 'object', 'properties': {'faction': {'items': {'format': 'int32', 'type': 'integer', 'description': 'faction integer', 'title': 'get_characters_character_id_search_faction'}, 'type': 'array', 'description': 'faction array', 'title': 'get_characters_character_id_search_faction'}, 'constellation': {'items': {'format': 'int32', 'type': 'integer', 'description': 'constellation integer', 'title': 'get_characters_character_id_search_constellation'}, 'type': 'array', 'description': 'constellation array', 'title': 'get_characters_character_id_search_constellation'}, 'inventorytype': {'items': {'format': 'int32', 'type': 'integer', 'description': 'inventorytype integer', 'title': 'get_characters_character_id_search_inventorytype'}, 'type': 'array', 'description': 'inventorytype array', 'title': 'get_characters_character_id_search_inventorytype'}, 'wormhole': {'items': {'format': 'int32', 'type': 'integer', 'description': 'wormhole integer', 'title': 'get_characters_character_id_search_wormhole'}, 'type': 'array', 'description': 'wormhole array', 'title': 'get_characters_character_id_search_wormhole'}, 'corporation': {'items': {'format': 'int32', 'type': 'integer', 'description': 'corporation integer', 'title': 'get_characters_character_id_search_corporation'}, 'type': 'array', 'description': 'corporation array', 'title': 'get_characters_character_id_search_corporation'}, 'region': {'items': {'format': 'int32', 'type': 'integer', 'description': 'region integer', 'title': 'get_characters_character_id_search_region'}, 'type': 'array', 'description': 'region array', 'title': 'get_characters_character_id_search_region'}, 'alliance': {'items': {'format': 'int32', 'type': 'integer', 'description': 'alliance integer', 'title': 'get_characters_character_id_search_alliance'}, 'type': 'array', 'description': 'alliance array', 'title': 'get_characters_character_id_search_alliance'}, 'character': {'items': {'format': 'int32', 'type': 'integer', 'description': 'character integer', 'title': 'get_characters_character_id_search_character'}, 'type': 'array', 'description': 'character array', 'title': 'get_characters_character_id_search_character'}, 'structure': {'items': {'format': 'int64', 'type': 'integer', 'description': 'structure integer', 'title': 'get_characters_character_id_search_structure'}, 'type': 'array', 'description': 'structure array', 'title': 'get_characters_character_id_search_structure'}, 'agent': {'items': {'format': 'int32', 'type': 'integer', 'description': 'agent integer', 'title': 'get_characters_character_id_search_agent'}, 'type': 'array', 'description': 'agent array', 'title': 'get_characters_character_id_search_agent'}, 'solarsystem': {'items': {'format': 'int32', 'type': 'integer', 'description': 'solarsystem integer', 'title': 'get_characters_character_id_search_solarsystem'}, 'type': 'array', 'description': 'solarsystem array', 'title': 'get_characters_character_id_search_solarsystem'}, 'station': {'items': {'format': 'int32', 'type': 'integer', 'description': 'station integer', 'title': 'get_characters_character_id_search_station'}, 'type': 'array', 'description': 'station array', 'title': 'get_characters_character_id_search_station'}}, 'description': '200 ok object', 'title': 'get_characters_character_id_search_ok'}, 'examples': {'application/json': {'solarsystem': [30002510], 'station': [60004588, 60004594, 60005725, 60009106, 60012721, 60012724, 60012727]}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of search results'}}

    def get(self, categories, character_id, search, datasource="tranquility",language="en-us",strict="False",**kwargs):
        """
                Search for entities that match a given sub-string.
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/search/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type categories: list
        :param categories: Type of entities to search for
:type character_id: int
        :param character_id: An EVE character ID
:type search: str
        :param search: The string to search on
:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Search locale
:type strict: boolean
        :param strict: Whether the search should be a strict match
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"categories" : categories, "character_id" : character_id, "search" : search, "datasource" : datasource, "language" : language, "strict" : strict, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersNames(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/names/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_names_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_names_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_characters_names_200_ok', 'type': 'object', 'properties': {'character_id': {'format': 'int64', 'type': 'integer', 'description': 'character_id integer', 'title': 'get_characters_names_character_id'}, 'character_name': {'type': 'string', 'description': 'character_name string', 'title': 'get_characters_names_character_name'}}, 'description': '200 ok object', 'required': ['character_id', 'character_name']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_names_ok'}, 'examples': {'application/json': [{'character_id': 95465499, 'character_name': 'CCP Bartender'}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of id/name associations'}}

    def get(self, character_ids, datasource="tranquility",**kwargs):
        """
                Resolve a set of character IDs to character names
        
        ---
        
        Alternate route: `/v1/characters/names/`
        
        Alternate route: `/legacy/characters/names/`
        
        Alternate route: `/dev/characters/names/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_ids: list
        :param character_ids: A comma separated list of character IDs
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_ids" : character_ids, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailPlanets(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/planets/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_planets_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_planets_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_planets_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_planets_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-planets.manage_planets.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_characters_character_id_planets_200_ok', 'type': 'object', 'properties': {'planet_type': {'enum': ['temperate', 'barren', 'oceanic', 'ice', 'gas', 'lava', 'storm', 'plasma'], 'type': 'string', 'description': 'planet_type string', 'title': 'get_characters_character_id_planets_planet_type'}, 'owner_id': {'format': 'int32', 'type': 'integer', 'description': 'owner_id integer', 'title': 'get_characters_character_id_planets_owner_id'}, 'upgrade_level': {'maximum': 5, 'format': 'int32', 'minimum': 0, 'type': 'integer', 'description': 'upgrade_level integer', 'title': 'get_characters_character_id_planets_upgrade_level'}, 'num_pins': {'format': 'int32', 'minimum': 1, 'type': 'integer', 'description': 'num_pins integer', 'title': 'get_characters_character_id_planets_num_pins'}, 'solar_system_id': {'format': 'int32', 'type': 'integer', 'description': 'solar_system_id integer', 'title': 'get_characters_character_id_planets_solar_system_id'}, 'last_update': {'format': 'date-time', 'type': 'string', 'description': 'last_update string', 'title': 'get_characters_character_id_planets_last_update'}, 'planet_id': {'format': 'int32', 'type': 'integer', 'description': 'planet_id integer', 'title': 'get_characters_character_id_planets_planet_id'}}, 'description': '200 ok object', 'required': ['solar_system_id', 'planet_id', 'planet_type', 'owner_id', 'last_update', 'upgrade_level', 'num_pins']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_planets_ok'}, 'examples': {'application/json': [{'planet_type': 'plasma', 'owner_id': 90000001, 'upgrade_level': 0, 'num_pins': 1, 'solar_system_id': 30000379, 'last_update': '2016-11-28T16:42:51Z', 'planet_id': 40023691}, {'planet_type': 'barren', 'owner_id': 90000001, 'upgrade_level': 0, 'num_pins': 1, 'solar_system_id': 30000379, 'last_update': '2016-11-28T16:41:54Z', 'planet_id': 40023697}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of colonies'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Returns a list of all planetary colonies owned by a character.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/planets/`
        
        Alternate route: `/legacy/characters/{character_id}/planets/`
        
        Alternate route: `/dev/characters/{character_id}/planets/`
        
        
        ---
        
        This route is cached for up to 600 seconds

:type character_id: int
        :param character_id: Character id of the target character
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailBookmarks(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/bookmarks/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_bookmarks_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_bookmarks_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_bookmarks_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_bookmarks_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-bookmarks.read_character_bookmarks.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_characters_character_id_bookmarks_200_ok', 'type': 'object', 'properties': {'create_date': {'format': 'date-time', 'type': 'string', 'description': 'create_date string', 'title': 'get_characters_character_id_bookmarks_create_date'}, 'memo': {'type': 'string', 'description': 'memo string', 'title': 'get_characters_character_id_bookmarks_memo'}, 'owner_id': {'format': 'int32', 'type': 'integer', 'description': 'owner_id integer', 'title': 'get_characters_character_id_bookmarks_owner_id'}, 'creator_id': {'format': 'int32', 'type': 'integer', 'description': 'creator_id integer', 'title': 'get_characters_character_id_bookmarks_creator_id'}, 'folder_id': {'format': 'int32', 'type': 'integer', 'description': 'folder_id integer', 'title': 'get_characters_character_id_bookmarks_folder_id'}, 'target': {'title': 'get_characters_character_id_bookmarks_target', 'type': 'object', 'properties': {'item': {'title': 'get_characters_character_id_bookmarks_item', 'type': 'object', 'properties': {'item_id': {'format': 'int64', 'type': 'integer', 'description': 'item_id integer', 'title': 'get_characters_character_id_bookmarks_item_id'}, 'type_id': {'format': 'int32', 'type': 'integer', 'description': 'type_id integer', 'title': 'get_characters_character_id_bookmarks_type_id'}}, 'description': 'item object', 'required': ['item_id', 'type_id']}, 'coordinates': {'title': 'get_characters_character_id_bookmarks_coordinates', 'type': 'object', 'properties': {'x': {'format': 'double', 'type': 'number', 'description': 'x number', 'title': 'get_characters_character_id_bookmarks_x'}, 'y': {'format': 'double', 'type': 'number', 'description': 'y number', 'title': 'get_characters_character_id_bookmarks_y'}, 'z': {'format': 'double', 'type': 'number', 'description': 'z number', 'title': 'get_characters_character_id_bookmarks_z'}}, 'description': 'coordinates object', 'required': ['x', 'y', 'z']}, 'location_id': {'format': 'int64', 'type': 'integer', 'description': 'location_id integer', 'title': 'get_characters_character_id_bookmarks_location_id'}}, 'description': 'target object', 'required': ['location_id']}, 'note': {'type': 'string', 'description': 'note string', 'title': 'get_characters_character_id_bookmarks_note'}, 'bookmark_id': {'format': 'int64', 'type': 'integer', 'description': 'bookmark_id integer', 'title': 'get_characters_character_id_bookmarks_bookmark_id'}}, 'description': '200 ok object', 'required': ['bookmark_id', 'creator_id', 'owner_id', 'create_date', 'memo', 'note', 'target']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_bookmarks_ok'}, 'examples': {'application/json': [{'create_date': '2016-08-09T11:57:47Z', 'memo': 'aoeu ( Citadel )', 'owner_id': 90000001, 'creator_id': 90000001, 'folder_id': 5, 'target': {'item': {'item_id': 1000000012668, 'type_id': 35832}, 'location_id': 30000005}, 'note': '', 'bookmark_id': 32}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of bookmarks'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                List your character's personal bookmarks
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/bookmarks/`
        
        Alternate route: `/legacy/characters/{character_id}/bookmarks/`
        
        Alternate route: `/dev/characters/{character_id}/bookmarks/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailSkills(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/skills/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_skills_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_skills_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_skills_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_skills_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-skills.read_skills.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'type': 'object', 'properties': {'skills': {'items': {'type': 'object', 'properties': {'current_skill_level': {'format': 'int32', 'type': 'integer', 'description': 'current_skill_level integer', 'title': 'get_characters_character_id_skills_current_skill_level'}, 'skillpoints_in_skill': {'format': 'int64', 'type': 'integer', 'description': 'skillpoints_in_skill integer', 'title': 'get_characters_character_id_skills_skillpoints_in_skill'}, 'skill_id': {'format': 'int32', 'type': 'integer', 'description': 'skill_id integer', 'title': 'get_characters_character_id_skills_skill_id'}}, 'description': 'skill object', 'title': 'get_characters_character_id_skills_skill'}, 'type': 'array', 'description': 'skills array', 'title': 'get_characters_character_id_skills_skills'}, 'total_sp': {'format': 'int64', 'type': 'integer', 'description': 'total_sp integer', 'title': 'get_characters_character_id_skills_total_sp'}}, 'description': '200 ok object', 'title': 'get_characters_character_id_skills_ok'}, 'examples': {'application/json': {'skills': [{'current_skill_level': 1, 'skillpoints_in_skill': 10000, 'skill_id': 1}, {'current_skill_level': 1, 'skillpoints_in_skill': 10000, 'skill_id': 2}], 'total_sp': 20000}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Known skills for the character'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                List all trained skills for the given character
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/skills/`
        
        Alternate route: `/dev/characters/{character_id}/skills/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailWallets(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/wallets/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_wallets_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_wallets_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_wallets_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_wallets_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-wallet.read_character_wallet.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'type': 'object', 'properties': {'wallet_id': {'format': 'int32', 'type': 'integer', 'description': 'wallet_id integer', 'title': 'get_characters_character_id_wallets_wallet_id'}, 'balance': {'format': 'int64', 'type': 'integer', 'description': "Wallet's balance in ISK hundredths.", 'title': 'get_characters_character_id_wallets_balance'}}, 'description': '200 ok object', 'title': 'get_characters_character_id_wallets_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_wallets_ok'}, 'examples': {'application/json': [{'wallet_id': 1000, 'balance': 295000}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Wallet data for selected user'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                List your wallets and their balances. Characters typically have only one wallet, with wallet_id 1000 being the master wallet.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/wallets/`
        
        Alternate route: `/legacy/characters/{character_id}/wallets/`
        
        Alternate route: `/dev/characters/{character_id}/wallets/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailFittingsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/fittings/{fitting_id}/"

    delete_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'delete_characters_character_id_fittings_fitting_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'delete_characters_character_id_fittings_fitting_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'delete_characters_character_id_fittings_fitting_id_403_forbidden'}}, 'description': 'Forbidden', 'title': 'delete_characters_character_id_fittings_fitting_id_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-fittings.write_fittings.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Fitting deleted'}}

    def delete(self, character_id, fitting_id, datasource="tranquility",**kwargs):
        """
                Delete a fitting from a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/fittings/{fitting_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/fittings/{fitting_id}/`
        
        Alternate route: `/dev/characters/{character_id}/fittings/{fitting_id}/`

:type character_id: int
        :param character_id: ID for a character
:type fitting_id: int
        :param fitting_id: ID for a fitting of this character
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "fitting_id" : fitting_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**kwargs_dict)


class CharactersDetailCspa(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/cspa/"

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_characters_character_id_cspa_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_characters_character_id_cspa_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_characters_character_id_cspa_403_forbidden'}}, 'description': 'Forbidden', 'title': 'post_characters_character_id_cspa_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_contacts.v1'}}, 'description': 'Forbidden'}, '201': {'schema': {'type': 'object', 'properties': {'cost': {'format': 'int64', 'type': 'integer', 'description': 'cost integer', 'title': 'post_characters_character_id_cspa_cost'}}, 'description': '201 created object', 'title': 'post_characters_character_id_cspa_created'}, 'examples': {'application/json': {'cost': 295000}}, 'description': 'Aggregate cost of sending a mail from the source character to the target characters, in ISK hundredths'}}

    def post(self, character_id, characters, datasource="tranquility",**kwargs):
        """
                Takes a source character ID in the url and a set of target character ID's in the body, returns a CSPA charge cost
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/cspa/`
        
        Alternate route: `/legacy/characters/{character_id}/cspa/`
        
        Alternate route: `/dev/characters/{character_id}/cspa/`

:type character_id: int
        :param character_id: An EVE character ID
:type characters: None
        :param characters: The target characters to calculate the charge for
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "characters" : characters, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class CharactersDetailPlanetsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/planets/{planet_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_planets_planet_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_planets_planet_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_planets_planet_id_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_planets_planet_id_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-planets.manage_planets.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'title': 'get_characters_character_id_planets_planet_id_ok', 'type': 'object', 'properties': {'links': {'items': {'title': 'get_characters_character_id_planets_planet_id_link', 'type': 'object', 'properties': {'destination_pin_id': {'format': 'int64', 'type': 'integer', 'description': 'destination_pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_destination_pin_id'}, 'link_level': {'maximum': 10, 'format': 'int32', 'minimum': 0, 'type': 'integer', 'description': 'link_level integer', 'title': 'get_characters_character_id_planets_planet_id_link_level'}, 'source_pin_id': {'format': 'int64', 'type': 'integer', 'description': 'source_pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_source_pin_id'}}, 'description': 'link object', 'required': ['source_pin_id', 'destination_pin_id', 'link_level']}, 'type': 'array', 'description': 'links array', 'title': 'get_characters_character_id_planets_planet_id_links'}, 'pins': {'items': {'title': 'get_characters_character_id_planets_planet_id_pin', 'type': 'object', 'properties': {'factory_details': {'title': 'get_characters_character_id_planets_planet_id_factory_details', 'type': 'object', 'properties': {'schematic_id': {'format': 'int32', 'type': 'integer', 'description': 'schematic_id integer', 'title': 'get_characters_character_id_planets_planet_id_schematic_id'}}, 'description': 'factory_details object', 'required': ['schematic_id']}, 'expiry_time': {'format': 'date-time', 'type': 'string', 'description': 'expiry_time string', 'title': 'get_characters_character_id_planets_planet_id_expiry_time'}, 'schematic_id': {'format': 'int32', 'type': 'integer', 'description': 'schematic_id integer', 'title': 'get_characters_character_id_planets_planet_id_schematic_id'}, 'latitude': {'format': 'float', 'type': 'number', 'description': 'latitude number', 'title': 'get_characters_character_id_planets_planet_id_latitude'}, 'pin_id': {'format': 'int64', 'type': 'integer', 'description': 'pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_pin_id'}, 'longitude': {'format': 'float', 'type': 'number', 'description': 'longitude number', 'title': 'get_characters_character_id_planets_planet_id_longitude'}, 'install_time': {'format': 'date-time', 'type': 'string', 'description': 'install_time string', 'title': 'get_characters_character_id_planets_planet_id_install_time'}, 'last_cycle_start': {'format': 'date-time', 'type': 'string', 'description': 'last_cycle_start string', 'title': 'get_characters_character_id_planets_planet_id_last_cycle_start'}, 'type_id': {'format': 'int32', 'type': 'integer', 'description': 'type_id integer', 'title': 'get_characters_character_id_planets_planet_id_type_id'}, 'extractor_details': {'title': 'get_characters_character_id_planets_planet_id_extractor_details', 'type': 'object', 'properties': {'product_type_id': {'format': 'int32', 'type': 'integer', 'description': 'product_type_id integer', 'title': 'get_characters_character_id_planets_planet_id_product_type_id'}, 'cycle_time': {'format': 'int32', 'type': 'integer', 'description': 'in seconds', 'title': 'get_characters_character_id_planets_planet_id_cycle_time'}, 'qty_per_cycle': {'format': 'int32', 'type': 'integer', 'description': 'qty_per_cycle integer', 'title': 'get_characters_character_id_planets_planet_id_qty_per_cycle'}, 'head_radius': {'format': 'float', 'type': 'number', 'description': 'head_radius number', 'title': 'get_characters_character_id_planets_planet_id_head_radius'}, 'heads': {'items': {'title': 'get_characters_character_id_planets_planet_id_head', 'type': 'object', 'properties': {'head_id': {'maximum': 9, 'format': 'int32', 'minimum': 0, 'type': 'integer', 'description': 'head_id integer', 'title': 'get_characters_character_id_planets_planet_id_head_id'}, 'longitude': {'format': 'float', 'type': 'number', 'description': 'longitude number', 'title': 'get_characters_character_id_planets_planet_id_longitude'}, 'latitude': {'format': 'float', 'type': 'number', 'description': 'latitude number', 'title': 'get_characters_character_id_planets_planet_id_latitude'}}, 'description': 'head object', 'required': ['head_id', 'latitude', 'longitude']}, 'type': 'array', 'description': 'heads array', 'title': 'get_characters_character_id_planets_planet_id_heads'}}, 'description': 'extractor_details object', 'required': ['heads']}}, 'description': 'pin object', 'required': ['pin_id', 'type_id', 'latitude', 'longitude']}, 'type': 'array', 'description': 'pins array', 'title': 'get_characters_character_id_planets_planet_id_pins'}, 'routes': {'items': {'title': 'get_characters_character_id_planets_planet_id_route', 'type': 'object', 'properties': {'content_type_id': {'format': 'int32', 'type': 'integer', 'description': 'content_type_id integer', 'title': 'get_characters_character_id_planets_planet_id_content_type_id'}, 'source_pin_id': {'format': 'int64', 'type': 'integer', 'description': 'source_pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_source_pin_id'}, 'waypoints': {'items': {'title': 'get_characters_character_id_planets_planet_id_waypoint', 'type': 'object', 'properties': {'order': {'maximum': 5, 'format': 'int32', 'minimum': 1, 'type': 'integer', 'description': 'order integer', 'title': 'get_characters_character_id_planets_planet_id_order'}, 'pin_id': {'format': 'int64', 'type': 'integer', 'description': 'pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_pin_id'}}, 'description': 'waypoint object', 'required': ['pin_id', 'order']}, 'type': 'array', 'description': 'waypoints array', 'title': 'get_characters_character_id_planets_planet_id_waypoints'}, 'destination_pin_id': {'format': 'int64', 'type': 'integer', 'description': 'destination_pin_id integer', 'title': 'get_characters_character_id_planets_planet_id_destination_pin_id'}, 'route_id': {'format': 'int64', 'type': 'integer', 'description': 'route_id integer', 'title': 'get_characters_character_id_planets_planet_id_route_id'}, 'quantity': {'format': 'float', 'type': 'number', 'description': 'quantity number', 'title': 'get_characters_character_id_planets_planet_id_quantity'}}, 'description': 'route object', 'required': ['route_id', 'source_pin_id', 'destination_pin_id', 'content_type_id', 'quantity']}, 'type': 'array', 'description': 'routes array', 'title': 'get_characters_character_id_planets_planet_id_routes'}}, 'description': '200 ok object', 'required': ['links', 'pins', 'routes']}, 'examples': {'application/json': {'links': [{'destination_pin_id': 1000000017022, 'link_level': 0, 'source_pin_id': 1000000017021}], 'pins': [{'type_id': 2254, 'longitude': 0.717145933308, 'latitude': 1.55087844973, 'is_running': True, 'pin_id': 1000000017021}, {'type_id': 2256, 'longitude': 0.709775584394, 'latitude': 1.53360639935, 'is_running': True, 'pin_id': 1000000017022}], 'routes': [{'destination_pin_id': 1000000017030, 'content_type_id': 2393, 'route_id': 4, 'quantity': 20, 'source_pin_id': 1000000017029}]}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Colony layout'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'error message', 'title': 'get_characters_character_id_planets_planet_id_error'}}, 'description': 'Colony not found', 'title': 'get_characters_character_id_planets_planet_id_not_found'}, 'examples': {'application/json': {'error': 'Colony not found'}}, 'description': 'Colony not found'}}

    def get(self, character_id, planet_id, datasource="tranquility",**kwargs):
        """
                Returns full details on the layout of a single planetary colony, including links, pins and routes. Note: Planetary information is only recalculated when the colony is viewed through the client. Information on this endpoint will not update until this criteria is met.
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/planets/{planet_id}/`
        
        Alternate route: `/dev/characters/{character_id}/planets/{planet_id}/`
        
        
        ---
        
        This route is cached for up to 600 seconds

:type character_id: int
        :param character_id: Character id of the target character
:type planet_id: int
        :param planet_id: Planet id of the target planet
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "planet_id" : planet_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMailLists(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/lists/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_mail_lists_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_mail_lists_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_mail_lists_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_mail_lists_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_characters_character_id_mail_lists_200_ok', 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'name string', 'title': 'get_characters_character_id_mail_lists_name'}, 'mailing_list_id': {'format': 'int32', 'type': 'integer', 'description': 'Mailing list ID', 'title': 'get_characters_character_id_mail_lists_mailing_list_id'}}, 'description': '200 ok object', 'required': ['mailing_list_id', 'name']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_mail_lists_ok'}, 'examples': {'application/json': [{'name': 'test_mailing_list', 'mailing_list_id': 1}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Mailing lists'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return all mailing lists that the character is subscribed to
        
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/lists/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/lists/`
        
        Alternate route: `/dev/characters/{character_id}/mail/lists/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailLoyaltyPoints(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/loyalty/points/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_loyalty_points_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_loyalty_points_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_loyalty_points_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_loyalty_points_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_loyalty.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_characters_character_id_loyalty_points_200_ok', 'type': 'object', 'properties': {'loyalty_points': {'format': 'int32', 'type': 'integer', 'description': 'loyalty_points integer', 'title': 'get_characters_character_id_loyalty_points_loyalty_points'}, 'corporation_id': {'format': 'int32', 'type': 'integer', 'description': 'corporation_id integer', 'title': 'get_characters_character_id_loyalty_points_corporation_id'}}, 'description': '200 ok object', 'required': ['corporation_id', 'loyalty_points']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_loyalty_points_ok'}, 'examples': {'application/json': [{'loyalty_points': 100, 'corporation_id': 123}]}, 'description': 'A list of loyalty points'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return a list of loyalty points for all corporations the character has worked for
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/loyalty/points/`
        
        Alternate route: `/legacy/characters/{character_id}/loyalty/points/`
        
        Alternate route: `/dev/characters/{character_id}/loyalty/points/`

:type character_id: int
        :param character_id: ID for a character
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMailDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/{mail_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_mail_mail_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_mail_mail_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_mail_mail_id_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_mail_mail_id_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'type': 'object', 'properties': {'subject': {'type': 'string', 'description': 'Mail subject', 'title': 'get_characters_character_id_mail_mail_id_subject'}, 'body': {'type': 'string', 'description': "Mail's body", 'title': 'get_characters_character_id_mail_mail_id_body'}, 'read': {'type': 'boolean', 'description': 'Whether the mail is flagged as read', 'title': 'get_characters_character_id_mail_mail_id_read'}, 'from': {'format': 'int32', 'type': 'integer', 'description': 'From whom the mail was sent', 'title': 'get_characters_character_id_mail_mail_id_from'}, 'timestamp': {'format': 'date-time', 'type': 'string', 'description': 'When the mail was sent', 'title': 'get_characters_character_id_mail_mail_id_timestamp'}, 'labels': {'items': {'format': 'int64', 'minimum': 0, 'type': 'integer', 'uniqueItems': True, 'description': 'label integer', 'title': 'get_characters_character_id_mail_mail_id_label'}, 'type': 'array', 'description': 'Labels attached to the mail', 'title': 'get_characters_character_id_mail_mail_id_labels'}, 'recipients': {'minItems': 1, 'maxItems': 50, 'items': {'title': 'get_characters_character_id_mail_mail_id_recipient', 'type': 'object', 'properties': {'recipient_type': {'enum': ['alliance', 'character', 'corporation', 'mailing_list'], 'type': 'string', 'description': 'recipient_type string', 'title': 'get_characters_character_id_mail_mail_id_recipient_type'}, 'recipient_id': {'format': 'int32', 'type': 'integer', 'description': 'recipient_id integer', 'title': 'get_characters_character_id_mail_mail_id_recipient_id'}}, 'description': 'recipient object', 'required': ['recipient_type', 'recipient_id']}, 'uniqueItems': True, 'type': 'array', 'description': 'Recipients of the mail', 'title': 'get_characters_character_id_mail_mail_id_recipients'}}, 'description': '200 ok object', 'title': 'get_characters_character_id_mail_mail_id_ok'}, 'examples': {'application/json': {'subject': 'test', 'body': 'blah blah blah', 'read': False, 'from': 90000001, 'timestamp': '2015-09-30T16:07:00Z', 'labels': [2, 32]}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Contents of a mail'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_characters_character_id_mail_mail_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_characters_character_id_mail_mail_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Mail not found'}}

    def get(self, character_id, mail_id, datasource="tranquility",**kwargs):
        """
                Return the contents of an EVE mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`
        
        
        ---
        
        This route is cached for up to 30 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type mail_id: int
        :param mail_id: An EVE mail ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "mail_id" : mail_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    delete_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'delete_characters_character_id_mail_mail_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'delete_characters_character_id_mail_mail_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'delete_characters_character_id_mail_mail_id_403_forbidden'}}, 'description': 'Forbidden', 'title': 'delete_characters_character_id_mail_mail_id_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Mail deleted'}}

    def delete(self, character_id, mail_id, datasource="tranquility",**kwargs):
        """
                Delete a mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

:type character_id: int
        :param character_id: An EVE character ID
:type mail_id: int
        :param mail_id: An EVE mail ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "mail_id" : mail_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**kwargs_dict)

    put_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'put_characters_character_id_mail_mail_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'put_characters_character_id_mail_mail_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '400': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Bad request message', 'title': 'put_characters_character_id_mail_mail_id_400_bad_request'}}, 'description': 'Bad request', 'title': 'put_characters_character_id_mail_mail_id_bad_request'}, 'examples': {'application/json': {'error': 'Bad request message'}}, 'description': 'Invalid label ID; or No parameters in body -- nothing to do'}, '204': {'description': 'Mail updated'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'put_characters_character_id_mail_mail_id_403_forbidden'}}, 'description': 'Forbidden', 'title': 'put_characters_character_id_mail_mail_id_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'description': 'Forbidden'}}

    def put(self, character_id, contents, mail_id, datasource="tranquility",**kwargs):
        """
                Update metadata about a mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/{mail_id}/`
        
        Alternate route: `/dev/characters/{character_id}/mail/{mail_id}/`

:type character_id: int
        :param character_id: An EVE character ID
:type contents: None
        :param contents: Data used to update the mail
:type mail_id: int
        :param mail_id: An EVE mail ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "contents" : contents, "mail_id" : mail_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.put_responses) \
            .put(**kwargs_dict)


class CharactersDetailAssets(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/assets/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_assets_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_assets_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_assets_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_assets_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-assets.read_assets.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_characters_character_id_assets_200_ok', 'type': 'object', 'properties': {'location_id': {'format': 'int64', 'type': 'integer', 'description': 'location_id integer', 'title': 'get_characters_character_id_assets_location_id'}, 'location_type': {'enum': ['station', 'solar_system', 'other'], 'type': 'string', 'description': 'location_type string', 'title': 'get_characters_character_id_assets_location_type'}, 'is_singleton': {'type': 'boolean', 'description': 'is_singleton boolean', 'title': 'get_characters_character_id_assets_is_singleton'}, 'quantity': {'format': 'int32', 'type': 'integer', 'description': 'quantity integer', 'title': 'get_characters_character_id_assets_quantity'}, 'location_flag': {'enum': ['AutoFit', 'Cargo', 'CorpseBay', 'DroneBay', 'FleetHangar', 'Deliveries', 'HiddenModifiers', 'Hangar', 'HangarAll', 'LoSlot0', 'LoSlot1', 'LoSlot2', 'LoSlot3', 'LoSlot4', 'LoSlot5', 'LoSlot6', 'LoSlot7', 'MedSlot0', 'MedSlot1', 'MedSlot2', 'MedSlot3', 'MedSlot4', 'MedSlot5', 'MedSlot6', 'MedSlot7', 'HiSlot0', 'HiSlot1', 'HiSlot2', 'HiSlot3', 'HiSlot4', 'HiSlot5', 'HiSlot6', 'HiSlot7', 'AssetSafety', 'Locked', 'Unlocked', 'Implant', 'QuafeBay', 'RigSlot0', 'RigSlot1', 'RigSlot2', 'RigSlot3', 'RigSlot4', 'RigSlot5', 'RigSlot6', 'RigSlot7', 'ShipHangar', 'SpecializedFuelBay', 'SpecializedOreHold', 'SpecializedGasHold', 'SpecializedMineralHold', 'SpecializedSalvageHold', 'SpecializedShipHold', 'SpecializedSmallShipHold', 'SpecializedMediumShipHold', 'SpecializedLargeShipHold', 'SpecializedIndustrialShipHold', 'SpecializedAmmoHold', 'SpecializedCommandCenterHold', 'SpecializedPlanetaryCommoditiesHold', 'SpecializedMaterialBay', 'SubSystemSlot0', 'SubSystemSlot1', 'SubSystemSlot2', 'SubSystemSlot3', 'SubSystemSlot4', 'SubSystemSlot5', 'SubSystemSlot6', 'SubSystemSlot7', 'FighterBay', 'FighterTube0', 'FighterTube1', 'FighterTube2', 'FighterTube3', 'FighterTube4', 'Module'], 'type': 'string', 'description': 'location_flag string', 'title': 'get_characters_character_id_assets_location_flag'}, 'item_id': {'format': 'int64', 'type': 'integer', 'description': 'item_id integer', 'title': 'get_characters_character_id_assets_item_id'}, 'type_id': {'format': 'int32', 'type': 'integer', 'description': 'type_id integer', 'title': 'get_characters_character_id_assets_type_id'}}, 'description': '200 ok object', 'required': ['type_id', 'location_id', 'location_type', 'item_id', 'location_flag', 'is_singleton']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_assets_ok'}, 'examples': {'application/json': [{'location_id': 60002959, 'location_type': 'station', 'is_singleton': True, 'location_flag': 'Hangar', 'item_id': 1000000016835, 'type_id': 3516}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A flat list of the users assets'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return a list of the characters assets
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/assets/`
        
        Alternate route: `/legacy/characters/{character_id}/assets/`
        
        Alternate route: `/dev/characters/{character_id}/assets/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: Character id of the target character
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_mail_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_mail_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_mail_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_mail_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'type': 'object', 'properties': {'subject': {'type': 'string', 'description': 'Mail subject', 'title': 'get_characters_character_id_mail_subject'}, 'labels': {'minimum': 0, 'type': 'array', 'maxItems': 25, 'items': {'format': 'int64', 'type': 'integer', 'description': 'label integer', 'title': 'get_characters_character_id_mail_label'}, 'uniqueItems': True, 'description': 'labels array', 'title': 'get_characters_character_id_mail_labels'}, 'is_read': {'type': 'boolean', 'description': 'is_read boolean', 'title': 'get_characters_character_id_mail_is_read'}, 'mail_id': {'format': 'int64', 'type': 'integer', 'description': 'mail_id integer', 'title': 'get_characters_character_id_mail_mail_id'}, 'from': {'format': 'int32', 'type': 'integer', 'description': 'From whom the mail was sent', 'title': 'get_characters_character_id_mail_from'}, 'timestamp': {'format': 'date-time', 'type': 'string', 'description': 'When the mail was sent', 'title': 'get_characters_character_id_mail_timestamp'}, 'recipients': {'minItems': 1, 'maxItems': 50, 'items': {'title': 'get_characters_character_id_mail_recipient', 'type': 'object', 'properties': {'recipient_type': {'enum': ['alliance', 'character', 'corporation', 'mailing_list'], 'type': 'string', 'description': 'recipient_type string', 'title': 'get_characters_character_id_mail_recipient_type'}, 'recipient_id': {'format': 'int32', 'type': 'integer', 'description': 'recipient_id integer', 'title': 'get_characters_character_id_mail_recipient_id'}}, 'description': 'recipient object', 'required': ['recipient_type', 'recipient_id']}, 'uniqueItems': True, 'type': 'array', 'description': 'Recipients of the mail', 'title': 'get_characters_character_id_mail_recipients'}}, 'description': '200 ok object', 'title': 'get_characters_character_id_mail_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_mail_ok'}, 'examples': {'application/json': [{'subject': 'Title for EVE Mail', 'labels': [3], 'is_read': True, 'mail_id': 7, 'from': 90000001, 'timestamp': '2015-09-30T16:07:00Z', 'recipients': [{'recipient_type': 'character', 'recipient_id': 90000002}]}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'The requested mail'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return the 50 most recent mail headers belonging to the character that match the query criteria. Queries can be filtered by label, and last_mail_id can be used to paginate backwards.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/`
        
        Alternate route: `/dev/characters/{character_id}/mail/`
        
        
        ---
        
        This route is cached for up to 30 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: labels, last_mail_id, token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_characters_character_id_mail_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_characters_character_id_mail_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_characters_character_id_mail_403_forbidden'}}, 'description': 'Forbidden', 'title': 'post_characters_character_id_mail_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.send_mail.v1'}}, 'description': 'Forbidden'}, '400': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Bad request message', 'title': 'post_characters_character_id_mail_400_bad_request'}}, 'description': 'Bad request', 'title': 'post_characters_character_id_mail_bad_request'}, 'examples': {'application/json': {'error': 'Bad request message'}}, 'description': 'Only one corporation, alliance, or mailing list can be the\nrecipient of a mail\n'}, '201': {'schema': {'format': 'int32', 'type': 'integer', 'description': 'Mail ID', 'title': 'post_characters_character_id_mail_created'}, 'examples': {'application/json': 13}, 'description': 'Mail created'}}

    def post(self, character_id, mail, datasource="tranquility",**kwargs):
        """
                Create and send a new mail
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/mail/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/`
        
        Alternate route: `/dev/characters/{character_id}/mail/`

:type character_id: int
        :param character_id: The sender's character ID
:type mail: None
        :param mail: The mail to send
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "mail" : mail, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class CharactersDetailClones(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/clones/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_clones_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_clones_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_clones_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_clones_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-clones.read_clones.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'title': 'get_characters_character_id_clones_ok', 'type': 'object', 'properties': {'home_location': {'type': 'object', 'properties': {'location_id': {'format': 'int64', 'type': 'integer', 'description': 'location_id integer', 'title': 'get_characters_character_id_clones_location_id'}, 'location_type': {'enum': ['station', 'structure'], 'type': 'string', 'description': 'location_type string', 'title': 'get_characters_character_id_clones_location_type'}}, 'description': 'home_location object', 'title': 'get_characters_character_id_clones_home_location'}, 'jump_clones': {'items': {'type': 'object', 'properties': {'implants': {'items': {'format': 'int32', 'type': 'integer', 'description': 'implant integer', 'title': 'get_characters_character_id_clones_implant'}, 'type': 'array', 'description': 'implants array', 'title': 'get_characters_character_id_clones_implants'}, 'location_id': {'format': 'int64', 'type': 'integer', 'description': 'location_id integer', 'title': 'get_characters_character_id_clones_location_id'}, 'location_type': {'enum': ['station', 'structure'], 'type': 'string', 'description': 'location_type string', 'title': 'get_characters_character_id_clones_location_type'}}, 'description': 'jump_clone object', 'title': 'get_characters_character_id_clones_jump_clone'}, 'type': 'array', 'description': 'jump_clones array', 'title': 'get_characters_character_id_clones_jump_clones'}, 'last_jump_date': {'format': 'date-time', 'type': 'string', 'description': 'last_jump_date string', 'title': 'get_characters_character_id_clones_last_jump_date'}}, 'description': '200 ok object', 'required': ['jump_clones']}, 'examples': {'application/json': {'home_location': {'location_id': 1021348135816, 'location_type': 'structure'}, 'jump_clones': [{'implants': [22118], 'location_id': 60003463, 'location_type': 'station'}, {'implants': [], 'location_id': 1021348135816, 'location_type': 'structure'}]}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Clone information for the given character'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                A list of the character's clones
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/clones/`
        
        Alternate route: `/dev/characters/{character_id}/clones/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailContacts(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/contacts/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_contacts_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_contacts_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_contacts_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_contacts_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.read_contacts.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_characters_character_id_contacts_200_ok', 'type': 'object', 'properties': {'label_id': {'format': 'int64', 'type': 'integer', 'description': 'Custom label of the contact', 'title': 'get_characters_character_id_contacts_label_id'}, 'standing': {'format': 'float', 'type': 'number', 'description': 'Standing of the contact', 'title': 'get_characters_character_id_contacts_standing'}, 'is_watched': {'type': 'boolean', 'description': 'Whether this contact is being watched', 'title': 'get_characters_character_id_contacts_is_watched'}, 'contact_type': {'enum': ['character', 'corporation', 'alliance', 'faction'], 'type': 'string', 'description': 'contact_type string', 'title': 'get_characters_character_id_contacts_contact_type'}, 'is_blocked': {'type': 'boolean', 'description': 'Whether this contact is in the blocked list. Note a missing value denotes unknown, not true or false', 'title': 'get_characters_character_id_contacts_is_blocked'}, 'contact_id': {'format': 'int32', 'type': 'integer', 'description': 'contact_id integer', 'title': 'get_characters_character_id_contacts_contact_id'}}, 'description': '200 ok object', 'required': ['standing', 'contact_type', 'contact_id']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_contacts_ok'}, 'examples': {'application/json': [{'is_blocked': False, 'standing': 10.0, 'is_watched': True, 'contact_id': 123, 'contact_type': 'character'}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of contacts'}}

    def get(self, character_id, datasource="tranquility",page=1,**kwargs):
        """
                Return contacts of a character
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`
        
        
        ---
        
        This route is cached for up to 300 seconds

:type character_id: int
        :param character_id: ID for a character
:type datasource: str
        :param datasource: The server name you would like data from
:type page: int
        :param page: page integer
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, "page" : page, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_characters_character_id_contacts_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_characters_character_id_contacts_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_characters_character_id_contacts_403_forbidden'}}, 'description': 'Forbidden', 'title': 'post_characters_character_id_contacts_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.write_contacts.v1'}}, 'description': 'Forbidden'}, '201': {'schema': {'items': {'format': 'int32', 'type': 'integer', 'description': '201 created integer', 'title': 'post_characters_character_id_contacts_201_created'}, 'type': 'array', 'description': '201 created array', 'title': 'post_characters_character_id_contacts_created'}, 'examples': {'application/json': [123, 456]}, 'description': 'A list of contact ids that successfully created'}}

    def post(self, character_id, contact_ids, datasource="tranquility",label_id=0,standing="-10",watched="False",**kwargs):
        """
                Bulk add contacts with same settings
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`

:type character_id: int
        :param character_id: ID for a character
:type contact_ids: None
        :param contact_ids: A list of contacts to add
:type datasource: str
        :param datasource: The server name you would like data from
:type label_id: int
        :param label_id: Add a custom label to the new contact
:type standing: number
        :param standing: Standing for the new contact
:type watched: boolean
        :param watched: Whether the new contact should be watched, note this is only effective on characters
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "contact_ids" : contact_ids, "datasource" : datasource, "label_id" : label_id, "standing" : standing, "watched" : watched, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)

    delete_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'delete_characters_character_id_contacts_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'delete_characters_character_id_contacts_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'delete_characters_character_id_contacts_403_forbidden'}}, 'description': 'Forbidden', 'title': 'delete_characters_character_id_contacts_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.write_contacts.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Contacts deleted'}}

    def delete(self, character_id, contact_ids, datasource="tranquility",**kwargs):
        """
                Bulk delete contacts
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`

:type character_id: int
        :param character_id: ID for a character
:type contact_ids: None
        :param contact_ids: A list of contacts to edit
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "contact_ids" : contact_ids, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.delete_responses) \
            .delete(**kwargs_dict)

    put_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'put_characters_character_id_contacts_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'put_characters_character_id_contacts_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'put_characters_character_id_contacts_403_forbidden'}}, 'description': 'Forbidden', 'title': 'put_characters_character_id_contacts_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-characters.write_contacts.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Contacts updated'}}

    def put(self, character_id, contact_ids, datasource="tranquility",label_id=0,standing="-10",watched="False",**kwargs):
        """
                Bulk edit contacts with same settings
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/contacts/`
        
        Alternate route: `/legacy/characters/{character_id}/contacts/`
        
        Alternate route: `/dev/characters/{character_id}/contacts/`

:type character_id: int
        :param character_id: ID for a character
:type contact_ids: None
        :param contact_ids: A list of contacts to edit
:type datasource: str
        :param datasource: The server name you would like data from
:type label_id: int
        :param label_id: Add a custom label to the contact, use 0 for clearing label
:type standing: number
        :param standing: Standing for the contact
:type watched: boolean
        :param watched: Whether the contact should be watched, note this is only effective on characters
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "contact_ids" : contact_ids, "datasource" : datasource, "label_id" : label_id, "standing" : standing, "watched" : watched, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.put_responses) \
            .put(**kwargs_dict)


class CharactersDetailLocation(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/location/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_location_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_location_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_location_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_location_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-location.read_location.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'title': 'get_characters_character_id_location_ok', 'type': 'object', 'properties': {'solar_system_id': {'format': 'int32', 'type': 'integer', 'description': 'solar_system_id integer', 'title': 'get_characters_character_id_location_solar_system_id'}, 'station_id': {'format': 'int32', 'type': 'integer', 'description': 'station_id integer', 'title': 'get_characters_character_id_location_station_id'}, 'structure_id': {'format': 'int64', 'type': 'integer', 'description': 'structure_id integer', 'title': 'get_characters_character_id_location_structure_id'}}, 'description': '200 ok object', 'required': ['solar_system_id']}, 'examples': {'application/json': {'solar_system_id': 30002505, 'structure_id': 1000000016989}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Information about the characters current location. Returns the current solar system id, and also the current station or structure ID if applicable.
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/location/`
        
        Alternate route: `/legacy/characters/{character_id}/location/`
        
        Alternate route: `/dev/characters/{character_id}/location/`
        
        
        ---
        
        This route is cached for up to 5 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailCalendarDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/calendar/{event_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_calendar_event_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_calendar_event_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_calendar_event_id_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_calendar_event_id_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-calendar.read_calendar_events.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'title': 'get_characters_character_id_calendar_event_id_ok', 'type': 'object', 'properties': {'importance': {'format': 'int32', 'type': 'integer', 'description': 'importance integer', 'title': 'get_characters_character_id_calendar_event_id_importance'}, 'duration': {'format': 'int32', 'type': 'integer', 'description': 'Length in minutes', 'title': 'get_characters_character_id_calendar_event_id_duration'}, 'date': {'format': 'date-time', 'type': 'string', 'description': 'date string', 'title': 'get_characters_character_id_calendar_event_id_date'}, 'event_id': {'format': 'int32', 'type': 'integer', 'description': 'event_id integer', 'title': 'get_characters_character_id_calendar_event_id_event_id'}, 'owner_type': {'enum': ['eve_server', 'corporation', 'faction', 'character', 'alliance'], 'type': 'string', 'description': 'owner_type string', 'title': 'get_characters_character_id_calendar_event_id_owner_type'}, 'response': {'type': 'string', 'description': 'response string', 'title': 'get_characters_character_id_calendar_event_id_response'}, 'text': {'type': 'string', 'description': 'text string', 'title': 'get_characters_character_id_calendar_event_id_text'}, 'owner_name': {'type': 'string', 'description': 'owner_name string', 'title': 'get_characters_character_id_calendar_event_id_owner_name'}, 'owner_id': {'format': 'int32', 'type': 'integer', 'description': 'owner_id integer', 'title': 'get_characters_character_id_calendar_event_id_owner_id'}, 'title': {'type': 'string', 'description': 'title string', 'title': 'get_characters_character_id_calendar_event_id_title'}}, 'description': 'Full details of a specific event', 'required': ['event_id', 'owner_id', 'owner_name', 'date', 'title', 'duration', 'importance', 'response', 'text', 'owner_type']}, 'examples': {'application/json': {'importance': 1, 'duration': 60, 'date': '2016-06-26T21:00:00Z', 'event_id': 1386435, 'owner_type': 'eve_server', 'response': 'Undecided', 'text': 'o7: The EVE Online Show features latest developer news, fast paced action, community overviews and a lot more with CCP Guard and CCP Mimic. Join the thrilling o7 live broadcast at 20:00 EVE time (=UTC) on <a href="http://www.twitch.tv/ccp">EVE TV</a>. Don\'t miss it!', 'owner_name': 'EVE System', 'owner_id': 1, 'title': 'o7 The EVE Online Show'}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Full details of a specific event'}}

    def get(self, character_id, event_id, datasource="tranquility",**kwargs):
        """
                Get all the information for a specific event
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`
        
        Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`
        
        
        ---
        
        This route is cached for up to 5 seconds

:type character_id: int
        :param character_id: The character id requesting the event
:type event_id: int
        :param event_id: The id of the event requested
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "event_id" : event_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    put_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'put_characters_character_id_calendar_event_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'put_characters_character_id_calendar_event_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'put_characters_character_id_calendar_event_id_403_forbidden'}}, 'description': 'Forbidden', 'title': 'put_characters_character_id_calendar_event_id_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-calendar.respond_calendar_events.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Event updated'}}

    def put(self, character_id, event_id, response, datasource="tranquility",**kwargs):
        """
                Set your response status to an event
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/calendar/{event_id}/`
        
        Alternate route: `/dev/characters/{character_id}/calendar/{event_id}/`

:type character_id: int
        :param character_id: The character ID requesting the event
:type event_id: int
        :param event_id: The ID of the event requested
:type response: None
        :param response: The response value to set, overriding current value.
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "event_id" : event_id, "response" : response, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.put_responses) \
            .put(**kwargs_dict)


class CharactersDetailKillmailsRecent(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/killmails/recent/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_killmails_recent_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_killmails_recent_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_killmails_recent_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_killmails_recent_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-killmails.read_killmails.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_characters_character_id_killmails_recent_200_ok', 'type': 'object', 'properties': {'killmail_id': {'format': 'int32', 'type': 'integer', 'description': 'ID of this killmail', 'title': 'get_characters_character_id_killmails_recent_killmail_id'}, 'killmail_hash': {'type': 'string', 'description': 'A hash of this killmail', 'title': 'get_characters_character_id_killmails_recent_killmail_hash'}}, 'description': '200 ok object', 'required': ['killmail_id', 'killmail_hash']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_killmails_recent_ok'}, 'examples': {'application/json': [{'killmail_id': 2, 'killmail_hash': '8eef5e8fb6b88fe3407c489df33822b2e3b57a5e'}, {'killmail_id': 1, 'killmail_hash': 'b41ccb498ece33d64019f64c0db392aa3aa701fb'}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of killmail IDs and hashes'}}

    def get(self, character_id, datasource="tranquility",max_count=50,**kwargs):
        """
                Return a list of character's recent kills and losses
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/killmails/recent/`
        
        Alternate route: `/legacy/characters/{character_id}/killmails/recent/`
        
        Alternate route: `/dev/characters/{character_id}/killmails/recent/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:type max_count: int
        :param max_count: How many killmails to return at maximum
:param kwargs: max_kill_id, token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, "max_count" : max_count, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailCorporationhistory(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/corporationhistory/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_corporationhistory_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_corporationhistory_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'type': 'object', 'properties': {'start_date': {'format': 'date-time', 'type': 'string', 'description': 'start_date string', 'title': 'get_characters_character_id_corporationhistory_start_date'}, 'corporation_id': {'format': 'int32', 'type': 'integer', 'description': 'corporation_id integer', 'title': 'get_characters_character_id_corporationhistory_corporation_id'}, 'is_deleted': {'type': 'boolean', 'description': 'True if the corporation has been deleted', 'title': 'get_characters_character_id_corporationhistory_is_deleted'}, 'record_id': {'format': 'int32', 'type': 'integer', 'description': 'An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous', 'title': 'get_characters_character_id_corporationhistory_record_id'}}, 'description': '200 ok object', 'title': 'get_characters_character_id_corporationhistory_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_characters_character_id_corporationhistory_ok'}, 'examples': {'application/json': [{'start_date': '2016-06-26T20:00:00Z', 'corporation_id': 90000001, 'is_deleted': False, 'record_id': 500}, {'start_date': '2016-07-26T20:00:00Z', 'corporation_id': 90000002, 'is_deleted': False, 'record_id': 501}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Corporation history for the given character'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Get a list of all the corporations a character has been a member of
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/corporationhistory/`
        
        Alternate route: `/legacy/characters/{character_id}/corporationhistory/`
        
        Alternate route: `/dev/characters/{character_id}/corporationhistory/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailPortrait(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/portrait/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_portrait_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_portrait_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'type': 'object', 'properties': {'px64x64': {'type': 'string', 'description': 'px64x64 string', 'title': 'get_characters_character_id_portrait_px64x64'}, 'px256x256': {'type': 'string', 'description': 'px256x256 string', 'title': 'get_characters_character_id_portrait_px256x256'}, 'px512x512': {'type': 'string', 'description': 'px512x512 string', 'title': 'get_characters_character_id_portrait_px512x512'}, 'px128x128': {'type': 'string', 'description': 'px128x128 string', 'title': 'get_characters_character_id_portrait_px128x128'}}, 'description': '200 ok object', 'title': 'get_characters_character_id_portrait_ok'}, 'examples': {'application/json': {'px64x64': 'https://imageserver.eveonline.com/Character/95465499_64.jpg', 'px256x256': 'https://imageserver.eveonline.com/Character/95465499_256.jpg', 'px512x512': 'https://imageserver.eveonline.com/Character/95465499_512.jpg', 'px128x128': 'https://imageserver.eveonline.com/Character/95465499_128.jpg'}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Public data for the given character'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'error message', 'title': 'get_characters_character_id_portrait_error'}}, 'description': 'No image server for this datasource', 'title': 'get_characters_character_id_portrait_not_found'}, 'examples': {'application/json': {'error': 'No image server for this datasource'}}, 'description': 'No image server for this datasource'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Get portrait urls for a character
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/portrait/`
        
        Alternate route: `/dev/characters/{character_id}/portrait/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailMailLabels(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/mail/labels/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_mail_labels_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_mail_labels_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_mail_labels_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_mail_labels_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.read_mail.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'type': 'object', 'properties': {'total_unread_count': {'format': 'int32', 'minimum': 0, 'type': 'integer', 'description': 'total_unread_count integer', 'title': 'get_characters_character_id_mail_labels_total_unread_count'}, 'labels': {'items': {'type': 'object', 'properties': {'label_id': {'format': 'int32', 'minimum': 0, 'type': 'integer', 'description': 'label_id integer', 'title': 'get_characters_character_id_mail_labels_label_id'}, 'unread_count': {'format': 'int32', 'minimum': 0, 'type': 'integer', 'description': 'unread_count integer', 'title': 'get_characters_character_id_mail_labels_unread_count'}, 'name': {'maxLength': 40, 'type': 'string', 'description': 'name string', 'title': 'get_characters_character_id_mail_labels_name'}, 'color': {'default': '#ffffff', 'enum': ['#ffffff', '#ffff01', '#ff6600', '#fe0000', '#9a0000', '#660066', '#0000fe', '#0099ff', '#01ffff', '#00ff33', '#349800', '#006634', '#666666', '#999999', '#e6e6e6', '#ffffcd', '#99ffff', '#ccff9a'], 'type': 'string', 'description': 'color string', 'title': 'get_characters_character_id_mail_labels_color'}}, 'description': 'label object', 'title': 'get_characters_character_id_mail_labels_label'}, 'type': 'array', 'description': 'labels array', 'title': 'get_characters_character_id_mail_labels_labels'}}, 'description': '200 ok object', 'title': 'get_characters_character_id_mail_labels_ok'}, 'examples': {'application/json': {'total_unread_count': 5, 'labels': [{'label_id': 16, 'unread_count': 4, 'name': 'PINK', 'color_hex': '#660066'}, {'label_id': 17, 'unread_count': 1, 'name': 'WHITE', 'color_hex': '#ffffff'}]}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of mail labels and unread counts'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Return a list of the users mail labels, unread counts for each label and a total unread count.
        
        ---
        
        Alternate route: `/v3/characters/{character_id}/mail/labels/`
        
        Alternate route: `/dev/characters/{character_id}/mail/labels/`
        
        
        ---
        
        This route is cached for up to 30 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_characters_character_id_mail_labels_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_characters_character_id_mail_labels_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_characters_character_id_mail_labels_403_forbidden'}}, 'description': 'Forbidden', 'title': 'post_characters_character_id_mail_labels_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-mail.organize_mail.v1'}}, 'description': 'Forbidden'}, '201': {'schema': {'format': 'int64', 'type': 'integer', 'description': 'Label ID', 'title': 'post_characters_character_id_mail_labels_created'}, 'examples': {'application/json': 128}, 'description': 'Label created'}}

    def post(self, character_id, datasource="tranquility",**kwargs):
        """
                Create a mail label
        
        ---
        
        Alternate route: `/v2/characters/{character_id}/mail/labels/`
        
        Alternate route: `/legacy/characters/{character_id}/mail/labels/`
        
        Alternate route: `/dev/characters/{character_id}/mail/labels/`

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: label, token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class CharactersDetailShip(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/ship/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_ship_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_ship_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_ship_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_ship_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-location.read_ship_type.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'title': 'get_characters_character_id_ship_ok', 'type': 'object', 'properties': {'ship_type_id': {'format': 'int32', 'type': 'integer', 'description': 'ship_type_id integer', 'title': 'get_characters_character_id_ship_ship_type_id'}, 'ship_name': {'type': 'string', 'description': 'ship_name string', 'title': 'get_characters_character_id_ship_ship_name'}, 'ship_item_id': {'format': 'int64', 'type': 'integer', 'description': "Item id's are unique to a ship and persist until it is repackaged. This value can be used to track repeated uses of a ship, or detect when a pilot changes into a different instance of the same ship type.", 'title': 'get_characters_character_id_ship_ship_item_id'}}, 'description': '200 ok object', 'required': ['ship_type_id', 'ship_item_id', 'ship_name']}, 'examples': {'application/json': {'ship_type_id': 1233, 'ship_name': 'SPACESHIPS!!!', 'ship_item_id': 1000000016991}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Get the current ship type, name and id'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Get the current ship type, name and id
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/ship/`
        
        Alternate route: `/legacy/characters/{character_id}/ship/`
        
        Alternate route: `/dev/characters/{character_id}/ship/`
        
        
        ---
        
        This route is cached for up to 5 seconds

:type character_id: int
        :param character_id: An EVE character ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CharactersDetailCalendar(object):
    base_url = "https://esi.tech.ccp.is/latest/characters/{character_id}/calendar/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_characters_character_id_calendar_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_characters_character_id_calendar_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_characters_character_id_calendar_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_characters_character_id_calendar_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-calendar.read_calendar_events.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'type': 'object', 'properties': {'event_date': {'format': 'date-time', 'type': 'string', 'description': 'event_date string', 'title': 'get_characters_character_id_calendar_event_date'}, 'importance': {'format': 'int32', 'type': 'integer', 'description': 'importance integer', 'title': 'get_characters_character_id_calendar_importance'}, 'event_id': {'format': 'int32', 'type': 'integer', 'description': 'event_id integer', 'title': 'get_characters_character_id_calendar_event_id'}, 'event_response': {'enum': ['declined', 'not_responded', 'accepted', 'tentative'], 'type': 'string', 'description': 'event_response string', 'title': 'get_characters_character_id_calendar_event_response'}, 'title': {'type': 'string', 'description': 'title string', 'title': 'get_characters_character_id_calendar_title'}}, 'description': 'event', 'title': 'get_characters_character_id_calendar_200_ok'}, 'type': 'array', 'description': 'Up to 50 events from now or the event you requested\n', 'title': 'get_characters_character_id_calendar_ok'}, 'examples': {'application/json': [{'event_date': '2016-06-26T20:00:00Z', 'importance': 0, 'event_id': 1386435, 'event_response': 'accepted', 'title': 'o7 The EVE Online Show'}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A collection of event summaries'}}

    def get(self, character_id, datasource="tranquility",**kwargs):
        """
                Get 50 event summaries from the calendar. If no event ID is given,
        the resource will return the next 50 chronological event summaries
        from now. If an event ID is specified, it will return the next 50
        chronological event summaries from after that event.
        
        
        ---
        
        Alternate route: `/v1/characters/{character_id}/calendar/`
        
        Alternate route: `/legacy/characters/{character_id}/calendar/`
        
        Alternate route: `/dev/characters/{character_id}/calendar/`
        
        
        ---
        
        This route is cached for up to 5 seconds

:type character_id: int
        :param character_id: The character to retrieve events from
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: from_event, token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"character_id" : character_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)