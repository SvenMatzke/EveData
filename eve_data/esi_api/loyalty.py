# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class LoyaltyStoresDetailOffers(object):
    base_url = "https://esi.tech.ccp.is/latest/loyalty/stores/{corporation_id}/offers/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_loyalty_stores_corporation_id_offers_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_loyalty_stores_corporation_id_offers_500_internal_server_error'}}}}, '200': {'examples': {'application/json': [{'isk_cost': 0, 'quantity': 1, 'offer_id': 1, 'required_items': [], 'type_id': 123, 'lp_cost': 100}, {'isk_cost': 1000, 'quantity': 10, 'offer_id': 2, 'required_items': [{'quantity': 10, 'type_id': 1234}], 'type_id': 1235, 'lp_cost': 100}]}, 'description': 'A list of offers', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['offer_id', 'type_id', 'quantity', 'lp_cost', 'isk_cost', 'required_items'], 'description': '200 ok object', 'title': 'get_loyalty_stores_corporation_id_offers_200_ok', 'type': 'object', 'properties': {'isk_cost': {'description': 'isk_cost number', 'format': 'int32', 'type': 'number', 'title': 'get_loyalty_stores_corporation_id_offers_isk_cost'}, 'quantity': {'description': 'quantity integer', 'format': 'int32', 'type': 'integer', 'title': 'get_loyalty_stores_corporation_id_offers_quantity'}, 'offer_id': {'description': 'offer_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_loyalty_stores_corporation_id_offers_offer_id'}, 'required_items': {'description': 'required_items array', 'items': {'required': ['type_id', 'quantity'], 'description': 'required_item object', 'title': 'get_loyalty_stores_corporation_id_offers_required_item', 'type': 'object', 'properties': {'quantity': {'description': 'quantity integer', 'format': 'int32', 'type': 'integer', 'title': 'get_loyalty_stores_corporation_id_offers_quantity'}, 'type_id': {'description': 'type_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_loyalty_stores_corporation_id_offers_type_id'}}}, 'type': 'array', 'title': 'get_loyalty_stores_corporation_id_offers_required_items'}, 'type_id': {'description': 'type_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_loyalty_stores_corporation_id_offers_type_id'}, 'lp_cost': {'description': 'lp_cost integer', 'format': 'int32', 'type': 'integer', 'title': 'get_loyalty_stores_corporation_id_offers_lp_cost'}}}, 'type': 'array', 'title': 'get_loyalty_stores_corporation_id_offers_ok'}}}

    def get(self, corporation_id, datasource="tranquility",**kwargs):
        """
                Return a list of offers from a specific corporation's loyalty store
        
        ---
        
        Alternate route: `/v1/loyalty/stores/{corporation_id}/offers/`
        
        Alternate route: `/legacy/loyalty/stores/{corporation_id}/offers/`
        
        Alternate route: `/dev/loyalty/stores/{corporation_id}/offers/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type corporation_id: int
        :param corporation_id: ID of a corporation
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"corporation_id" : corporation_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)