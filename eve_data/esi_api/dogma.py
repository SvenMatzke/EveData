# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class DogmaEffects(object):
    base_url = "https://esi.tech.ccp.is/latest/dogma/effects/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_dogma_effects_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_dogma_effects_500_internal_server_error'}}}}, '200': {'examples': {'application/json': [1, 2, 3]}, 'description': 'A list of dogma effect ids', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'description': '200 ok integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_200_ok'}, 'type': 'array', 'title': 'get_dogma_effects_ok'}}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Get a list of dogma effect ids
        
        ---
        
        Alternate route: `/v1/dogma/effects/`
        
        Alternate route: `/legacy/dogma/effects/`
        
        Alternate route: `/dev/dogma/effects/`
        
        
        ---
        
        This route is cached for up to 3600 seconds


:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class DogmaAttributes(object):
    base_url = "https://esi.tech.ccp.is/latest/dogma/attributes/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_dogma_attributes_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_dogma_attributes_500_internal_server_error'}}}}, '200': {'examples': {'application/json': [1, 2, 3]}, 'description': 'A list of dogma attribute ids', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'description': '200 ok integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_attributes_200_ok'}, 'type': 'array', 'title': 'get_dogma_attributes_ok'}}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Get a list of dogma attribute ids
        
        ---
        
        Alternate route: `/v1/dogma/attributes/`
        
        Alternate route: `/legacy/dogma/attributes/`
        
        Alternate route: `/dev/dogma/attributes/`
        
        
        ---
        
        This route is cached for up to 3600 seconds


:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class DogmaAttributesDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/dogma/attributes/{attribute_id}/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_dogma_attributes_attribute_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_dogma_attributes_attribute_id_500_internal_server_error'}}}}, '404': {'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Dogma attribute not found', 'schema': {'description': 'Not found', 'title': 'get_dogma_attributes_attribute_id_not_found', 'type': 'object', 'properties': {'error': {'description': 'Not found message', 'type': 'string', 'title': 'get_dogma_attributes_attribute_id_404_not_found'}}}}, '200': {'examples': {'application/json': {'default_value': 1, 'description': 'Factor by which topspeed increases.', 'unit_id': 124, 'stackable': False, 'high_is_good': True, 'attribute_id': 20, 'published': True, 'name': 'speedFactor', 'display_name': 'Maximum Velocity Bonus', 'icon_id': 1389}}, 'description': 'Information about a dogma attribute', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'required': ['attribute_id'], 'description': '200 ok object', 'title': 'get_dogma_attributes_attribute_id_ok', 'type': 'object', 'properties': {'default_value': {'description': 'default_value number', 'format': 'float', 'type': 'number', 'title': 'get_dogma_attributes_attribute_id_default_value'}, 'description': {'description': 'description string', 'type': 'string', 'title': 'get_dogma_attributes_attribute_id_description'}, 'unit_id': {'description': 'unit_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_attributes_attribute_id_unit_id'}, 'stackable': {'description': 'stackable boolean', 'type': 'boolean', 'title': 'get_dogma_attributes_attribute_id_stackable'}, 'high_is_good': {'description': 'high_is_good boolean', 'type': 'boolean', 'title': 'get_dogma_attributes_attribute_id_high_is_good'}, 'attribute_id': {'description': 'attribute_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_attributes_attribute_id_attribute_id'}, 'published': {'description': 'published boolean', 'type': 'boolean', 'title': 'get_dogma_attributes_attribute_id_published'}, 'name': {'description': 'name string', 'type': 'string', 'title': 'get_dogma_attributes_attribute_id_name'}, 'display_name': {'description': 'display_name string', 'type': 'string', 'title': 'get_dogma_attributes_attribute_id_display_name'}, 'icon_id': {'description': 'icon_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_attributes_attribute_id_icon_id'}}}}}

    def get(self, attribute_id, datasource="tranquility",**kwargs):
        """
                Get information on a dogma attribute
        
        ---
        
        Alternate route: `/v1/dogma/attributes/{attribute_id}/`
        
        Alternate route: `/legacy/dogma/attributes/{attribute_id}/`
        
        Alternate route: `/dev/dogma/attributes/{attribute_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type attribute_id: int
        :param attribute_id: A dogma attribute ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"attribute_id" : attribute_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class DogmaEffectsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/dogma/effects/{effect_id}/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_dogma_effects_effect_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_dogma_effects_effect_id_500_internal_server_error'}}}}, '404': {'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Dogma effect not found', 'schema': {'description': 'Not found', 'title': 'get_dogma_effects_effect_id_not_found', 'type': 'object', 'properties': {'error': {'description': 'Not found message', 'type': 'string', 'title': 'get_dogma_effects_effect_id_404_not_found'}}}}, '200': {'examples': {'application/json': {'description': 'Requires a high power slot.', 'is_warp_safe': False, 'published': True, 'post_expression': 131, 'electronic_chance': False, 'display_name': 'High power', 'icon_id': 293, 'range_chance': False, 'is_offensive': False, 'disallow_auto_repeat': False, 'pre_expression': 131, 'is_assistance': False, 'name': 'hiPower', 'effect_id': 12, 'effect_category': 0}}, 'description': 'Information about a dogma effect', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'required': ['effect_id'], 'description': '200 ok object', 'title': 'get_dogma_effects_effect_id_ok', 'type': 'object', 'properties': {'range_attribute_id': {'description': 'range_attribute_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_range_attribute_id'}, 'description': {'description': 'description string', 'type': 'string', 'title': 'get_dogma_effects_effect_id_description'}, 'name': {'description': 'name string', 'type': 'string', 'title': 'get_dogma_effects_effect_id_name'}, 'tracking_speed_attribute_id': {'description': 'tracking_speed_attribute_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_tracking_speed_attribute_id'}, 'discharge_attribute_id': {'description': 'discharge_attribute_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_discharge_attribute_id'}, 'post_expression': {'description': 'post_expression integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_post_expression'}, 'duration_attribute_id': {'description': 'duration_attribute_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_duration_attribute_id'}, 'electronic_chance': {'description': 'electronic_chance boolean', 'type': 'boolean', 'title': 'get_dogma_effects_effect_id_electronic_chance'}, 'display_name': {'description': 'display_name string', 'type': 'string', 'title': 'get_dogma_effects_effect_id_display_name'}, 'is_assistance': {'description': 'is_assistance boolean', 'type': 'boolean', 'title': 'get_dogma_effects_effect_id_is_assistance'}, 'range_chance': {'description': 'range_chance boolean', 'type': 'boolean', 'title': 'get_dogma_effects_effect_id_range_chance'}, 'is_offensive': {'description': 'is_offensive boolean', 'type': 'boolean', 'title': 'get_dogma_effects_effect_id_is_offensive'}, 'falloff_attribute_id': {'description': 'falloff_attribute_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_falloff_attribute_id'}, 'disallow_auto_repeat': {'description': 'disallow_auto_repeat boolean', 'type': 'boolean', 'title': 'get_dogma_effects_effect_id_disallow_auto_repeat'}, 'pre_expression': {'description': 'pre_expression integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_pre_expression'}, 'icon_id': {'description': 'icon_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_icon_id'}, 'modifiers': {'description': 'modifiers array', 'items': {'required': ['func', 'domain', 'modified_attribute_id', 'modifying_attribute_id', 'operator'], 'description': 'modifier object', 'title': 'get_dogma_effects_effect_id_modifier', 'type': 'object', 'properties': {'domain': {'description': 'domain string', 'type': 'string', 'title': 'get_dogma_effects_effect_id_domain'}, 'func': {'description': 'func string', 'type': 'string', 'title': 'get_dogma_effects_effect_id_func'}, 'operator': {'description': 'operator integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_operator'}, 'modified_attribute_id': {'description': 'modified_attribute_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_modified_attribute_id'}, 'modifying_attribute_id': {'description': 'modifying_attribute_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_modifying_attribute_id'}}}, 'type': 'array', 'title': 'get_dogma_effects_effect_id_modifiers'}, 'published': {'description': 'published boolean', 'type': 'boolean', 'title': 'get_dogma_effects_effect_id_published'}, 'is_warp_safe': {'description': 'is_warp_safe boolean', 'type': 'boolean', 'title': 'get_dogma_effects_effect_id_is_warp_safe'}, 'effect_id': {'description': 'effect_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_effect_id'}, 'effect_category': {'description': 'effect_category integer', 'format': 'int32', 'type': 'integer', 'title': 'get_dogma_effects_effect_id_effect_category'}}}}}

    def get(self, effect_id, datasource="tranquility",**kwargs):
        """
                Get information on a dogma effect
        
        ---
        
        Alternate route: `/v1/dogma/effects/{effect_id}/`
        
        Alternate route: `/legacy/dogma/effects/{effect_id}/`
        
        Alternate route: `/dev/dogma/effects/{effect_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type effect_id: int
        :param effect_id: A dogma effect ID
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"effect_id" : effect_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)