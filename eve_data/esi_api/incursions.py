# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class Incursions(object):
    base_url = "https://esi.tech.ccp.is/latest/incursions/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_incursions_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_incursions_500_internal_server_error'}}}}, '200': {'examples': {'application/json': [{'faction_id': 500019, 'staging_solar_system_id': 30004154, 'has_boss': True, 'influence': 1.0, 'state': 'mobilizing', 'infested_solar_systems': [30004148, 30004149, 30004150, 30004151, 30004152, 30004153, 30004154], 'type': 'Incursion', 'constellation_id': 20000607}]}, 'description': 'A list of incursions', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['type', 'state', 'influence', 'has_boss', 'faction_id', 'constellation_id', 'staging_solar_system_id', 'infested_solar_systems'], 'description': '200 ok object', 'title': 'get_incursions_200_ok', 'type': 'object', 'properties': {'faction_id': {'description': "The attacking faction's id", 'format': 'int32', 'type': 'integer', 'title': 'get_incursions_faction_id'}, 'staging_solar_system_id': {'description': 'Staging solar system for this incursion', 'format': 'int32', 'type': 'integer', 'title': 'get_incursions_staging_solar_system_id'}, 'has_boss': {'description': 'Whether the final encounter has boss or not', 'type': 'boolean', 'title': 'get_incursions_has_boss'}, 'influence': {'description': 'Influence of this incursion as a float from 0 to 1', 'format': 'float', 'type': 'number', 'title': 'get_incursions_influence'}, 'state': {'enum': ['withdrawing', 'mobilizing', 'established'], 'description': 'The state of this incursion', 'type': 'string', 'title': 'get_incursions_state'}, 'infested_solar_systems': {'description': 'A list of infested solar system ids that are a part of this incursion', 'items': {'description': 'infested_solar_system integer', 'format': 'int32', 'type': 'integer', 'title': 'get_incursions_infested_solar_system'}, 'type': 'array', 'title': 'get_incursions_infested_solar_systems'}, 'type': {'description': 'The type of this incursion', 'type': 'string', 'title': 'get_incursions_type'}, 'constellation_id': {'description': 'The constellation id in which this incursion takes place', 'format': 'int32', 'type': 'integer', 'title': 'get_incursions_constellation_id'}}}, 'type': 'array', 'title': 'get_incursions_ok'}}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Return a list of current incursions
        
        ---
        
        Alternate route: `/v1/incursions/`
        
        Alternate route: `/legacy/incursions/`
        
        Alternate route: `/dev/incursions/`
        
        
        ---
        
        This route is cached for up to 300 seconds


:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)