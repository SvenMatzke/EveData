# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class WarsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/wars/{war_id}/"

    get_responses = {'422': {'examples': {'application/json': {'error': 'Unprocessable entity message'}}, 'description': 'War not found', 'schema': {'description': 'Unprocessable entity', 'title': 'get_wars_war_id_unprocessable_entity', 'type': 'object', 'properties': {'error': {'description': 'Unprocessable entity message', 'type': 'string', 'title': 'get_wars_war_id_422_unprocessable_entity'}}}}, '200': {'examples': {'application/json': {'mutual': False, 'defender': {'corporation_id': 1001562011, 'isk_destroyed': 0, 'ships_killed': 0}, 'id': 1941, 'declared': '2004-05-22T05:20:00Z', 'open_for_allies': False, 'aggressor': {'corporation_id': 986665792, 'isk_destroyed': 0, 'ships_killed': 0}}}, 'description': 'Details about a war', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'required': ['id', 'declared', 'mutual', 'open_for_allies', 'aggressor', 'defender'], 'description': '200 ok object', 'title': 'get_wars_war_id_ok', 'type': 'object', 'properties': {'open_for_allies': {'description': 'Is the war currently open for allies or not', 'type': 'boolean', 'title': 'get_wars_war_id_open_for_allies'}, 'mutual': {'description': 'Was the war declared mutual by both parties', 'type': 'boolean', 'title': 'get_wars_war_id_mutual'}, 'defender': {'required': ['ships_killed', 'isk_destroyed'], 'description': 'The defending corporation or alliance that declared this war, only contains either corporation_id or alliance_id', 'title': 'get_wars_war_id_defender', 'type': 'object', 'properties': {'corporation_id': {'description': 'Corporation ID if and only if the defender is a corporation', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_war_id_corporation_id'}, 'isk_destroyed': {'description': 'ISK value of ships the defender has killed', 'format': 'float', 'type': 'number', 'title': 'get_wars_war_id_isk_destroyed'}, 'ships_killed': {'description': 'The number of ships the defender has killed', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_war_id_ships_killed'}, 'alliance_id': {'description': 'Alliance ID if and only if the defender is an alliance', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_war_id_alliance_id'}}}, 'id': {'description': 'ID of the specified war', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_war_id_id'}, 'declared': {'description': 'Time that the war was declared', 'format': 'date-time', 'type': 'string', 'title': 'get_wars_war_id_declared'}, 'started': {'description': 'Time when the war started and both sides could shoot each other', 'format': 'date-time', 'type': 'string', 'title': 'get_wars_war_id_started'}, 'allies': {'description': 'allied corporations or alliances, each object contains either corporation_id or alliance_id', 'items': {'description': 'ally object', 'title': 'get_wars_war_id_ally', 'type': 'object', 'properties': {'corporation_id': {'description': 'Corporation ID if and only if this ally is a corporation', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_war_id_corporation_id'}, 'alliance_id': {'description': 'Alliance ID if and only if this ally is an alliance', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_war_id_alliance_id'}}}, 'type': 'array', 'title': 'get_wars_war_id_allies'}, 'finished': {'description': 'Time the war ended and shooting was no longer allowed', 'format': 'date-time', 'type': 'string', 'title': 'get_wars_war_id_finished'}, 'retracted': {'description': 'Time the war was retracted but both sides could still shoot each other', 'format': 'date-time', 'type': 'string', 'title': 'get_wars_war_id_retracted'}, 'aggressor': {'required': ['ships_killed', 'isk_destroyed'], 'description': 'The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id', 'title': 'get_wars_war_id_aggressor', 'type': 'object', 'properties': {'corporation_id': {'description': 'Corporation ID if and only if the aggressor is a corporation', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_war_id_corporation_id'}, 'isk_destroyed': {'description': 'ISK value of ships the aggressor has destroyed', 'format': 'float', 'type': 'number', 'title': 'get_wars_war_id_isk_destroyed'}, 'ships_killed': {'description': 'The number of ships the aggressor has killed', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_war_id_ships_killed'}, 'alliance_id': {'description': 'Alliance ID if and only if the aggressor is an alliance', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_war_id_alliance_id'}}}}}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_wars_war_id_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_wars_war_id_500_internal_server_error'}}}}}

    def get(self, war_id, datasource="tranquility",**kwargs):
        """
                Return details about a war
        
        ---
        
        Alternate route: `/v1/wars/{war_id}/`
        
        Alternate route: `/legacy/wars/{war_id}/`
        
        Alternate route: `/dev/wars/{war_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type war_id: int
        :param war_id: ID for a war
:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"war_id" : war_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class Wars(object):
    base_url = "https://esi.tech.ccp.is/latest/wars/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_wars_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_wars_500_internal_server_error'}}}}, '200': {'examples': {'application/json': [3, 2, 1]}, 'description': 'A list of war IDs, 2000 at most, in decending order by war_id.', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'description': '200 ok integer', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_200_ok'}, 'type': 'array', 'title': 'get_wars_ok'}}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Return a list of wars
        
        ---
        
        Alternate route: `/v1/wars/`
        
        Alternate route: `/legacy/wars/`
        
        Alternate route: `/dev/wars/`
        
        
        ---
        
        This route is cached for up to 3600 seconds


:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: max_war_id, user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class WarsDetailKillmails(object):
    base_url = "https://esi.tech.ccp.is/latest/wars/{war_id}/killmails/"

    get_responses = {'422': {'examples': {'application/json': {'error': 'Unprocessable entity message'}}, 'description': 'War not found', 'schema': {'description': 'Unprocessable entity', 'title': 'get_wars_war_id_killmails_unprocessable_entity', 'type': 'object', 'properties': {'error': {'description': 'Unprocessable entity message', 'type': 'string', 'title': 'get_wars_war_id_killmails_422_unprocessable_entity'}}}}, '200': {'examples': {'application/json': [{'killmail_hash': '8eef5e8fb6b88fe3407c489df33822b2e3b57a5e', 'killmail_id': 2}, {'killmail_hash': 'b41ccb498ece33d64019f64c0db392aa3aa701fb', 'killmail_id': 1}]}, 'description': 'A list of killmail IDs and hashes', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['killmail_id', 'killmail_hash'], 'description': '200 ok object', 'title': 'get_wars_war_id_killmails_200_ok', 'type': 'object', 'properties': {'killmail_hash': {'description': 'A hash of this killmail', 'type': 'string', 'title': 'get_wars_war_id_killmails_killmail_hash'}, 'killmail_id': {'description': 'ID of this killmail', 'format': 'int32', 'type': 'integer', 'title': 'get_wars_war_id_killmails_killmail_id'}}}, 'type': 'array', 'title': 'get_wars_war_id_killmails_ok'}}, '500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_wars_war_id_killmails_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_wars_war_id_killmails_500_internal_server_error'}}}}}

    def get(self, war_id, datasource="tranquility",page="1",**kwargs):
        """
                Return a list of kills related to a war
        
        ---
        
        Alternate route: `/v1/wars/{war_id}/killmails/`
        
        Alternate route: `/legacy/wars/{war_id}/killmails/`
        
        Alternate route: `/dev/wars/{war_id}/killmails/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type war_id: int
        :param war_id: A valid war ID
:type datasource: str
        :param datasource: The server name you would like data from:type page: int
        :param page: Which page to query, starting at 1, 2000 killmails per page.
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"war_id" : war_id, "datasource" : datasource, "page" : page, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)