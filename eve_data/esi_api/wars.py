# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class Wars(object):
    base_url = "https://esi.tech.ccp.is/latest/wars/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of war IDs, 2000 at most, in decending order by war_id.', 'examples': {'application/json': [3, 2, 1]}, 'schema': {'title': 'get_wars_ok', 'type': 'array', 'description': '200 ok array', 'items': {'type': 'integer', 'format': 'int32', 'description': '200 ok integer', 'title': 'get_wars_200_ok'}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_wars_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_wars_500_internal_server_error'}}}}}
    parameter = [{'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'max_war_id', 'format': 'int32', 'description': 'Only return wars with ID smaller than this.', 'type': 'integer', 'in': 'query', 'required': False}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, datasource= "tranquility",max_war_id= ,**kwargs
    ):
        """
                Return a list of wars
        
        ---
        
        Alternate route: `/v1/wars/`
        
        Alternate route: `/legacy/wars/`
        
        Alternate route: `/dev/wars/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type datasource: str
        :param datasource: The server name you would like data from

        :type max_war_id: int
        :param max_war_id: Only return wars with ID smaller than this.

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"datasource" : datasource, "max_war_id" : max_war_id, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class WarsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/wars/{war_id}/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Details about a war', 'examples': {'application/json': {'mutual': False, 'id': 1941, 'aggressor': {'corporation_id': 986665792, 'ships_killed': 0, 'isk_destroyed': 0}, 'declared': '2004-05-22T05:20:00Z', 'defender': {'corporation_id': 1001562011, 'ships_killed': 0, 'isk_destroyed': 0}, 'open_for_allies': False}}, 'schema': {'title': 'get_wars_war_id_ok', 'type': 'object', 'description': '200 ok object', 'required': ['id', 'declared', 'mutual', 'open_for_allies', 'aggressor', 'defender'], 'properties': {'mutual': {'type': 'boolean', 'description': 'Was the war declared mutual by both parties', 'title': 'get_wars_war_id_mutual'}, 'retracted': {'type': 'string', 'format': 'date-time', 'description': 'Time the war was retracted but both sides could still shoot each other', 'title': 'get_wars_war_id_retracted'}, 'allies': {'title': 'get_wars_war_id_allies', 'type': 'array', 'description': 'allied corporations or alliances, each object contains either corporation_id or alliance_id', 'items': {'title': 'get_wars_war_id_ally', 'type': 'object', 'description': 'ally object', 'properties': {'corporation_id': {'type': 'integer', 'format': 'int32', 'description': 'Corporation ID if and only if this ally is a corporation', 'title': 'get_wars_war_id_corporation_id'}, 'alliance_id': {'type': 'integer', 'format': 'int32', 'description': 'Alliance ID if and only if this ally is an alliance', 'title': 'get_wars_war_id_alliance_id'}}}}, 'id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the specified war', 'title': 'get_wars_war_id_id'}, 'started': {'type': 'string', 'format': 'date-time', 'description': 'Time when the war started and both sides could shoot each other', 'title': 'get_wars_war_id_started'}, 'aggressor': {'title': 'get_wars_war_id_aggressor', 'type': 'object', 'description': 'The aggressor corporation or alliance that declared this war, only contains either corporation_id or alliance_id', 'required': ['ships_killed', 'isk_destroyed'], 'properties': {'corporation_id': {'type': 'integer', 'format': 'int32', 'description': 'Corporation ID if and only if the aggressor is a corporation', 'title': 'get_wars_war_id_corporation_id'}, 'ships_killed': {'type': 'integer', 'format': 'int32', 'description': 'The number of ships the aggressor has killed', 'title': 'get_wars_war_id_ships_killed'}, 'isk_destroyed': {'type': 'number', 'format': 'float', 'description': 'ISK value of ships the aggressor has destroyed', 'title': 'get_wars_war_id_isk_destroyed'}, 'alliance_id': {'type': 'integer', 'format': 'int32', 'description': 'Alliance ID if and only if the aggressor is an alliance', 'title': 'get_wars_war_id_alliance_id'}}}, 'declared': {'type': 'string', 'format': 'date-time', 'description': 'Time that the war was declared', 'title': 'get_wars_war_id_declared'}, 'defender': {'title': 'get_wars_war_id_defender', 'type': 'object', 'description': 'The defending corporation or alliance that declared this war, only contains either corporation_id or alliance_id', 'required': ['ships_killed', 'isk_destroyed'], 'properties': {'corporation_id': {'type': 'integer', 'format': 'int32', 'description': 'Corporation ID if and only if the defender is a corporation', 'title': 'get_wars_war_id_corporation_id'}, 'ships_killed': {'type': 'integer', 'format': 'int32', 'description': 'The number of ships the defender has killed', 'title': 'get_wars_war_id_ships_killed'}, 'isk_destroyed': {'type': 'number', 'format': 'float', 'description': 'ISK value of ships the defender has killed', 'title': 'get_wars_war_id_isk_destroyed'}, 'alliance_id': {'type': 'integer', 'format': 'int32', 'description': 'Alliance ID if and only if the defender is an alliance', 'title': 'get_wars_war_id_alliance_id'}}}, 'open_for_allies': {'type': 'boolean', 'description': 'Is the war currently open for allies or not', 'title': 'get_wars_war_id_open_for_allies'}, 'finished': {'type': 'string', 'format': 'date-time', 'description': 'Time the war ended and shooting was no longer allowed', 'title': 'get_wars_war_id_finished'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_wars_war_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_wars_war_id_500_internal_server_error'}}}}, '422': {'description': 'War not found', 'examples': {'application/json': {'error': 'Unprocessable entity message'}}, 'schema': {'title': 'get_wars_war_id_unprocessable_entity', 'type': 'object', 'description': 'Unprocessable entity', 'properties': {'error': {'type': 'string', 'description': 'Unprocessable entity message', 'title': 'get_wars_war_id_422_unprocessable_entity'}}}}}
    parameter = [{'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'war_id', 'format': 'int32', 'description': 'ID for a war', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, datasource= "tranquility",war_id, **kwargs
    ):
        """
                Return details about a war
        
        ---
        
        Alternate route: `/v1/wars/{war_id}/`
        
        Alternate route: `/legacy/wars/{war_id}/`
        
        Alternate route: `/dev/wars/{war_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type datasource: str
        :param datasource: The server name you would like data from

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type war_id: int
        :param war_id: ID for a war

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"datasource" : datasource, "user_agent" : user_agent, "war_id" : war_id, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class WarsDetailKillmails(object):
    base_url = "https://esi.tech.ccp.is/latest/wars/{war_id}/killmails/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of killmail IDs and hashes', 'examples': {'application/json': [{'killmail_hash': '8eef5e8fb6b88fe3407c489df33822b2e3b57a5e', 'killmail_id': 2}, {'killmail_hash': 'b41ccb498ece33d64019f64c0db392aa3aa701fb', 'killmail_id': 1}]}, 'schema': {'title': 'get_wars_war_id_killmails_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_wars_war_id_killmails_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['killmail_id', 'killmail_hash'], 'properties': {'killmail_hash': {'type': 'string', 'description': 'A hash of this killmail', 'title': 'get_wars_war_id_killmails_killmail_hash'}, 'killmail_id': {'type': 'integer', 'format': 'int32', 'description': 'ID of this killmail', 'title': 'get_wars_war_id_killmails_killmail_id'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_wars_war_id_killmails_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_wars_war_id_killmails_500_internal_server_error'}}}}, '422': {'description': 'War not found', 'examples': {'application/json': {'error': 'Unprocessable entity message'}}, 'schema': {'title': 'get_wars_war_id_killmails_unprocessable_entity', 'type': 'object', 'description': 'Unprocessable entity', 'properties': {'error': {'type': 'string', 'description': 'Unprocessable entity message', 'title': 'get_wars_war_id_killmails_422_unprocessable_entity'}}}}}
    parameter = [{'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'page', 'format': 'int32', 'default': 1, 'type': 'integer', 'in': 'query', 'required': False, 'description': 'Which page to query, starting at 1, 2000 killmails per page.'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'war_id', 'format': 'int32', 'description': 'A valid war ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, datasource= "tranquility",page= ,war_id, **kwargs
    ):
        """
                Return a list of kills related to a war
        
        ---
        
        Alternate route: `/v1/wars/{war_id}/killmails/`
        
        Alternate route: `/legacy/wars/{war_id}/killmails/`
        
        Alternate route: `/dev/wars/{war_id}/killmails/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type datasource: str
        :param datasource: The server name you would like data from

        :type page: int
        :param page: Which page to query, starting at 1, 2000 killmails per page.

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type war_id: int
        :param war_id: A valid war ID

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"datasource" : datasource, "page" : page, "user_agent" : user_agent, "war_id" : war_id, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)