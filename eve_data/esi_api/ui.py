# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class UiOpenwindowNewmail(object):
    base_url = "https://esi.tech.ccp.is/latest/ui/openwindow/newmail/"

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_ui_openwindow_newmail_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_ui_openwindow_newmail_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_ui_openwindow_newmail_403_forbidden'}}, 'description': 'Forbidden', 'title': 'post_ui_openwindow_newmail_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-ui.open_window.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Open window request received'}, '422': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Unprocessable entity message', 'title': 'post_ui_openwindow_newmail_422_unprocessable_entity'}}, 'description': 'Unprocessable entity', 'title': 'post_ui_openwindow_newmail_unprocessable_entity'}, 'examples': {'application/json': {'error': 'Unprocessable entity message'}}, 'description': 'Invalid request'}}

    def post(self, new_mail, datasource="tranquility",**kwargs):
        """
                Open the New Mail window, according to settings from the request if applicable
        
        ---
        
        Alternate route: `/v1/ui/openwindow/newmail/`
        
        Alternate route: `/legacy/ui/openwindow/newmail/`
        
        Alternate route: `/dev/ui/openwindow/newmail/`

:type new_mail: None
        :param new_mail: The details of mail to create
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"new_mail" : new_mail, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class UiOpenwindowMarketdetails(object):
    base_url = "https://esi.tech.ccp.is/latest/ui/openwindow/marketdetails/"

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_ui_openwindow_marketdetails_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_ui_openwindow_marketdetails_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_ui_openwindow_marketdetails_403_forbidden'}}, 'description': 'Forbidden', 'title': 'post_ui_openwindow_marketdetails_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-ui.open_window.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Open window request received'}}

    def post(self, type_id, datasource="tranquility",**kwargs):
        """
                Open the market details window for a specific typeID inside the client
        
        ---
        
        Alternate route: `/v1/ui/openwindow/marketdetails/`
        
        Alternate route: `/legacy/ui/openwindow/marketdetails/`
        
        Alternate route: `/dev/ui/openwindow/marketdetails/`

:type type_id: int
        :param type_id: The item type to open in market window
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"type_id" : type_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class UiAutopilotWaypoint(object):
    base_url = "https://esi.tech.ccp.is/latest/ui/autopilot/waypoint/"

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_ui_autopilot_waypoint_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_ui_autopilot_waypoint_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_ui_autopilot_waypoint_403_forbidden'}}, 'description': 'Forbidden', 'title': 'post_ui_autopilot_waypoint_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-ui.write_waypoint.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Open window request received'}}

    def post(self, destination_id, add_to_beginning="False",clear_other_waypoints="False",datasource="tranquility",**kwargs):
        """
                Set a solar system as autopilot waypoint
        
        ---
        
        Alternate route: `/v2/ui/autopilot/waypoint/`
        
        Alternate route: `/dev/ui/autopilot/waypoint/`

:type destination_id: int
        :param destination_id: The destination to travel to, can be solar system, station or structure's id
:type add_to_beginning: boolean
        :param add_to_beginning: Whether this solar system should be added to the beginning of all waypoints
:type clear_other_waypoints: boolean
        :param clear_other_waypoints: Whether clean other waypoints beforing adding this one
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"destination_id" : destination_id, "add_to_beginning" : add_to_beginning, "clear_other_waypoints" : clear_other_waypoints, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class UiOpenwindowContract(object):
    base_url = "https://esi.tech.ccp.is/latest/ui/openwindow/contract/"

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_ui_openwindow_contract_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_ui_openwindow_contract_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_ui_openwindow_contract_403_forbidden'}}, 'description': 'Forbidden', 'title': 'post_ui_openwindow_contract_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-ui.open_window.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Open window request received'}}

    def post(self, contract_id, datasource="tranquility",**kwargs):
        """
                Open the contract window inside the client
        
        ---
        
        Alternate route: `/v1/ui/openwindow/contract/`
        
        Alternate route: `/legacy/ui/openwindow/contract/`
        
        Alternate route: `/dev/ui/openwindow/contract/`

:type contract_id: int
        :param contract_id: The contract to open
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"contract_id" : contract_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class UiOpenwindowInformation(object):
    base_url = "https://esi.tech.ccp.is/latest/ui/openwindow/information/"

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_ui_openwindow_information_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_ui_openwindow_information_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'post_ui_openwindow_information_403_forbidden'}}, 'description': 'Forbidden', 'title': 'post_ui_openwindow_information_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-ui.open_window.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Open window request received'}}

    def post(self, target_id, datasource="tranquility",**kwargs):
        """
                Open the information window for a character, corporation or alliance inside the client
        
        ---
        
        Alternate route: `/v1/ui/openwindow/information/`
        
        Alternate route: `/legacy/ui/openwindow/information/`
        
        Alternate route: `/dev/ui/openwindow/information/`

:type target_id: int
        :param target_id: The target to open
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"target_id" : target_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)