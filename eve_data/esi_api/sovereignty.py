# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class SovereigntyCampaigns(object):
    base_url = "https://esi.tech.ccp.is/latest/sovereignty/campaigns/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_sovereignty_campaigns_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_sovereignty_campaigns_500_internal_server_error'}}}}, '200': {'examples': {'application/json': [{'event_type': 'station_defense', 'solar_system_id': 30000856, 'start_time': '2016-10-29T14:34:40Z', 'defender_score': 0.6, 'structure_id': 61001096, 'defender_id': 1695357456, 'campaign_id': 32833, 'constellation_id': 20000125, 'attackers_score': 0.4}]}, 'description': 'A list of sovereignty campaigns', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['campaign_id', 'structure_id', 'solar_system_id', 'constellation_id', 'event_type', 'start_time'], 'description': '200 ok object', 'title': 'get_sovereignty_campaigns_200_ok', 'type': 'object', 'properties': {'event_type': {'enum': ['tcu_defense', 'ihub_defense', 'station_defense', 'station_freeport'], 'description': 'Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as "Defense Events", station_freeport as "Freeport Events".\n', 'type': 'string', 'title': 'get_sovereignty_campaigns_event_type'}, 'solar_system_id': {'description': 'The solar system the structure is located in.\n', 'format': 'int32', 'type': 'integer', 'title': 'get_sovereignty_campaigns_solar_system_id'}, 'start_time': {'description': 'Time the event is scheduled to start.\n', 'format': 'date-time', 'type': 'string', 'title': 'get_sovereignty_campaigns_start_time'}, 'defender_score': {'description': 'Score for the defending alliance, only present in Defense Events.\n', 'format': 'float', 'type': 'number', 'title': 'get_sovereignty_campaigns_defender_score'}, 'participants': {'description': 'Alliance participating and their respective scores, only present in Freeport Events.\n', 'items': {'required': ['alliance_id', 'score'], 'description': 'participant object', 'title': 'get_sovereignty_campaigns_participant', 'type': 'object', 'properties': {'score': {'description': 'score number', 'format': 'float', 'type': 'number', 'title': 'get_sovereignty_campaigns_score'}, 'alliance_id': {'description': 'alliance_id integer', 'format': 'int32', 'type': 'integer', 'title': 'get_sovereignty_campaigns_alliance_id'}}}, 'type': 'array', 'title': 'get_sovereignty_campaigns_participants'}, 'structure_id': {'description': 'The structure item ID that is related to this campaign.\n', 'format': 'int64', 'type': 'integer', 'title': 'get_sovereignty_campaigns_structure_id'}, 'defender_id': {'description': 'Defending alliance, only present in Defense Events\n', 'format': 'int32', 'type': 'integer', 'title': 'get_sovereignty_campaigns_defender_id'}, 'campaign_id': {'description': 'Unique ID for this campaign.', 'format': 'int32', 'type': 'integer', 'title': 'get_sovereignty_campaigns_campaign_id'}, 'constellation_id': {'description': 'The constellation in which the campaign will take place.\n', 'format': 'int32', 'type': 'integer', 'title': 'get_sovereignty_campaigns_constellation_id'}, 'attackers_score': {'description': 'Score for all attacking parties, only present in Defense Events.\n', 'format': 'float', 'type': 'number', 'title': 'get_sovereignty_campaigns_attackers_score'}}}, 'type': 'array', 'title': 'get_sovereignty_campaigns_ok'}}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Shows sovereignty data for campaigns.
        
        ---
        
        Alternate route: `/v1/sovereignty/campaigns/`
        
        Alternate route: `/legacy/sovereignty/campaigns/`
        
        Alternate route: `/dev/sovereignty/campaigns/`
        
        
        ---
        
        This route is cached for up to 5 seconds


:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class SovereigntyStructures(object):
    base_url = "https://esi.tech.ccp.is/latest/sovereignty/structures/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_sovereignty_structures_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_sovereignty_structures_500_internal_server_error'}}}}, '200': {'examples': {'application/json': [{'solar_system_id': 30000570, 'structure_id': 1018253388776, 'vulnerable_start_time': '2016-10-28T20:30:00Z', 'vulnerable_end_time': '2016-10-29T05:30:00Z', 'vulnerability_occupancy_level': 2, 'structure_type_id': 32226, 'alliance_id': 498125261}]}, 'description': 'A list of sovereignty structures', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok array', 'items': {'required': ['alliance_id', 'solar_system_id', 'structure_id', 'structure_type_id'], 'description': '200 ok object', 'title': 'get_sovereignty_structures_200_ok', 'type': 'object', 'properties': {'solar_system_id': {'description': 'Solar system in which the structure is located.\n', 'format': 'int32', 'type': 'integer', 'title': 'get_sovereignty_structures_solar_system_id'}, 'structure_id': {'description': 'Unique item ID for this structure.', 'format': 'int64', 'type': 'integer', 'title': 'get_sovereignty_structures_structure_id'}, 'vulnerable_start_time': {'description': 'The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.\n', 'format': 'date-time', 'type': 'string', 'title': 'get_sovereignty_structures_vulnerable_start_time'}, 'vulnerable_end_time': {'description': "The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.\n", 'format': 'date-time', 'type': 'string', 'title': 'get_sovereignty_structures_vulnerable_end_time'}, 'vulnerability_occupancy_level': {'description': 'The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.\n', 'format': 'float', 'type': 'number', 'title': 'get_sovereignty_structures_vulnerability_occupancy_level'}, 'structure_type_id': {'description': 'A reference to the type of structure this is.\n', 'format': 'int32', 'type': 'integer', 'title': 'get_sovereignty_structures_structure_type_id'}, 'alliance_id': {'description': 'The alliance that owns the structure.\n', 'format': 'int32', 'type': 'integer', 'title': 'get_sovereignty_structures_alliance_id'}}}, 'type': 'array', 'title': 'get_sovereignty_structures_ok'}}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Shows sovereignty data for structures.
        
        ---
        
        Alternate route: `/v1/sovereignty/structures/`
        
        Alternate route: `/legacy/sovereignty/structures/`
        
        Alternate route: `/dev/sovereignty/structures/`
        
        
        ---
        
        This route is cached for up to 120 seconds


:type datasource: str
        :param datasource: The server name you would like data from
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)