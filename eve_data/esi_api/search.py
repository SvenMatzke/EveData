# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class Search(object):
    base_url = "https://esi.tech.ccp.is/latest/search/"

    get_responses = {'500': {'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error', 'schema': {'description': 'Internal server error', 'title': 'get_search_internal_server_error', 'type': 'object', 'properties': {'error': {'description': 'Internal server error message', 'type': 'string', 'title': 'get_search_500_internal_server_error'}}}}, '200': {'examples': {'application/json': {'station': [60004588, 60004594, 60005725, 60009106, 60012721, 60012724, 60012727], 'solarsystem': [30002510]}}, 'description': 'A list of search results', 'headers': {'Last-Modified': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}, 'Cache-Control': {'description': 'The caching mechanism used', 'type': 'string'}, 'Expires': {'description': 'RFC7231 formatted datetime string', 'type': 'string'}}, 'schema': {'description': '200 ok object', 'title': 'get_search_ok', 'type': 'object', 'properties': {'region': {'description': 'region array', 'items': {'description': 'region integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_region'}, 'type': 'array', 'title': 'get_search_region'}, 'station': {'description': 'station array', 'items': {'description': 'station integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_station'}, 'type': 'array', 'title': 'get_search_station'}, 'solarsystem': {'description': 'solarsystem array', 'items': {'description': 'solarsystem integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_solarsystem'}, 'type': 'array', 'title': 'get_search_solarsystem'}, 'constellation': {'description': 'constellation array', 'items': {'description': 'constellation integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_constellation'}, 'type': 'array', 'title': 'get_search_constellation'}, 'agent': {'description': 'agent array', 'items': {'description': 'agent integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_agent'}, 'type': 'array', 'title': 'get_search_agent'}, 'alliance': {'description': 'alliance array', 'items': {'description': 'alliance integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_alliance'}, 'type': 'array', 'title': 'get_search_alliance'}, 'character': {'description': 'character array', 'items': {'description': 'character integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_character'}, 'type': 'array', 'title': 'get_search_character'}, 'inventorytype': {'description': 'inventorytype array', 'items': {'description': 'inventorytype integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_inventorytype'}, 'type': 'array', 'title': 'get_search_inventorytype'}, 'corporation': {'description': 'corporation array', 'items': {'description': 'corporation integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_corporation'}, 'type': 'array', 'title': 'get_search_corporation'}, 'faction': {'description': 'faction array', 'items': {'description': 'faction integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_faction'}, 'type': 'array', 'title': 'get_search_faction'}, 'wormhole': {'description': 'wormhole array', 'items': {'description': 'wormhole integer', 'format': 'int32', 'type': 'integer', 'title': 'get_search_wormhole'}, 'type': 'array', 'title': 'get_search_wormhole'}}}}}

    def get(self, categories, search, datasource="tranquility",language="en-us",strict="False",**kwargs):
        """
                Search for entities that match a given sub-string.
        
        ---
        
        Alternate route: `/v1/search/`
        
        Alternate route: `/legacy/search/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type categories: list
        :param categories: Type of entities to search for:type search: str
        :param search: The string to search on
:type datasource: str
        :param datasource: The server name you would like data from:type language: str
        :param language: Search locale:type strict: boolean
        :param strict: Whether the search should be a strict match
        :param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"categories" : categories, "search" : search, "datasource" : datasource, "language" : language, "strict" : strict, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)