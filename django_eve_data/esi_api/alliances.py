# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class AlliancesDetailIcons(object):
    base_url = "https://esi.tech.ccp.is/latest/alliances/{alliance_id}/icons/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_alliances_alliance_id_icons_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_alliances_alliance_id_icons_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'type': 'object', 'properties': {'px64x64': {'type': 'string', 'description': 'px64x64 string', 'title': 'get_alliances_alliance_id_icons_px64x64'}, 'px128x128': {'type': 'string', 'description': 'px128x128 string', 'title': 'get_alliances_alliance_id_icons_px128x128'}}, 'description': '200 ok object', 'title': 'get_alliances_alliance_id_icons_ok'}, 'examples': {'application/json': {'px64x64': 'https://imageserver.eveonline.com/Alliance/503818424_64.png', 'px128x128': 'https://imageserver.eveonline.com/Alliance/503818424_128.png'}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Urls for icons for the given alliance id and server'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'error message', 'title': 'get_alliances_alliance_id_icons_error'}}, 'description': 'No image server for this datasource', 'title': 'get_alliances_alliance_id_icons_not_found'}, 'examples': {'application/json': {'error': 'No image server for this datasource'}}, 'description': 'No image server for this datasource'}}

    def get(self, alliance_id, datasource="tranquility",**kwargs):
        """
                Get the icon urls for a alliance
        
        ---
        
        Alternate route: `/v1/alliances/{alliance_id}/icons/`
        
        Alternate route: `/legacy/alliances/{alliance_id}/icons/`
        
        Alternate route: `/dev/alliances/{alliance_id}/icons/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type alliance_id: int
        :param alliance_id: An EVE alliance ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"alliance_id" : alliance_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class AlliancesDetailCorporations(object):
    base_url = "https://esi.tech.ccp.is/latest/alliances/{alliance_id}/corporations/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_alliances_alliance_id_corporations_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_alliances_alliance_id_corporations_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int32', 'minimum': 0, 'type': 'integer', 'uniqueItems': True, 'description': '200 ok integer', 'title': 'get_alliances_alliance_id_corporations_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_alliances_alliance_id_corporations_ok'}, 'examples': {'application/json': [98000001]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of corporation IDs'}}

    def get(self, alliance_id, datasource="tranquility",**kwargs):
        """
                List all current member corporations of an alliance
        
        ---
        
        Alternate route: `/v1/alliances/{alliance_id}/corporations/`
        
        Alternate route: `/legacy/alliances/{alliance_id}/corporations/`
        
        Alternate route: `/dev/alliances/{alliance_id}/corporations/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type alliance_id: int
        :param alliance_id: An EVE alliance ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"alliance_id" : alliance_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class AlliancesDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/alliances/{alliance_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_alliances_alliance_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_alliances_alliance_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_alliances_alliance_id_ok', 'type': 'object', 'properties': {'executor_corp': {'format': 'int32', 'type': 'integer', 'description': 'the executor corporation ID, if this alliance is not closed', 'title': 'get_alliances_alliance_id_executor_corp'}, 'date_founded': {'format': 'date-time', 'type': 'string', 'description': 'date_founded string', 'title': 'get_alliances_alliance_id_date_founded'}, 'alliance_name': {'type': 'string', 'description': 'the full name of the alliance', 'title': 'get_alliances_alliance_id_alliance_name'}, 'ticker': {'type': 'string', 'description': 'the short name of the alliance', 'title': 'get_alliances_alliance_id_ticker'}}, 'description': '200 ok object', 'required': ['alliance_name', 'ticker', 'date_founded']}, 'examples': {'application/json': {'executor_corp': 98356193, 'date_founded': '2016-06-26T21:00:00Z', 'alliance_name': 'C C P Alliance', 'ticker': '<C C P>'}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Public data about an alliance'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'error message', 'title': 'get_alliances_alliance_id_error'}}, 'description': 'Alliance not found', 'title': 'get_alliances_alliance_id_not_found'}, 'examples': {'application/json': {'error': 'Alliance not found'}}, 'description': 'Alliance not found'}}

    def get(self, alliance_id, datasource="tranquility",**kwargs):
        """
                Public information about an alliance
        
        ---
        
        Alternate route: `/v2/alliances/{alliance_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type alliance_id: int
        :param alliance_id: An Eve alliance ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"alliance_id" : alliance_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class AlliancesNames(object):
    base_url = "https://esi.tech.ccp.is/latest/alliances/names/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_alliances_names_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_alliances_names_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_alliances_names_200_ok', 'type': 'object', 'properties': {'alliance_name': {'type': 'string', 'description': 'alliance_name string', 'title': 'get_alliances_names_alliance_name'}, 'alliance_id': {'format': 'int32', 'type': 'integer', 'description': 'alliance_id integer', 'title': 'get_alliances_names_alliance_id'}}, 'description': '200 ok object', 'required': ['alliance_id', 'alliance_name']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_alliances_names_ok'}, 'examples': {'application/json': [{'alliance_name': 'Republic University', 'alliance_id': 1000171}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of id/name associations'}}

    def get(self, alliance_ids, datasource="tranquility",**kwargs):
        """
                Resolve a set of alliance IDs to alliance names
        
        ---
        
        Alternate route: `/v1/alliances/names/`
        
        Alternate route: `/legacy/alliances/names/`
        
        Alternate route: `/dev/alliances/names/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type alliance_ids: list
        :param alliance_ids: A comma separated list of alliance IDs
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"alliance_ids" : alliance_ids, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class Alliances(object):
    base_url = "https://esi.tech.ccp.is/latest/alliances/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_alliances_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_alliances_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int32', 'minimum': 0, 'type': 'integer', 'uniqueItems': True, 'description': '200 ok integer', 'title': 'get_alliances_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_alliances_ok'}, 'examples': {'application/json': [99000001, 99000002]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of Alliance IDs'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                List all active player alliances
        
        ---
        
        Alternate route: `/v1/alliances/`
        
        Alternate route: `/legacy/alliances/`
        
        Alternate route: `/dev/alliances/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)