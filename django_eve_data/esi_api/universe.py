# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class UniverseConstellationsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/constellations/{constellation_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_constellations_constellation_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_constellations_constellation_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_constellations_constellation_id_ok', 'type': 'object', 'properties': {'position': {'title': 'get_universe_constellations_constellation_id_position', 'type': 'object', 'properties': {'x': {'format': 'float', 'type': 'number', 'description': 'x number', 'title': 'get_universe_constellations_constellation_id_x'}, 'y': {'format': 'float', 'type': 'number', 'description': 'y number', 'title': 'get_universe_constellations_constellation_id_y'}, 'z': {'format': 'float', 'type': 'number', 'description': 'z number', 'title': 'get_universe_constellations_constellation_id_z'}}, 'description': 'position object', 'required': ['x', 'y', 'z']}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_constellations_constellation_id_name'}, 'region_id': {'format': 'int32', 'type': 'integer', 'description': 'The region this constellation is in', 'title': 'get_universe_constellations_constellation_id_region_id'}, 'constellation_id': {'format': 'int32', 'type': 'integer', 'description': 'constellation_id integer', 'title': 'get_universe_constellations_constellation_id_constellation_id'}, 'systems': {'items': {'format': 'int32', 'type': 'integer', 'description': 'system integer', 'title': 'get_universe_constellations_constellation_id_system'}, 'type': 'array', 'description': 'systems array', 'title': 'get_universe_constellations_constellation_id_systems'}}, 'description': '200 ok object', 'required': ['constellation_id', 'name', 'position', 'region_id', 'systems']}, 'examples': {'application/json': {'position': {'x': 67796138757472320, 'y': -70591121348560960, 'z': -59587016159270070}, 'name': 'Mekashtad', 'region_id': 10000001, 'constellation_id': 20000009, 'systems': [20000302, 20000303]}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Content-Language': {'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'description': 'The language used in the response'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about a constellation'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_constellations_constellation_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_constellations_constellation_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Constellation not found'}}

    def get(self, constellation_id, datasource="tranquility",language="en-us",**kwargs):
        """
                Get information on a constellation
        
        ---
        
        Alternate route: `/v1/universe/constellations/{constellation_id}/`
        
        Alternate route: `/legacy/universe/constellations/{constellation_id}/`
        
        Alternate route: `/dev/universe/constellations/{constellation_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type constellation_id: int
        :param constellation_id: constellation_id integer
:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Language to use in the response
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"constellation_id" : constellation_id, "datasource" : datasource, "language" : language, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseStructures(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/structures/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_structures_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_structures_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int64', 'minimum': 0, 'type': 'integer', 'uniqueItems': True, 'description': '200 ok integer', 'title': 'get_universe_structures_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_structures_ok'}, 'examples': {'application/json': [1000000017013, 1000000025062]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of public structure IDs'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                List all public structures
        
        ---
        
        Alternate route: `/v1/universe/structures/`
        
        Alternate route: `/legacy/universe/structures/`
        
        Alternate route: `/dev/universe/structures/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseStructuresDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/structures/{structure_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_structures_structure_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_structures_structure_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_universe_structures_structure_id_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_universe_structures_structure_id_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-universe.read_structures.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'title': 'get_universe_structures_structure_id_ok', 'type': 'object', 'properties': {'solar_system_id': {'format': 'int32', 'type': 'integer', 'description': 'solar_system_id integer', 'title': 'get_universe_structures_structure_id_solar_system_id'}, 'position': {'title': 'get_universe_structures_structure_id_position', 'type': 'object', 'properties': {'x': {'format': 'float', 'type': 'number', 'description': 'x number', 'title': 'get_universe_structures_structure_id_x'}, 'y': {'format': 'float', 'type': 'number', 'description': 'y number', 'title': 'get_universe_structures_structure_id_y'}, 'z': {'format': 'float', 'type': 'number', 'description': 'z number', 'title': 'get_universe_structures_structure_id_z'}}, 'description': 'Coordinates of the structure in Cartesian space relative to the Sun, in metres.\n', 'required': ['x', 'y', 'z']}, 'name': {'type': 'string', 'description': 'The full name of the structure', 'title': 'get_universe_structures_structure_id_name'}, 'type_id': {'format': 'int32', 'type': 'integer', 'description': 'type_id integer', 'title': 'get_universe_structures_structure_id_type_id'}}, 'description': '200 ok object', 'required': ['name', 'solar_system_id']}, 'examples': {'application/json': {'solar_system_id': 30000142, 'name': 'V-3YG7 VI - The Capital'}}, 'description': 'Data about a structure'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_structures_structure_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_structures_structure_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Structure not found'}}

    def get(self, structure_id, datasource="tranquility",**kwargs):
        """
                Returns information on requested structure, if you are on the ACL. Otherwise, returns "Forbidden" for all inputs.
        
        ---
        
        Alternate route: `/v1/universe/structures/{structure_id}/`
        
        Alternate route: `/legacy/universe/structures/{structure_id}/`
        
        Alternate route: `/dev/universe/structures/{structure_id}/`

:type structure_id: int
        :param structure_id: An Eve structure ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"structure_id" : structure_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseGroups(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/groups/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_groups_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_groups_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int32', 'type': 'integer', 'description': '200 ok integer', 'title': 'get_universe_groups_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_groups_ok'}, 'examples': {'application/json': [1, 2, 3]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of item group ids'}}

    def get(self, datasource="tranquility",page=1,**kwargs):
        """
                Get a list of item groups
        
        ---
        
        Alternate route: `/v1/universe/groups/`
        
        Alternate route: `/legacy/universe/groups/`
        
        Alternate route: `/dev/universe/groups/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:type page: int
        :param page: Which page to query
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, "page" : page, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseCategories(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/categories/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_categories_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_categories_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int32', 'type': 'integer', 'description': '200 ok integer', 'title': 'get_universe_categories_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_categories_ok'}, 'examples': {'application/json': [1, 2, 3]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of item category ids'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Get a list of item categories
        
        ---
        
        Alternate route: `/v1/universe/categories/`
        
        Alternate route: `/legacy/universe/categories/`
        
        Alternate route: `/dev/universe/categories/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseNames(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/names/"

    post_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'post_universe_names_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'post_universe_names_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'post_universe_names_200_ok', 'type': 'object', 'properties': {'category': {'enum': ['alliance', 'character', 'constellation', 'corporation', 'inventory_type', 'region', 'solar_system', 'station'], 'type': 'string', 'description': 'category string', 'title': 'post_universe_names_category'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'post_universe_names_name'}, 'id': {'format': 'int32', 'type': 'integer', 'description': 'id integer', 'title': 'post_universe_names_id'}}, 'description': '200 ok object', 'required': ['id', 'name', 'category']}, 'type': 'array', 'description': '200 ok array', 'title': 'post_universe_names_ok'}, 'examples': {'application/json': [{'category': 'character', 'name': 'CCP Bartender', 'id': 95465499}, {'category': 'solar_system', 'name': 'Jita', 'id': 30000142}]}, 'description': "List of id/name associations for a set of ID's. ID's that cannot be resolved are not returned."}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'post_universe_names_404_not_found'}}, 'description': 'Not found', 'title': 'post_universe_names_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'no valid IDs found'}}

    def post(self, ids, datasource="tranquility",**kwargs):
        """
                Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types.
        
        ---
        
        Alternate route: `/v2/universe/names/`
        
        Alternate route: `/dev/universe/names/`

:type ids: None
        :param ids: The ids to resolve
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"ids" : ids, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.post_responses) \
            .post(**kwargs_dict)


class UniverseMoonsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/moons/{moon_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_moons_moon_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_moons_moon_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_moons_moon_id_ok', 'type': 'object', 'properties': {'position': {'title': 'get_universe_moons_moon_id_position', 'type': 'object', 'properties': {'x': {'format': 'float', 'type': 'number', 'description': 'x number', 'title': 'get_universe_moons_moon_id_x'}, 'y': {'format': 'float', 'type': 'number', 'description': 'y number', 'title': 'get_universe_moons_moon_id_y'}, 'z': {'format': 'float', 'type': 'number', 'description': 'z number', 'title': 'get_universe_moons_moon_id_z'}}, 'description': 'position object', 'required': ['x', 'y', 'z']}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_moons_moon_id_name'}, 'system_id': {'format': 'int32', 'type': 'integer', 'description': 'The solar system this moon is in', 'title': 'get_universe_moons_moon_id_system_id'}, 'moon_id': {'format': 'int32', 'type': 'integer', 'description': 'moon_id integer', 'title': 'get_universe_moons_moon_id_moon_id'}}, 'description': '200 ok object', 'required': ['moon_id', 'name', 'position', 'system_id']}, 'examples': {'application/json': {'position': {'x': 58605102008, 'y': -3066616285, 'z': -55193617920}, 'name': 'Akpivem I - Moon 1', 'system_id': 30000003, 'moon_id': 40000042}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about a moon'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_moons_moon_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_moons_moon_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Moon not found'}}

    def get(self, moon_id, datasource="tranquility",**kwargs):
        """
                Get information on a moon
        
        ---
        
        Alternate route: `/v1/universe/moons/{moon_id}/`
        
        Alternate route: `/legacy/universe/moons/{moon_id}/`
        
        Alternate route: `/dev/universe/moons/{moon_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type moon_id: int
        :param moon_id: moon_id integer
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"moon_id" : moon_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseConstellations(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/constellations/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_constellations_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_constellations_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int32', 'type': 'integer', 'description': '200 ok integer', 'title': 'get_universe_constellations_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_constellations_ok'}, 'examples': {'application/json': [20000001, 20000002]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of constellation ids'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Get a list of constellations
        
        ---
        
        Alternate route: `/v1/universe/constellations/`
        
        Alternate route: `/legacy/universe/constellations/`
        
        Alternate route: `/dev/universe/constellations/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseSystemsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/systems/{system_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_systems_system_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_systems_system_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_systems_system_id_ok', 'type': 'object', 'properties': {'security_class': {'type': 'string', 'description': 'security_class string', 'title': 'get_universe_systems_system_id_security_class'}, 'constellation_id': {'format': 'int32', 'type': 'integer', 'description': 'The constellation this solar system is in', 'title': 'get_universe_systems_system_id_constellation_id'}, 'security_status': {'format': 'float', 'type': 'number', 'description': 'security_status number', 'title': 'get_universe_systems_system_id_security_status'}, 'stargates': {'items': {'format': 'int32', 'type': 'integer', 'description': 'stargate integer', 'title': 'get_universe_systems_system_id_stargate'}, 'type': 'array', 'description': 'stargates array', 'title': 'get_universe_systems_system_id_stargates'}, 'position': {'title': 'get_universe_systems_system_id_position', 'type': 'object', 'properties': {'x': {'format': 'float', 'type': 'number', 'description': 'x number', 'title': 'get_universe_systems_system_id_x'}, 'y': {'format': 'float', 'type': 'number', 'description': 'y number', 'title': 'get_universe_systems_system_id_y'}, 'z': {'format': 'float', 'type': 'number', 'description': 'z number', 'title': 'get_universe_systems_system_id_z'}}, 'description': 'position object', 'required': ['x', 'y', 'z']}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_systems_system_id_name'}, 'system_id': {'format': 'int32', 'type': 'integer', 'description': 'system_id integer', 'title': 'get_universe_systems_system_id_system_id'}, 'planets': {'items': {'title': 'get_universe_systems_system_id_planet', 'type': 'object', 'properties': {'planet_id': {'format': 'int32', 'type': 'integer', 'description': 'planet_id integer', 'title': 'get_universe_systems_system_id_planet_id'}, 'moons': {'items': {'format': 'int32', 'type': 'integer', 'description': 'moon integer', 'title': 'get_universe_systems_system_id_moon'}, 'type': 'array', 'description': 'moons array', 'title': 'get_universe_systems_system_id_moons'}}, 'description': 'planet object', 'required': ['planet_id']}, 'type': 'array', 'description': 'planets array', 'title': 'get_universe_systems_system_id_planets'}}, 'description': '200 ok object', 'required': ['system_id', 'name', 'position', 'security_status', 'constellation_id', 'planets', 'stargates']}, 'examples': {'application/json': {'security_class': 'B', 'constellation_id': 20000001, 'security_status': 0.8462923765182495, 'stargates': [50000342], 'position': {'x': -91174141133075340, 'y': 43938227486247170, 'z': -56482824383339900}, 'name': 'Akpivem', 'system_id': 30000003, 'planets': [{'planet_id': 40000041, 'moons': [40000042]}, {'planet_id': 40000043}]}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Content-Language': {'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'description': 'The language used in the response'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about a solar system'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_systems_system_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_systems_system_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Solar system not found'}}

    def get(self, system_id, datasource="tranquility",language="en-us",**kwargs):
        """
                Get information on a solar system
        
        ---
        
        Alternate route: `/v2/universe/systems/{system_id}/`
        
        Alternate route: `/dev/universe/systems/{system_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type system_id: int
        :param system_id: system_id integer
:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Language to use in the response
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"system_id" : system_id, "datasource" : datasource, "language" : language, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseRaces(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/races/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_races_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_races_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_universe_races_200_ok', 'type': 'object', 'properties': {'race_id': {'format': 'int32', 'type': 'integer', 'description': 'race_id integer', 'title': 'get_universe_races_race_id'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_races_name'}, 'alliance_id': {'format': 'int32', 'type': 'integer', 'description': 'The alliance generally associated with this race', 'title': 'get_universe_races_alliance_id'}, 'description': {'type': 'string', 'description': 'description string', 'title': 'get_universe_races_description'}}, 'description': '200 ok object', 'required': ['race_id', 'name', 'description', 'alliance_id']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_races_ok'}, 'examples': {'application/json': [{'race_id': 1, 'name': 'Caldari', 'alliance_id': 500001, 'description': 'Founded on the tenets of patriotism and hard work...'}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Content-Language': {'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'description': 'The language used in the response'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of character races'}}

    def get(self, datasource="tranquility",language="en-us",**kwargs):
        """
                Get a list of character races
        
        ---
        
        Alternate route: `/v1/universe/races/`
        
        Alternate route: `/legacy/universe/races/`
        
        Alternate route: `/dev/universe/races/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Language to use in the response
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, "language" : language, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseFactions(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/factions/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_factions_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_factions_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_universe_factions_200_ok', 'type': 'object', 'properties': {'size_factor': {'format': 'float', 'type': 'number', 'description': 'size_factor number', 'title': 'get_universe_factions_size_factor'}, 'corporation_id': {'format': 'int32', 'type': 'integer', 'description': 'corporation_id integer', 'title': 'get_universe_factions_corporation_id'}, 'station_system_count': {'format': 'int32', 'type': 'integer', 'description': 'station_system_count integer', 'title': 'get_universe_factions_station_system_count'}, 'is_unique': {'type': 'boolean', 'description': 'is_unique boolean', 'title': 'get_universe_factions_is_unique'}, 'description': {'type': 'string', 'description': 'description string', 'title': 'get_universe_factions_description'}, 'faction_id': {'format': 'int32', 'type': 'integer', 'description': 'faction_id integer', 'title': 'get_universe_factions_faction_id'}, 'solar_system_id': {'format': 'int32', 'type': 'integer', 'description': 'solar_system_id integer', 'title': 'get_universe_factions_solar_system_id'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_factions_name'}, 'militia_corporation_id': {'format': 'int32', 'type': 'integer', 'description': 'militia_corporation_id integer', 'title': 'get_universe_factions_militia_corporation_id'}, 'station_count': {'format': 'int32', 'type': 'integer', 'description': 'station_count integer', 'title': 'get_universe_factions_station_count'}}, 'description': '200 ok object', 'required': ['faction_id', 'name', 'description', 'solar_system_id', 'corporation_id', 'size_factor', 'station_count', 'station_system_count', 'is_unique']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_factions_ok'}, 'examples': {'application/json': [{'corporation_id': 456, 'station_system_count': 100, 'is_unique': True, 'size_factor': 1.0, 'faction_id': 1, 'solar_system_id': 123, 'name': 'Faction', 'description': 'blah blah', 'station_count': 1000}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Content-Language': {'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'description': 'The language used in the response'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of factions'}}

    def get(self, datasource="tranquility",language="en-us",**kwargs):
        """
                Get a list of factions
        
        ---
        
        Alternate route: `/v1/universe/factions/`
        
        Alternate route: `/legacy/universe/factions/`
        
        Alternate route: `/dev/universe/factions/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Language to use in the response
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, "language" : language, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseSystems(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/systems/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_systems_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_systems_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int32', 'type': 'integer', 'description': '200 ok integer', 'title': 'get_universe_systems_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_systems_ok'}, 'examples': {'application/json': [30000001, 30000002]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of solar system ids'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Get a list of solar systems
        
        ---
        
        Alternate route: `/v1/universe/systems/`
        
        Alternate route: `/legacy/universe/systems/`
        
        Alternate route: `/dev/universe/systems/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseTypes(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/types/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_types_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_types_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int32', 'type': 'integer', 'description': '200 ok integer', 'title': 'get_universe_types_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_types_ok'}, 'examples': {'application/json': [1, 2, 3]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of type ids'}}

    def get(self, datasource="tranquility",page=1,**kwargs):
        """
                Get a list of type ids
        
        ---
        
        Alternate route: `/v1/universe/types/`
        
        Alternate route: `/legacy/universe/types/`
        
        Alternate route: `/dev/universe/types/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:type page: int
        :param page: Which page to query
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, "page" : page, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniversePlanetsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/planets/{planet_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_planets_planet_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_planets_planet_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_planets_planet_id_ok', 'type': 'object', 'properties': {'type_id': {'format': 'int32', 'type': 'integer', 'description': 'type_id integer', 'title': 'get_universe_planets_planet_id_type_id'}, 'position': {'title': 'get_universe_planets_planet_id_position', 'type': 'object', 'properties': {'x': {'format': 'float', 'type': 'number', 'description': 'x number', 'title': 'get_universe_planets_planet_id_x'}, 'y': {'format': 'float', 'type': 'number', 'description': 'y number', 'title': 'get_universe_planets_planet_id_y'}, 'z': {'format': 'float', 'type': 'number', 'description': 'z number', 'title': 'get_universe_planets_planet_id_z'}}, 'description': 'position object', 'required': ['x', 'y', 'z']}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_planets_planet_id_name'}, 'planet_id': {'format': 'int32', 'type': 'integer', 'description': 'planet_id integer', 'title': 'get_universe_planets_planet_id_planet_id'}, 'system_id': {'format': 'int32', 'type': 'integer', 'description': 'The solar system this planet is in', 'title': 'get_universe_planets_planet_id_system_id'}}, 'description': '200 ok object', 'required': ['planet_id', 'name', 'type_id', 'position', 'system_id']}, 'examples': {'application/json': {'type_id': 13, 'position': {'x': -189226344497, 'y': 9901605317, 'z': -254852632979}, 'name': 'Akpivem III', 'planet_id': 40000046, 'system_id': 30000003}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about a planet'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_planets_planet_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_planets_planet_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Planet not found'}}

    def get(self, planet_id, datasource="tranquility",**kwargs):
        """
                Get information on a planet
        
        ---
        
        Alternate route: `/v1/universe/planets/{planet_id}/`
        
        Alternate route: `/legacy/universe/planets/{planet_id}/`
        
        Alternate route: `/dev/universe/planets/{planet_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type planet_id: int
        :param planet_id: planet_id integer
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"planet_id" : planet_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseRegionsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/regions/{region_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_regions_region_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_regions_region_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_regions_region_id_ok', 'type': 'object', 'properties': {'constellations': {'items': {'format': 'int32', 'type': 'integer', 'description': 'constellation integer', 'title': 'get_universe_regions_region_id_constellation'}, 'type': 'array', 'description': 'constellations array', 'title': 'get_universe_regions_region_id_constellations'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_regions_region_id_name'}, 'region_id': {'format': 'int32', 'type': 'integer', 'description': 'region_id integer', 'title': 'get_universe_regions_region_id_region_id'}, 'description': {'type': 'string', 'description': 'description string', 'title': 'get_universe_regions_region_id_description'}}, 'description': '200 ok object', 'required': ['region_id', 'name', 'constellations']}, 'examples': {'application/json': {'constellations': [20000302, 20000303], 'name': 'Metropolis', 'region_id': 10000042, 'description': 'It has long been an established fact of civilization...'}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Content-Language': {'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'description': 'The language used in the response'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about a region'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_regions_region_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_regions_region_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Region not found'}}

    def get(self, region_id, datasource="tranquility",language="en-us",**kwargs):
        """
                Get information on a region
        
        ---
        
        Alternate route: `/v1/universe/regions/{region_id}/`
        
        Alternate route: `/legacy/universe/regions/{region_id}/`
        
        Alternate route: `/dev/universe/regions/{region_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type region_id: int
        :param region_id: region_id integer
:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Language to use in the response
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"region_id" : region_id, "datasource" : datasource, "language" : language, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseStargatesDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/stargates/{stargate_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_stargates_stargate_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_stargates_stargate_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_stargates_stargate_id_ok', 'type': 'object', 'properties': {'system_id': {'format': 'int32', 'type': 'integer', 'description': 'The solar system this stargate is in', 'title': 'get_universe_stargates_stargate_id_system_id'}, 'position': {'title': 'get_universe_stargates_stargate_id_position', 'type': 'object', 'properties': {'x': {'format': 'float', 'type': 'number', 'description': 'x number', 'title': 'get_universe_stargates_stargate_id_x'}, 'y': {'format': 'float', 'type': 'number', 'description': 'y number', 'title': 'get_universe_stargates_stargate_id_y'}, 'z': {'format': 'float', 'type': 'number', 'description': 'z number', 'title': 'get_universe_stargates_stargate_id_z'}}, 'description': 'position object', 'required': ['x', 'y', 'z']}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_stargates_stargate_id_name'}, 'stargate_id': {'format': 'int32', 'type': 'integer', 'description': 'stargate_id integer', 'title': 'get_universe_stargates_stargate_id_stargate_id'}, 'destination': {'title': 'get_universe_stargates_stargate_id_destination', 'type': 'object', 'properties': {'stargate_id': {'format': 'int32', 'type': 'integer', 'description': 'The stargate this stargate connects to', 'title': 'get_universe_stargates_stargate_id_stargate_id'}, 'system_id': {'format': 'int32', 'type': 'integer', 'description': 'The solar system this stargate connects to', 'title': 'get_universe_stargates_stargate_id_system_id'}}, 'description': 'destination object', 'required': ['system_id', 'stargate_id']}, 'type_id': {'format': 'int32', 'type': 'integer', 'description': 'type_id integer', 'title': 'get_universe_stargates_stargate_id_type_id'}}, 'description': '200 ok object', 'required': ['stargate_id', 'name', 'type_id', 'position', 'system_id', 'destination']}, 'examples': {'application/json': {'system_id': 30000003, 'position': {'x': -101092761600, 'y': 5279539200, 'z': 1550503403520}, 'name': 'Stargate (Tanoo)', 'stargate_id': 50000342, 'destination': {'stargate_id': 50000056, 'system_id': 30000001}, 'type_id': 29624}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about a stargate'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_stargates_stargate_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_stargates_stargate_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Stargate not found'}}

    def get(self, stargate_id, datasource="tranquility",**kwargs):
        """
                Get information on a stargate
        
        ---
        
        Alternate route: `/v1/universe/stargates/{stargate_id}/`
        
        Alternate route: `/legacy/universe/stargates/{stargate_id}/`
        
        Alternate route: `/dev/universe/stargates/{stargate_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type stargate_id: int
        :param stargate_id: stargate_id integer
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"stargate_id" : stargate_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseStationsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/stations/{station_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_stations_station_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_stations_station_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_stations_station_id_ok', 'type': 'object', 'properties': {'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_stations_station_id_name'}, 'owner': {'format': 'int32', 'type': 'integer', 'description': 'ID of the corporation that controls this station', 'title': 'get_universe_stations_station_id_owner'}, 'station_id': {'format': 'int32', 'type': 'integer', 'description': 'station_id integer', 'title': 'get_universe_stations_station_id_station_id'}, 'position': {'title': 'get_universe_stations_station_id_position', 'type': 'object', 'properties': {'x': {'format': 'float', 'type': 'number', 'description': 'x number', 'title': 'get_universe_stations_station_id_x'}, 'y': {'format': 'float', 'type': 'number', 'description': 'y number', 'title': 'get_universe_stations_station_id_y'}, 'z': {'format': 'float', 'type': 'number', 'description': 'z number', 'title': 'get_universe_stations_station_id_z'}}, 'description': 'position object', 'required': ['x', 'y', 'z']}, 'reprocessing_stations_take': {'format': 'float', 'type': 'number', 'description': 'reprocessing_stations_take number', 'title': 'get_universe_stations_station_id_reprocessing_stations_take'}, 'type_id': {'format': 'int32', 'type': 'integer', 'description': 'type_id integer', 'title': 'get_universe_stations_station_id_type_id'}, 'race_id': {'format': 'int32', 'type': 'integer', 'description': 'race_id integer', 'title': 'get_universe_stations_station_id_race_id'}, 'reprocessing_efficiency': {'format': 'float', 'type': 'number', 'description': 'reprocessing_efficiency number', 'title': 'get_universe_stations_station_id_reprocessing_efficiency'}, 'max_dockable_ship_volume': {'format': 'float', 'type': 'number', 'description': 'max_dockable_ship_volume number', 'title': 'get_universe_stations_station_id_max_dockable_ship_volume'}, 'services': {'items': {'enum': ['bounty-missions', 'assasination-missions', 'courier-missions', 'interbus', 'reprocessing-plant', 'refinery', 'market', 'black-market', 'stock-exchange', 'cloning', 'surgery', 'dna-therapy', 'repair-facilities', 'factory', 'labratory', 'gambling', 'fitting', 'paintshop', 'news', 'storage', 'insurance', 'docking', 'office-rental', 'jump-clone-facility', 'loyalty-point-store', 'navy-offices', 'security-offices'], 'type': 'string', 'description': 'service string', 'title': 'get_universe_stations_station_id_service'}, 'type': 'array', 'description': 'services array', 'title': 'get_universe_stations_station_id_services'}, 'office_rental_cost': {'format': 'float', 'type': 'number', 'description': 'office_rental_cost number', 'title': 'get_universe_stations_station_id_office_rental_cost'}, 'system_id': {'format': 'int32', 'type': 'integer', 'description': 'The solar system this station is in', 'title': 'get_universe_stations_station_id_system_id'}}, 'description': '200 ok object', 'required': ['station_id', 'name', 'type_id', 'position', 'system_id', 'reprocessing_efficiency', 'reprocessing_stations_take', 'max_dockable_ship_volume', 'office_rental_cost', 'services']}, 'examples': {'application/json': {'name': 'Jakanerva III - Moon 15 - Prompt Delivery Storage', 'owner': 1000003, 'station_id': 60000277, 'position': {'x': 165632286720, 'y': 2771804160, 'z': -2455331266560}, 'reprocessing_stations_take': 0.05, 'type_id': 1531, 'race_id': 1, 'reprocessing_efficiency': 0.5, 'max_dockable_ship_volume': 50000000, 'services': ['courier-missions', 'reprocessing-plant', 'market', 'repair-facilities', 'fitting', 'news', 'storage', 'insurance', 'docking', 'office-rental', 'loyalty-point-store', 'navy-offices'], 'office_rental_cost': 10000, 'system_id': 30000148}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about a station'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_stations_station_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_stations_station_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Station not found'}}

    def get(self, station_id, datasource="tranquility",**kwargs):
        """
                Get information on a station
        
        ---
        
        Alternate route: `/v2/universe/stations/{station_id}/`
        
        Alternate route: `/dev/universe/stations/{station_id}/`
        
        
        ---
        
        This route is cached for up to 300 seconds

:type station_id: int
        :param station_id: station_id integer
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"station_id" : station_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseGraphicsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/graphics/{graphic_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_graphics_graphic_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_graphics_graphic_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_graphics_graphic_id_ok', 'type': 'object', 'properties': {'sof_fation_name': {'type': 'string', 'description': 'sof_fation_name string', 'title': 'get_universe_graphics_graphic_id_sof_fation_name'}, 'icon_folder': {'type': 'string', 'description': 'icon_folder string', 'title': 'get_universe_graphics_graphic_id_icon_folder'}, 'graphic_id': {'format': 'int32', 'type': 'integer', 'description': 'graphic_id integer', 'title': 'get_universe_graphics_graphic_id_graphic_id'}, 'sof_race_name': {'type': 'string', 'description': 'sof_race_name string', 'title': 'get_universe_graphics_graphic_id_sof_race_name'}, 'sof_hull_name': {'type': 'string', 'description': 'sof_hull_name string', 'title': 'get_universe_graphics_graphic_id_sof_hull_name'}, 'sof_dna': {'type': 'string', 'description': 'sof_dna string', 'title': 'get_universe_graphics_graphic_id_sof_dna'}, 'collision_file': {'type': 'string', 'description': 'collision_file string', 'title': 'get_universe_graphics_graphic_id_collision_file'}, 'graphic_file': {'type': 'string', 'description': 'graphic_file string', 'title': 'get_universe_graphics_graphic_id_graphic_file'}}, 'description': '200 ok object', 'required': ['graphic_id']}, 'examples': {'application/json': {'graphic_file': 'res:/dx9/model/worldobject/planet/moon.red', 'graphic_id': 10}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about a graphic'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_graphics_graphic_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_graphics_graphic_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Graphic not found'}}

    def get(self, graphic_id, datasource="tranquility",**kwargs):
        """
                Get information on a graphic
        
        ---
        
        Alternate route: `/v1/universe/graphics/{graphic_id}/`
        
        Alternate route: `/legacy/universe/graphics/{graphic_id}/`
        
        Alternate route: `/dev/universe/graphics/{graphic_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type graphic_id: int
        :param graphic_id: graphic_id integer
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"graphic_id" : graphic_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseCategoriesDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/categories/{category_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_categories_category_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_categories_category_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_categories_category_id_ok', 'type': 'object', 'properties': {'category_id': {'format': 'int32', 'type': 'integer', 'description': 'category_id integer', 'title': 'get_universe_categories_category_id_category_id'}, 'groups': {'items': {'format': 'int32', 'type': 'integer', 'description': 'group integer', 'title': 'get_universe_categories_category_id_group'}, 'type': 'array', 'description': 'groups array', 'title': 'get_universe_categories_category_id_groups'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_categories_category_id_name'}, 'published': {'type': 'boolean', 'description': 'published boolean', 'title': 'get_universe_categories_category_id_published'}}, 'description': '200 ok object', 'required': ['category_id', 'name', 'published', 'groups']}, 'examples': {'application/json': {'category_id': 6, 'groups': [25, 26, 27], 'name': 'Ship', 'published': True}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Content-Language': {'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'description': 'The language used in the response'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about an item category'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_categories_category_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_categories_category_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Category not found'}}

    def get(self, category_id, datasource="tranquility",language="en-us",**kwargs):
        """
                Get information of an item category
        
        ---
        
        Alternate route: `/v1/universe/categories/{category_id}/`
        
        Alternate route: `/legacy/universe/categories/{category_id}/`
        
        Alternate route: `/dev/universe/categories/{category_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type category_id: int
        :param category_id: An Eve item category ID
:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Language to use in the response
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"category_id" : category_id, "datasource" : datasource, "language" : language, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseGroupsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/groups/{group_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_groups_group_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_groups_group_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_groups_group_id_ok', 'type': 'object', 'properties': {'category_id': {'format': 'float', 'type': 'number', 'description': 'category_id number', 'title': 'get_universe_groups_group_id_category_id'}, 'types': {'items': {'format': 'int32', 'type': 'integer', 'description': 'type integer', 'title': 'get_universe_groups_group_id_type'}, 'type': 'array', 'description': 'types array', 'title': 'get_universe_groups_group_id_types'}, 'published': {'type': 'boolean', 'description': 'published boolean', 'title': 'get_universe_groups_group_id_published'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_groups_group_id_name'}, 'group_id': {'format': 'int32', 'type': 'integer', 'description': 'group_id integer', 'title': 'get_universe_groups_group_id_group_id'}}, 'description': '200 ok object', 'required': ['group_id', 'name', 'published', 'category_id', 'types']}, 'examples': {'application/json': {'category_id': 6, 'types': [587, 586, 585], 'published': True, 'name': 'Frigate', 'group_id': 25}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Content-Language': {'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'description': 'The language used in the response'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about an item group'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_groups_group_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_groups_group_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Group not found'}}

    def get(self, group_id, datasource="tranquility",language="en-us",**kwargs):
        """
                Get information on an item group
        
        ---
        
        Alternate route: `/v1/universe/groups/{group_id}/`
        
        Alternate route: `/legacy/universe/groups/{group_id}/`
        
        Alternate route: `/dev/universe/groups/{group_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type group_id: int
        :param group_id: An Eve item group ID
:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Language to use in the response
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"group_id" : group_id, "datasource" : datasource, "language" : language, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseSchematicsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/schematics/{schematic_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_schematics_schematic_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_schematics_schematic_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_schematics_schematic_id_ok', 'type': 'object', 'properties': {'cycle_time': {'format': 'int32', 'type': 'integer', 'description': 'Time in seconds to process a run', 'title': 'get_universe_schematics_schematic_id_cycle_time'}, 'schematic_name': {'type': 'string', 'description': 'schematic_name string', 'title': 'get_universe_schematics_schematic_id_schematic_name'}}, 'description': '200 ok object', 'required': ['schematic_name', 'cycle_time']}, 'examples': {'application/json': {'cycle_time': 1800, 'schematic_name': 'Bacteria'}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Public data about a schematic'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'error message', 'title': 'get_universe_schematics_schematic_id_error'}}, 'description': 'Schematic not found', 'title': 'get_universe_schematics_schematic_id_not_found'}, 'examples': {'application/json': {'error': 'Schematic not found'}}, 'description': 'Schematic not found'}}

    def get(self, schematic_id, datasource="tranquility",**kwargs):
        """
                Get information on a planetary factory schematic
        
        ---
        
        Alternate route: `/v1/universe/schematics/{schematic_id}/`
        
        Alternate route: `/legacy/universe/schematics/{schematic_id}/`
        
        Alternate route: `/dev/universe/schematics/{schematic_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type schematic_id: int
        :param schematic_id: A PI schematic ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"schematic_id" : schematic_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseTypesDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/types/{type_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_types_type_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_types_type_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_universe_types_type_id_ok', 'type': 'object', 'properties': {'volume': {'format': 'float', 'type': 'number', 'description': 'volume number', 'title': 'get_universe_types_type_id_volume'}, 'graphic_id': {'format': 'int32', 'type': 'integer', 'description': 'graphic_id integer', 'title': 'get_universe_types_type_id_graphic_id'}, 'portion_size': {'format': 'int32', 'type': 'integer', 'description': 'portion_size integer', 'title': 'get_universe_types_type_id_portion_size'}, 'description': {'type': 'string', 'description': 'description string', 'title': 'get_universe_types_type_id_description'}, 'group_id': {'format': 'int32', 'type': 'integer', 'description': 'group_id integer', 'title': 'get_universe_types_type_id_group_id'}, 'dogma_attributes': {'items': {'title': 'get_universe_types_type_id_dogma_attribute', 'type': 'object', 'properties': {'attribute_id': {'format': 'int32', 'type': 'integer', 'description': 'attribute_id integer', 'title': 'get_universe_types_type_id_attribute_id'}, 'value': {'format': 'float', 'type': 'number', 'description': 'value number', 'title': 'get_universe_types_type_id_value'}}, 'description': 'dogma_attribute object', 'required': ['attribute_id', 'value']}, 'type': 'array', 'description': 'dogma_attributes array', 'title': 'get_universe_types_type_id_dogma_attributes'}, 'radius': {'format': 'float', 'type': 'number', 'description': 'radius number', 'title': 'get_universe_types_type_id_radius'}, 'capacity': {'format': 'float', 'type': 'number', 'description': 'capacity number', 'title': 'get_universe_types_type_id_capacity'}, 'dogma_effects': {'items': {'title': 'get_universe_types_type_id_dogma_effect', 'type': 'object', 'properties': {'effect_id': {'format': 'int32', 'type': 'integer', 'description': 'effect_id integer', 'title': 'get_universe_types_type_id_effect_id'}, 'is_default': {'type': 'boolean', 'description': 'is_default boolean', 'title': 'get_universe_types_type_id_is_default'}}, 'description': 'dogma_effect object', 'required': ['effect_id', 'is_default']}, 'type': 'array', 'description': 'dogma_effects array', 'title': 'get_universe_types_type_id_dogma_effects'}, 'type_id': {'format': 'int32', 'type': 'integer', 'description': 'type_id integer', 'title': 'get_universe_types_type_id_type_id'}, 'icon_id': {'format': 'int32', 'type': 'integer', 'description': 'icon_id integer', 'title': 'get_universe_types_type_id_icon_id'}, 'published': {'type': 'boolean', 'description': 'published boolean', 'title': 'get_universe_types_type_id_published'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_types_type_id_name'}, 'mass': {'format': 'float', 'type': 'number', 'description': 'mass number', 'title': 'get_universe_types_type_id_mass'}}, 'description': '200 ok object', 'required': ['type_id', 'name', 'description', 'published', 'group_id']}, 'examples': {'application/json': {'published': True, 'name': 'Rifter', 'type_id': 587, 'description': 'The Rifter is a...', 'group_id': 25}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Content-Language': {'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'description': 'The language used in the response'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Information about a type'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_universe_types_type_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_universe_types_type_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Type not found'}}

    def get(self, type_id, datasource="tranquility",language="en-us",**kwargs):
        """
                Get information on a type
        
        ---
        
        Alternate route: `/v2/universe/types/{type_id}/`
        
        Alternate route: `/dev/universe/types/{type_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type type_id: int
        :param type_id: An Eve item type ID
:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Language to use in the response
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"type_id" : type_id, "datasource" : datasource, "language" : language, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseRegions(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/regions/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_regions_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_regions_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int32', 'type': 'integer', 'description': '200 ok integer', 'title': 'get_universe_regions_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_regions_ok'}, 'examples': {'application/json': [11000001, 11000002]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of region ids'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Get a list of regions
        
        ---
        
        Alternate route: `/v1/universe/regions/`
        
        Alternate route: `/legacy/universe/regions/`
        
        Alternate route: `/dev/universe/regions/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseGraphics(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/graphics/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_graphics_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_graphics_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int32', 'type': 'integer', 'description': '200 ok integer', 'title': 'get_universe_graphics_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_graphics_ok'}, 'examples': {'application/json': [10, 4106]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of graphic ids'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Get a list of graphics
        
        ---
        
        Alternate route: `/v1/universe/graphics/`
        
        Alternate route: `/legacy/universe/graphics/`
        
        Alternate route: `/dev/universe/graphics/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class UniverseBloodlines(object):
    base_url = "https://esi.tech.ccp.is/latest/universe/bloodlines/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_universe_bloodlines_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_universe_bloodlines_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_universe_bloodlines_200_ok', 'type': 'object', 'properties': {'intelligence': {'format': 'int32', 'type': 'integer', 'description': 'intelligence integer', 'title': 'get_universe_bloodlines_intelligence'}, 'corporation_id': {'format': 'int32', 'type': 'integer', 'description': 'corporation_id integer', 'title': 'get_universe_bloodlines_corporation_id'}, 'perception': {'format': 'int32', 'type': 'integer', 'description': 'perception integer', 'title': 'get_universe_bloodlines_perception'}, 'memory': {'format': 'int32', 'type': 'integer', 'description': 'memory integer', 'title': 'get_universe_bloodlines_memory'}, 'charisma': {'format': 'int32', 'type': 'integer', 'description': 'charisma integer', 'title': 'get_universe_bloodlines_charisma'}, 'ship_type_id': {'format': 'int32', 'type': 'integer', 'description': 'ship_type_id integer', 'title': 'get_universe_bloodlines_ship_type_id'}, 'bloodline_id': {'format': 'int32', 'type': 'integer', 'description': 'bloodline_id integer', 'title': 'get_universe_bloodlines_bloodline_id'}, 'willpower': {'format': 'int32', 'type': 'integer', 'description': 'willpower integer', 'title': 'get_universe_bloodlines_willpower'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_universe_bloodlines_name'}, 'description': {'type': 'string', 'description': 'description string', 'title': 'get_universe_bloodlines_description'}, 'race_id': {'format': 'int32', 'type': 'integer', 'description': 'race_id integer', 'title': 'get_universe_bloodlines_race_id'}}, 'description': '200 ok object', 'required': ['bloodline_id', 'name', 'description', 'race_id', 'ship_type_id', 'corporation_id', 'perception', 'willpower', 'charisma', 'memory', 'intelligence']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_universe_bloodlines_ok'}, 'examples': {'application/json': [{'intelligence': 7, 'corporation_id': 1000006, 'perception': 5, 'memory': 7, 'charisma': 6, 'ship_type_id': 601, 'bloodline_id': 1, 'willpower': 5, 'name': 'Deteis', 'description': 'The Deteis are regarded as ...', 'race_id': 1}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Content-Language': {'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'description': 'The language used in the response'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of bloodlines'}}

    def get(self, datasource="tranquility",language="en-us",**kwargs):
        """
                Get a list of bloodlines
        
        ---
        
        Alternate route: `/v1/universe/bloodlines/`
        
        Alternate route: `/legacy/universe/bloodlines/`
        
        Alternate route: `/dev/universe/bloodlines/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Language to use in the response
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, "language" : language, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)