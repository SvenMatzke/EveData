# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class SovereigntyStructures(object):
    base_url = "https://esi.tech.ccp.is/latest/sovereignty/structures/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_sovereignty_structures_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_sovereignty_structures_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_sovereignty_structures_200_ok', 'type': 'object', 'properties': {'vulnerable_start_time': {'format': 'date-time', 'type': 'string', 'description': 'The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.\n', 'title': 'get_sovereignty_structures_vulnerable_start_time'}, 'structure_type_id': {'format': 'int32', 'type': 'integer', 'description': 'A reference to the type of structure this is.\n', 'title': 'get_sovereignty_structures_structure_type_id'}, 'vulnerable_end_time': {'format': 'date-time', 'type': 'string', 'description': "The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.\n", 'title': 'get_sovereignty_structures_vulnerable_end_time'}, 'alliance_id': {'format': 'int32', 'type': 'integer', 'description': 'The alliance that owns the structure.\n', 'title': 'get_sovereignty_structures_alliance_id'}, 'solar_system_id': {'format': 'int32', 'type': 'integer', 'description': 'Solar system in which the structure is located.\n', 'title': 'get_sovereignty_structures_solar_system_id'}, 'structure_id': {'format': 'int64', 'type': 'integer', 'description': 'Unique item ID for this structure.', 'title': 'get_sovereignty_structures_structure_id'}, 'vulnerability_occupancy_level': {'format': 'float', 'type': 'number', 'description': 'The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.\n', 'title': 'get_sovereignty_structures_vulnerability_occupancy_level'}}, 'description': '200 ok object', 'required': ['alliance_id', 'solar_system_id', 'structure_id', 'structure_type_id']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_sovereignty_structures_ok'}, 'examples': {'application/json': [{'vulnerable_start_time': '2016-10-28T20:30:00Z', 'structure_type_id': 32226, 'vulnerable_end_time': '2016-10-29T05:30:00Z', 'alliance_id': 498125261, 'solar_system_id': 30000570, 'structure_id': 1018253388776, 'vulnerability_occupancy_level': 2}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of sovereignty structures'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Shows sovereignty data for structures.
        
        ---
        
        Alternate route: `/v1/sovereignty/structures/`
        
        Alternate route: `/legacy/sovereignty/structures/`
        
        Alternate route: `/dev/sovereignty/structures/`
        
        
        ---
        
        This route is cached for up to 120 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class SovereigntyCampaigns(object):
    base_url = "https://esi.tech.ccp.is/latest/sovereignty/campaigns/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_sovereignty_campaigns_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_sovereignty_campaigns_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_sovereignty_campaigns_200_ok', 'type': 'object', 'properties': {'participants': {'items': {'title': 'get_sovereignty_campaigns_participant', 'type': 'object', 'properties': {'score': {'format': 'float', 'type': 'number', 'description': 'score number', 'title': 'get_sovereignty_campaigns_score'}, 'alliance_id': {'format': 'int32', 'type': 'integer', 'description': 'alliance_id integer', 'title': 'get_sovereignty_campaigns_alliance_id'}}, 'description': 'participant object', 'required': ['alliance_id', 'score']}, 'type': 'array', 'description': 'Alliance participating and their respective scores, only present in Freeport Events.\n', 'title': 'get_sovereignty_campaigns_participants'}, 'campaign_id': {'format': 'int32', 'type': 'integer', 'description': 'Unique ID for this campaign.', 'title': 'get_sovereignty_campaigns_campaign_id'}, 'constellation_id': {'format': 'int32', 'type': 'integer', 'description': 'The constellation in which the campaign will take place.\n', 'title': 'get_sovereignty_campaigns_constellation_id'}, 'defender_id': {'format': 'int32', 'type': 'integer', 'description': 'Defending alliance, only present in Defense Events\n', 'title': 'get_sovereignty_campaigns_defender_id'}, 'solar_system_id': {'format': 'int32', 'type': 'integer', 'description': 'The solar system the structure is located in.\n', 'title': 'get_sovereignty_campaigns_solar_system_id'}, 'structure_id': {'format': 'int64', 'type': 'integer', 'description': 'The structure item ID that is related to this campaign.\n', 'title': 'get_sovereignty_campaigns_structure_id'}, 'event_type': {'enum': ['tcu_defense', 'ihub_defense', 'station_defense', 'station_freeport'], 'type': 'string', 'description': 'Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as "Defense Events", station_freeport as "Freeport Events".\n', 'title': 'get_sovereignty_campaigns_event_type'}, 'defender_score': {'format': 'float', 'type': 'number', 'description': 'Score for the defending alliance, only present in Defense Events.\n', 'title': 'get_sovereignty_campaigns_defender_score'}, 'attackers_score': {'format': 'float', 'type': 'number', 'description': 'Score for all attacking parties, only present in Defense Events.\n', 'title': 'get_sovereignty_campaigns_attackers_score'}, 'start_time': {'format': 'date-time', 'type': 'string', 'description': 'Time the event is scheduled to start.\n', 'title': 'get_sovereignty_campaigns_start_time'}}, 'description': '200 ok object', 'required': ['campaign_id', 'structure_id', 'solar_system_id', 'constellation_id', 'event_type', 'start_time']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_sovereignty_campaigns_ok'}, 'examples': {'application/json': [{'campaign_id': 32833, 'constellation_id': 20000125, 'defender_id': 1695357456, 'solar_system_id': 30000856, 'structure_id': 61001096, 'event_type': 'station_defense', 'defender_score': 0.6, 'attackers_score': 0.4, 'start_time': '2016-10-29T14:34:40Z'}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of sovereignty campaigns'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Shows sovereignty data for campaigns.
        
        ---
        
        Alternate route: `/v1/sovereignty/campaigns/`
        
        Alternate route: `/legacy/sovereignty/campaigns/`
        
        Alternate route: `/dev/sovereignty/campaigns/`
        
        
        ---
        
        This route is cached for up to 5 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)