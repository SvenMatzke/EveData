# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class CorporationsDetailMembers(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/members/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_members_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_corporations_corporation_id_members_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_corporations_corporation_id_members_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_corporations_corporation_id_members_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-corporations.read_corporation_membership.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_corporations_corporation_id_members_200_ok', 'type': 'object', 'properties': {'character_id': {'format': 'int32', 'type': 'integer', 'description': 'character_id integer', 'title': 'get_corporations_corporation_id_members_character_id'}}, 'description': '200 ok object', 'required': ['character_id']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_corporations_corporation_id_members_ok'}, 'examples': {'application/json': [{'character_id': 90000001}, {'character_id': 90000002}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of member character IDs'}}

    def get(self, corporation_id, datasource="tranquility",**kwargs):
        """
                Read the current list of members if the calling character is a member.
        
        ---
        
        Alternate route: `/v2/corporations/{corporation_id}/members/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/members/`
        
        Alternate route: `/dev/corporations/{corporation_id}/members/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type corporation_id: int
        :param corporation_id: A corporation ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"corporation_id" : corporation_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsNpccorps(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/npccorps/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_npccorps_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_corporations_npccorps_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'format': 'int32', 'type': 'integer', 'description': '200 ok integer', 'title': 'get_corporations_npccorps_200_ok'}, 'type': 'array', 'description': '200 ok array', 'title': 'get_corporations_npccorps_ok'}, 'examples': {'application/json': [1000001, 1000002, 1000003]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of npc corporation ids'}}

    def get(self, datasource="tranquility",**kwargs):
        """
                Get a list of npc corporations
        
        ---
        
        Alternate route: `/v1/corporations/npccorps/`
        
        Alternate route: `/legacy/corporations/npccorps/`
        
        Alternate route: `/dev/corporations/npccorps/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_corporations_corporation_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'title': 'get_corporations_corporation_id_ok', 'type': 'object', 'properties': {'faction': {'enum': ['Minmatar', 'Gallente', 'Caldari', 'Amarr'], 'type': 'string', 'description': 'faction string', 'title': 'get_corporations_corporation_id_faction'}, 'creation_date': {'format': 'date-time', 'type': 'string', 'description': 'creation_date string', 'title': 'get_corporations_corporation_id_creation_date'}, 'creator_id': {'format': 'int32', 'type': 'integer', 'description': 'creator_id integer', 'title': 'get_corporations_corporation_id_creator_id'}, 'alliance_id': {'format': 'int32', 'type': 'integer', 'description': 'id of alliance that corporation is a member of, if any', 'title': 'get_corporations_corporation_id_alliance_id'}, 'ceo_id': {'format': 'int32', 'type': 'integer', 'description': 'ceo_id integer', 'title': 'get_corporations_corporation_id_ceo_id'}, 'ticker': {'type': 'string', 'description': 'the short name of the corporation', 'title': 'get_corporations_corporation_id_ticker'}, 'member_count': {'format': 'int32', 'type': 'integer', 'description': 'member_count integer', 'title': 'get_corporations_corporation_id_member_count'}, 'corporation_name': {'type': 'string', 'description': 'the full name of the corporation', 'title': 'get_corporations_corporation_id_corporation_name'}, 'url': {'type': 'string', 'description': 'url string', 'title': 'get_corporations_corporation_id_url'}, 'tax_rate': {'maximum': 1, 'format': 'float', 'minimum': 0, 'type': 'number', 'description': 'tax_rate number', 'title': 'get_corporations_corporation_id_tax_rate'}, 'corporation_description': {'type': 'string', 'description': 'corporation_description string', 'title': 'get_corporations_corporation_id_corporation_description'}}, 'description': '200 ok object', 'required': ['corporation_name', 'ticker', 'member_count', 'ceo_id', 'corporation_description', 'tax_rate', 'creator_id', 'url']}, 'examples': {'application/json': {'creation_date': '2004-11-28T16:42:51Z', 'creator_id': 180548812, 'alliance_id': 434243723, 'ceo_id': 180548812, 'ticker': '-CCP-', 'member_count': 656, 'corporation_name': 'C C P', 'url': 'http://www.eveonline.com', 'tax_rate': 0.256, 'corporation_description': "This is a corporation description, it's basically just a string"}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Public data about a corporation'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_corporations_corporation_id_404_not_found'}}, 'description': 'Not found', 'title': 'get_corporations_corporation_id_not_found'}, 'examples': {'application/json': {'error': 'Not found message'}}, 'description': 'Corporation not found'}}

    def get(self, corporation_id, datasource="tranquility",**kwargs):
        """
                Public information about a corporation
        
        ---
        
        Alternate route: `/v3/corporations/{corporation_id}/`
        
        Alternate route: `/dev/corporations/{corporation_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type corporation_id: int
        :param corporation_id: An Eve corporation ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"corporation_id" : corporation_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetailAlliancehistory(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/alliancehistory/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_alliancehistory_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_corporations_corporation_id_alliancehistory_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_corporations_corporation_id_alliancehistory_200_ok', 'type': 'object', 'properties': {'alliance': {'title': 'get_corporations_corporation_id_alliancehistory_alliance', 'type': 'object', 'properties': {'is_deleted': {'type': 'boolean', 'description': 'True if the alliance has been deleted', 'title': 'get_corporations_corporation_id_alliancehistory_is_deleted'}, 'alliance_id': {'format': 'int32', 'type': 'integer', 'description': 'alliance_id integer', 'title': 'get_corporations_corporation_id_alliancehistory_alliance_id'}}, 'description': 'alliance object', 'required': ['alliance_id', 'is_deleted']}, 'start_date': {'format': 'date-time', 'type': 'string', 'description': 'start_date string', 'title': 'get_corporations_corporation_id_alliancehistory_start_date'}, 'record_id': {'format': 'int32', 'type': 'integer', 'description': 'An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous', 'title': 'get_corporations_corporation_id_alliancehistory_record_id'}}, 'description': '200 ok object', 'required': ['start_date', 'record_id']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_corporations_corporation_id_alliancehistory_ok'}, 'examples': {'application/json': [{'alliance': {'is_deleted': False, 'alliance_id': 99000006}, 'start_date': '2016-10-25T14:46:00Z', 'record_id': 23}, {'start_date': '2015-07-06T20:56:00Z', 'record_id': 1}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Alliance history for the given corporation'}}

    def get(self, corporation_id, datasource="tranquility",**kwargs):
        """
                Get a list of all the alliances a corporation has been a member of
        
        ---
        
        Alternate route: `/v1/corporations/{corporation_id}/alliancehistory/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/alliancehistory/`
        
        Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type corporation_id: int
        :param corporation_id: An EVE corporation ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"corporation_id" : corporation_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetailStructures(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/structures/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_structures_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_corporations_corporation_id_structures_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_corporations_corporation_id_structures_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_corporations_corporation_id_structures_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-corporations.read_structures.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_corporations_corporation_id_structures_200_ok', 'type': 'object', 'properties': {'corporation_id': {'format': 'int32', 'type': 'integer', 'description': 'ID of the corporation that owns the structure', 'title': 'get_corporations_corporation_id_structures_corporation_id'}, 'system_id': {'format': 'int32', 'type': 'integer', 'description': 'The solar system the structure is in', 'title': 'get_corporations_corporation_id_structures_system_id'}, 'fuel_expires': {'format': 'date', 'type': 'string', 'description': 'Date on which the structure will run out of fuel', 'title': 'get_corporations_corporation_id_structures_fuel_expires'}, 'unanchors_at': {'format': 'date', 'type': 'string', 'description': 'Date at which the structure will unanchor', 'title': 'get_corporations_corporation_id_structures_unanchors_at'}, 'state_timer_start': {'format': 'date', 'type': 'string', 'description': "Date at which the structure entered it's current state", 'title': 'get_corporations_corporation_id_structures_state_timer_start'}, 'type_id': {'format': 'int32', 'type': 'integer', 'description': 'The type id of the structure', 'title': 'get_corporations_corporation_id_structures_type_id'}, 'services': {'items': {'title': 'get_corporations_corporation_id_structures_service', 'type': 'object', 'properties': {'state': {'enum': ['online', 'offline', 'cleanup'], 'type': 'string', 'description': 'state string', 'title': 'get_corporations_corporation_id_structures_state'}, 'name': {'type': 'string', 'description': 'name string', 'title': 'get_corporations_corporation_id_structures_name'}}, 'description': 'service object', 'required': ['name', 'state']}, 'type': 'array', 'description': 'Contains a list of service upgrades, and their state', 'title': 'get_corporations_corporation_id_structures_services'}, 'current_vul': {'items': {'title': 'get_corporations_corporation_id_structures_current_vul', 'type': 'object', 'properties': {'day': {'format': 'int32', 'type': 'integer', 'description': 'day integer', 'title': 'get_corporations_corporation_id_structures_day'}, 'hour': {'format': 'int32', 'type': 'integer', 'description': 'hour integer', 'title': 'get_corporations_corporation_id_structures_hour'}}, 'description': 'current_vul object', 'required': ['day', 'hour']}, 'type': 'array', 'description': "This week's vulnerability windows, Monday is day 0", 'title': 'get_corporations_corporation_id_structures_current_vul'}, 'structure_id': {'format': 'int64', 'type': 'integer', 'description': 'The Item ID of the structure', 'title': 'get_corporations_corporation_id_structures_structure_id'}, 'profile_id': {'format': 'int32', 'type': 'integer', 'description': 'The id of the ACL profile for this citadel', 'title': 'get_corporations_corporation_id_structures_profile_id'}, 'next_vul': {'items': {'title': 'get_corporations_corporation_id_structures_next_vul', 'type': 'object', 'properties': {'day': {'format': 'int32', 'type': 'integer', 'description': 'day integer', 'title': 'get_corporations_corporation_id_structures_day'}, 'hour': {'format': 'int32', 'type': 'integer', 'description': 'hour integer', 'title': 'get_corporations_corporation_id_structures_hour'}}, 'description': 'next_vul object', 'required': ['day', 'hour']}, 'type': 'array', 'description': "Next week's vulnerability windows, Monday is day 0", 'title': 'get_corporations_corporation_id_structures_next_vul'}, 'state_timer_end': {'format': 'date', 'type': 'string', 'description': "Date at which the structure will move to it's next state", 'title': 'get_corporations_corporation_id_structures_state_timer_end'}}, 'description': '200 ok object', 'required': ['structure_id', 'type_id', 'corporation_id', 'system_id', 'profile_id', 'current_vul', 'next_vul']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_corporations_corporation_id_structures_ok'}, 'examples': {'application/json': [{'corporation_id': 667531913, 'system_id': 30004763, 'current_vul': [{'day': 1, 'hour': 2}], 'structure_id': 1021975535893, 'type_id': 35833, 'next_vul': [{'day': 3, 'hour': 4}], 'profile_id': 11237}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Content-Language': {'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'description': 'The language used in the response'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': "List of corporation structures' information"}}

    def get(self, corporation_id, datasource="tranquility",language="en-us",page=1,**kwargs):
        """
                Get a list of corporation structures
        
        ---
        
        Alternate route: `/v1/corporations/{corporation_id}/structures/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/structures/`
        
        Alternate route: `/dev/corporations/{corporation_id}/structures/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type corporation_id: int
        :param corporation_id: A corporation ID
:type datasource: str
        :param datasource: The server name you would like data from
:type language: str
        :param language: Language to use in the response
:type page: int
        :param page: Which page to query, 250 structures per page
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"corporation_id" : corporation_id, "datasource" : datasource, "language" : language, "page" : page, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetailIcons(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/icons/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_icons_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_corporations_corporation_id_icons_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'type': 'object', 'properties': {'px64x64': {'type': 'string', 'description': 'px64x64 string', 'title': 'get_corporations_corporation_id_icons_px64x64'}, 'px256x256': {'type': 'string', 'description': 'px256x256 string', 'title': 'get_corporations_corporation_id_icons_px256x256'}, 'px128x128': {'type': 'string', 'description': 'px128x128 string', 'title': 'get_corporations_corporation_id_icons_px128x128'}}, 'description': '200 ok object', 'title': 'get_corporations_corporation_id_icons_ok'}, 'examples': {'application/json': {'px64x64': 'https://imageserver.eveonline.com/Corporation/1000010_64.png', 'px256x256': 'https://imageserver.eveonline.com/Corporation/1000010_256.png', 'px128x128': 'https://imageserver.eveonline.com/Corporation/1000010_128.png'}}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Urls for icons for the given corporation id and server'}, '404': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'error message', 'title': 'get_corporations_corporation_id_icons_error'}}, 'description': 'No image server for this datasource', 'title': 'get_corporations_corporation_id_icons_not_found'}, 'examples': {'application/json': {'error': 'No image server for this datasource'}}, 'description': 'No image server for this datasource'}}

    def get(self, corporation_id, datasource="tranquility",**kwargs):
        """
                Get the icon urls for a corporation
        
        ---
        
        Alternate route: `/v1/corporations/{corporation_id}/icons/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/icons/`
        
        Alternate route: `/dev/corporations/{corporation_id}/icons/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type corporation_id: int
        :param corporation_id: An EVE corporation ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"corporation_id" : corporation_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetailRoles(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/roles/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_roles_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_corporations_corporation_id_roles_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_corporations_corporation_id_roles_403_forbidden'}}, 'description': 'Forbidden', 'title': 'get_corporations_corporation_id_roles_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-corporations.read_corporation_membership.v1'}}, 'description': 'Forbidden'}, '200': {'schema': {'items': {'title': 'get_corporations_corporation_id_roles_200_ok', 'type': 'object', 'properties': {'character_id': {'format': 'int32', 'type': 'integer', 'description': 'character_id integer', 'title': 'get_corporations_corporation_id_roles_character_id'}, 'roles_at_base': {'items': {'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer'], 'type': 'string', 'description': 'roles_at_base string', 'title': 'get_corporations_corporation_id_roles_roles_at_base'}, 'type': 'array', 'description': 'roles_at_base array', 'title': 'get_corporations_corporation_id_roles_roles_at_base'}, 'roles': {'items': {'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer'], 'type': 'string', 'description': 'role string', 'title': 'get_corporations_corporation_id_roles_role'}, 'type': 'array', 'description': 'roles array', 'title': 'get_corporations_corporation_id_roles_roles'}, 'roles_at_hq': {'items': {'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer'], 'type': 'string', 'description': 'roles_at_hq string', 'title': 'get_corporations_corporation_id_roles_roles_at_hq'}, 'type': 'array', 'description': 'roles_at_hq array', 'title': 'get_corporations_corporation_id_roles_roles_at_hq'}, 'grantable_roles_at_hq': {'items': {'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer'], 'type': 'string', 'description': 'grantable_roles_at_hq string', 'title': 'get_corporations_corporation_id_roles_grantable_roles_at_hq'}, 'type': 'array', 'description': 'grantable_roles_at_hq array', 'title': 'get_corporations_corporation_id_roles_grantable_roles_at_hq'}, 'grantable_roles_at_other': {'items': {'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer'], 'type': 'string', 'description': 'grantable_roles_at_other string', 'title': 'get_corporations_corporation_id_roles_grantable_roles_at_other'}, 'type': 'array', 'description': 'grantable_roles_at_other array', 'title': 'get_corporations_corporation_id_roles_grantable_roles_at_other'}, 'roles_at_other': {'items': {'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer'], 'type': 'string', 'description': 'roles_at_other string', 'title': 'get_corporations_corporation_id_roles_roles_at_other'}, 'type': 'array', 'description': 'roles_at_other array', 'title': 'get_corporations_corporation_id_roles_roles_at_other'}, 'grantable_roles': {'items': {'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer'], 'type': 'string', 'description': 'grantable_role string', 'title': 'get_corporations_corporation_id_roles_grantable_role'}, 'type': 'array', 'description': 'grantable_roles array', 'title': 'get_corporations_corporation_id_roles_grantable_roles'}, 'grantable_roles_at_base': {'items': {'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer'], 'type': 'string', 'description': 'grantable_roles_at_base string', 'title': 'get_corporations_corporation_id_roles_grantable_roles_at_base'}, 'type': 'array', 'description': 'grantable_roles_at_base array', 'title': 'get_corporations_corporation_id_roles_grantable_roles_at_base'}}, 'description': '200 ok object', 'required': ['character_id']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_corporations_corporation_id_roles_ok'}, 'examples': {'application/json': [{'character_id': 1000171, 'roles': ['Director', 'Station_Manager']}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': "List of member character ID's and roles"}}

    def get(self, corporation_id, datasource="tranquility",**kwargs):
        """
                Return the roles of all members if the character has the personnel manager role or any grantable role.
        
        ---
        
        Alternate route: `/v1/corporations/{corporation_id}/roles/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/roles/`
        
        Alternate route: `/dev/corporations/{corporation_id}/roles/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type corporation_id: int
        :param corporation_id: A corporation ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"corporation_id" : corporation_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsNames(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/names/"

    get_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_names_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'get_corporations_names_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '200': {'schema': {'items': {'title': 'get_corporations_names_200_ok', 'type': 'object', 'properties': {'corporation_name': {'type': 'string', 'description': 'corporation_name string', 'title': 'get_corporations_names_corporation_name'}, 'corporation_id': {'format': 'int32', 'type': 'integer', 'description': 'corporation_id integer', 'title': 'get_corporations_names_corporation_id'}}, 'description': '200 ok object', 'required': ['corporation_id', 'corporation_name']}, 'type': 'array', 'description': '200 ok array', 'title': 'get_corporations_names_ok'}, 'examples': {'application/json': [{'corporation_name': 'Republic University', 'corporation_id': 1000171}]}, 'headers': {'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of id/name associations'}}

    def get(self, corporation_ids, datasource="tranquility",**kwargs):
        """
                Resolve a set of corporation IDs to corporation names
        
        ---
        
        Alternate route: `/v1/corporations/names/`
        
        Alternate route: `/legacy/corporations/names/`
        
        Alternate route: `/dev/corporations/names/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

:type corporation_ids: list
        :param corporation_ids: A comma separated list of corporation IDs
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: user_agent, X-User-Agent
    """
        kwargs_dict ={
"corporation_ids" : corporation_ids, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetailStructuresDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/structures/{structure_id}/"

    put_responses = {'500': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'put_corporations_corporation_id_structures_structure_id_500_internal_server_error'}}, 'description': 'Internal server error', 'title': 'put_corporations_corporation_id_structures_structure_id_internal_server_error'}, 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'description': 'Internal server error'}, '403': {'schema': {'type': 'object', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'put_corporations_corporation_id_structures_structure_id_403_forbidden'}}, 'description': 'Forbidden', 'title': 'put_corporations_corporation_id_structures_structure_id_forbidden'}, 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-corporations.write_structures.v1'}}, 'description': 'Forbidden'}, '204': {'description': 'Structure vulnerability window updated'}}

    def put(self, corporation_id, new_schedule, structure_id, datasource="tranquility",**kwargs):
        """
                Update the vulnerability window schedule of a corporation structure
        
        ---
        
        Alternate route: `/v1/corporations/{corporation_id}/structures/{structure_id}/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/structures/{structure_id}/`
        
        Alternate route: `/dev/corporations/{corporation_id}/structures/{structure_id}/`

:type corporation_id: int
        :param corporation_id: A corporation ID
:type new_schedule: None
        :param new_schedule: New vulnerability window schedule for the structure
:type structure_id: int
        :param structure_id: A structure ID
:type datasource: str
        :param datasource: The server name you would like data from
:param kwargs: token, user_agent, X-User-Agent
    """
        kwargs_dict ={
"corporation_id" : corporation_id, "new_schedule" : new_schedule, "structure_id" : structure_id, "datasource" : datasource, 
        }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.put_responses) \
            .put(**kwargs_dict)