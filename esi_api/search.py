# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class Search(object):
    base_url = "https://esi.tech.ccp.is/latest/search/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of search results', 'examples': {'application/json': {'solarsystem': [30002510], 'station': [60004588, 60004594, 60005725, 60009106, 60012721, 60012724, 60012727]}}, 'schema': {'title': 'get_search_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'solarsystem': {'title': 'get_search_solarsystem', 'type': 'array', 'description': 'solarsystem array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'solarsystem integer', 'title': 'get_search_solarsystem'}}, 'faction': {'title': 'get_search_faction', 'type': 'array', 'description': 'faction array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'faction integer', 'title': 'get_search_faction'}}, 'alliance': {'title': 'get_search_alliance', 'type': 'array', 'description': 'alliance array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'alliance integer', 'title': 'get_search_alliance'}}, 'agent': {'title': 'get_search_agent', 'type': 'array', 'description': 'agent array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'agent integer', 'title': 'get_search_agent'}}, 'wormhole': {'title': 'get_search_wormhole', 'type': 'array', 'description': 'wormhole array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'wormhole integer', 'title': 'get_search_wormhole'}}, 'corporation': {'title': 'get_search_corporation', 'type': 'array', 'description': 'corporation array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'corporation integer', 'title': 'get_search_corporation'}}, 'region': {'title': 'get_search_region', 'type': 'array', 'description': 'region array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'region integer', 'title': 'get_search_region'}}, 'constellation': {'title': 'get_search_constellation', 'type': 'array', 'description': 'constellation array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'constellation integer', 'title': 'get_search_constellation'}}, 'inventorytype': {'title': 'get_search_inventorytype', 'type': 'array', 'description': 'inventorytype array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'inventorytype integer', 'title': 'get_search_inventorytype'}}, 'character': {'title': 'get_search_character', 'type': 'array', 'description': 'character array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'character integer', 'title': 'get_search_character'}}, 'station': {'title': 'get_search_station', 'type': 'array', 'description': 'station array', 'items': {'type': 'integer', 'format': 'int32', 'description': 'station integer', 'title': 'get_search_station'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_search_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_search_500_internal_server_error'}}}}}
    parameter = [{'name': 'categories', 'uniqueItems': True, 'description': 'Type of entities to search for', 'minItems': 1, 'type': 'array', 'in': 'query', 'required': True, 'items': {'type': 'string', 'enum': ['agent', 'alliance', 'character', 'constellation', 'corporation', 'faction', 'inventorytype', 'region', 'solarsystem', 'station', 'wormhole']}}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'language', 'default': 'en-us', 'enum': ['en-us', 'de', 'fr', 'ru', 'ja', 'zh'], 'type': 'string', 'in': 'query', 'description': 'Search locale'}, {'name': 'search', 'minLength': 3, 'description': 'The string to search on', 'type': 'string', 'in': 'query', 'required': True}, {'name': 'strict', 'type': 'boolean', 'in': 'query', 'default': False, 'description': 'Whether the search should be a strict match'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, categories, datasource= "tranquility",language= "en-us",search, strict= "False",**kwargs
    ):
        """
                Search for entities that match a given sub-string.
        
        ---
        
        Alternate route: `/v1/search/`
        
        Alternate route: `/legacy/search/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type categories: list
        :param categories: Type of entities to search for

        :type datasource: str
        :param datasource: The server name you would like data from

        :type language: str
        :param language: Search locale

        :type search: str
        :param search: The string to search on

        :type strict: boolean
        :param strict: Whether the search should be a strict match

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"categories" : categories, "datasource" : datasource, "language" : language, "search" : search, "strict" : strict, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)