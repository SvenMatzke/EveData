# coding utf-8
"""
Autogenerated Template File
"""

from .base import EsiRequestObject


class CorporationsDetailStructures(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/structures/"

    get_responses = {'200': {'headers': {'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Content-Language': {'type': 'string', 'description': 'The language used in the response', 'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh']}}, 'description': "List of corporation structures' information", 'examples': {'application/json': [{'corporation_id': 667531913, 'profile_id': 11237, 'type_id': 35833, 'system_id': 30004763, 'current_vul': '{1,2}', 'structure_id': 1021975535893, 'next_vul': '{3,4}'}]}, 'schema': {'title': 'get_corporations_corporation_id_structures_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_corporations_corporation_id_structures_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['structure_id', 'type_id', 'corporation_id', 'system_id', 'profile_id', 'current_vul', 'next_vul'], 'properties': {'state_timer_end': {'type': 'string', 'format': 'date', 'description': "Date at which the structure will move to it's next state", 'title': 'get_corporations_corporation_id_structures_state_timer_end'}, 'profile_id': {'type': 'integer', 'format': 'int32', 'description': 'The id of the ACL profile for this citadel', 'title': 'get_corporations_corporation_id_structures_profile_id'}, 'fuel_expires': {'type': 'string', 'format': 'date', 'description': 'Date on which the structure will run out of fuel', 'title': 'get_corporations_corporation_id_structures_fuel_expires'}, 'system_id': {'type': 'integer', 'format': 'int32', 'description': 'The solar system the structure is in', 'title': 'get_corporations_corporation_id_structures_system_id'}, 'services': {'type': 'string', 'description': 'Contains a list of service upgrades, and their state', 'title': 'get_corporations_corporation_id_structures_services'}, 'type_id': {'type': 'integer', 'format': 'int32', 'description': 'The type id of the structure', 'title': 'get_corporations_corporation_id_structures_type_id'}, 'structure_id': {'type': 'integer', 'format': 'int64', 'description': 'The Item ID of the structure', 'title': 'get_corporations_corporation_id_structures_structure_id'}, 'corporation_id': {'type': 'integer', 'format': 'int32', 'description': 'ID of the corporation that owns the structure', 'title': 'get_corporations_corporation_id_structures_corporation_id'}, 'unanchors_at': {'type': 'string', 'format': 'date', 'description': 'Date at which the structure will unanchor', 'title': 'get_corporations_corporation_id_structures_unanchors_at'}, 'state_timer_start': {'type': 'string', 'format': 'date', 'description': "Date at which the structure entered it's current state", 'title': 'get_corporations_corporation_id_structures_state_timer_start'}, 'current_vul': {'type': 'string', 'description': "Set of {Day, Hour} for this week's vulnerability windows, Monday is day 0", 'title': 'get_corporations_corporation_id_structures_current_vul'}, 'next_vul': {'type': 'string', 'description': "Set of {Day, Hour} for next week's vulnerability windows, Monday is day 0", 'title': 'get_corporations_corporation_id_structures_next_vul'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_corporations_corporation_id_structures_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_structures_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-corporations.read_structures.v1'}}, 'schema': {'title': 'get_corporations_corporation_id_structures_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_corporations_corporation_id_structures_403_forbidden'}}}}}
    parameter = [{'name': 'corporation_id', 'format': 'int32', 'description': 'A corporation ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'language', 'default': 'en-us', 'enum': ['de', 'en-us', 'fr', 'ja', 'ru', 'zh'], 'type': 'string', 'in': 'query', 'description': 'Language to use in the response'}, {'name': 'page', 'format': 'int32', 'description': 'Which page to query, 250 structures per page', 'type': 'integer', 'in': 'query', 'minimum': 1, 'required': False}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, corporation_id, datasource= "tranquility",language= "en-us",page= 1,**kwargs
    ):
        """
                Get a list of corporation structures
        
        ---
        
        Alternate route: `/v1/corporations/{corporation_id}/structures/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/structures/`
        
        Alternate route: `/dev/corporations/{corporation_id}/structures/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type corporation_id: int
        :param corporation_id: A corporation ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type language: str
        :param language: Language to use in the response

        :type page: int
        :param page: Which page to query, 250 structures per page

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"corporation_id" : corporation_id, "datasource" : datasource, "language" : language, "page" : page, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetailAlliancehistory(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/alliancehistory/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Alliance history for the given corporation', 'examples': {'application/json': [{'start_date': '2016-10-25T14:46:00Z', 'record_id': 23, 'alliance': {'is_deleted': False, 'alliance_id': 99000006}}, {'start_date': '2015-07-06T20:56:00Z', 'record_id': 1}]}, 'schema': {'title': 'get_corporations_corporation_id_alliancehistory_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_corporations_corporation_id_alliancehistory_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['start_date', 'record_id'], 'properties': {'start_date': {'type': 'string', 'format': 'date-time', 'description': 'start_date string', 'title': 'get_corporations_corporation_id_alliancehistory_start_date'}, 'record_id': {'type': 'integer', 'format': 'int32', 'description': 'An incrementing ID that can be used to canonically establish order of records in cases where dates may be ambiguous', 'title': 'get_corporations_corporation_id_alliancehistory_record_id'}, 'alliance': {'title': 'get_corporations_corporation_id_alliancehistory_alliance', 'type': 'object', 'description': 'alliance object', 'required': ['alliance_id', 'is_deleted'], 'properties': {'is_deleted': {'type': 'boolean', 'description': 'True if the alliance has been deleted', 'title': 'get_corporations_corporation_id_alliancehistory_is_deleted'}, 'alliance_id': {'type': 'integer', 'format': 'int32', 'description': 'alliance_id integer', 'title': 'get_corporations_corporation_id_alliancehistory_alliance_id'}}}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_corporations_corporation_id_alliancehistory_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_alliancehistory_500_internal_server_error'}}}}}
    parameter = [{'name': 'corporation_id', 'format': 'int32', 'description': 'An EVE corporation ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, corporation_id, datasource= "tranquility",**kwargs
    ):
        """
                Get a list of all the alliances a corporation has been a member of
        
        ---
        
        Alternate route: `/v1/corporations/{corporation_id}/alliancehistory/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/alliancehistory/`
        
        Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type corporation_id: int
        :param corporation_id: An EVE corporation ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"corporation_id" : corporation_id, "datasource" : datasource, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetailIcons(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/icons/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Urls for icons for the given corporation id and server', 'examples': {'application/json': {'px64x64': 'https://imageserver.eveonline.com/Corporation/1000010_64.png', 'px256x256': 'https://imageserver.eveonline.com/Corporation/1000010_256.png', 'px128x128': 'https://imageserver.eveonline.com/Corporation/1000010_128.png'}}, 'schema': {'title': 'get_corporations_corporation_id_icons_ok', 'type': 'object', 'description': '200 ok object', 'properties': {'px64x64': {'type': 'string', 'description': 'px64x64 string', 'title': 'get_corporations_corporation_id_icons_px64x64'}, 'px256x256': {'type': 'string', 'description': 'px256x256 string', 'title': 'get_corporations_corporation_id_icons_px256x256'}, 'px128x128': {'type': 'string', 'description': 'px128x128 string', 'title': 'get_corporations_corporation_id_icons_px128x128'}}}}, '404': {'description': 'No image server for this datasource', 'examples': {'application/json': {'error': 'No image server for this datasource'}}, 'schema': {'title': 'get_corporations_corporation_id_icons_not_found', 'type': 'object', 'description': 'No image server for this datasource', 'properties': {'error': {'type': 'string', 'description': 'error message', 'title': 'get_corporations_corporation_id_icons_error'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_corporations_corporation_id_icons_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_icons_500_internal_server_error'}}}}}
    parameter = [{'name': 'corporation_id', 'format': 'int32', 'description': 'An EVE corporation ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, corporation_id, datasource= "tranquility",**kwargs
    ):
        """
                Get the icon urls for a corporation
        
        ---
        
        Alternate route: `/v1/corporations/{corporation_id}/icons/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/icons/`
        
        Alternate route: `/dev/corporations/{corporation_id}/icons/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type corporation_id: int
        :param corporation_id: An EVE corporation ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"corporation_id" : corporation_id, "datasource" : datasource, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetail(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'Public data about a corporation', 'examples': {'application/json': {'corporation_name': 'C C P', 'ticker': '-CCP-', 'member_count': 656, 'ceo_id': 180548812, 'alliance_id': 434243723}}, 'schema': {'title': 'get_corporations_corporation_id_ok', 'type': 'object', 'description': '200 ok object', 'required': ['corporation_name', 'ticker', 'member_count', 'ceo_id'], 'properties': {'corporation_name': {'type': 'string', 'description': 'the full name of the corporation', 'title': 'get_corporations_corporation_id_corporation_name'}, 'ticker': {'type': 'string', 'description': 'the short name of the corporation', 'title': 'get_corporations_corporation_id_ticker'}, 'member_count': {'type': 'integer', 'format': 'int32', 'description': 'member_count integer', 'title': 'get_corporations_corporation_id_member_count'}, 'ceo_id': {'type': 'integer', 'format': 'int32', 'description': 'ceo_id integer', 'title': 'get_corporations_corporation_id_ceo_id'}, 'alliance_id': {'type': 'integer', 'format': 'int32', 'description': 'id of alliance that corporation is a member of, if any', 'title': 'get_corporations_corporation_id_alliance_id'}}}}, '404': {'description': 'Corporation not found', 'examples': {'application/json': {'error': 'Not found message'}}, 'schema': {'title': 'get_corporations_corporation_id_not_found', 'type': 'object', 'description': 'Not found', 'properties': {'error': {'type': 'string', 'description': 'Not found message', 'title': 'get_corporations_corporation_id_404_not_found'}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_corporations_corporation_id_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_500_internal_server_error'}}}}}
    parameter = [{'name': 'corporation_id', 'format': 'int32', 'description': 'An Eve corporation ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, corporation_id, datasource= "tranquility",**kwargs
    ):
        """
                Public information about a corporation
        
        ---
        
        Alternate route: `/v2/corporations/{corporation_id}/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type corporation_id: int
        :param corporation_id: An Eve corporation ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"corporation_id" : corporation_id, "datasource" : datasource, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsNpccorps(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/npccorps/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'A list of npc corporation ids', 'examples': {'application/json': [1000001, 1000002, 1000003]}, 'schema': {'title': 'get_corporations_npccorps_ok', 'type': 'array', 'description': '200 ok array', 'items': {'type': 'integer', 'format': 'int32', 'description': '200 ok integer', 'title': 'get_corporations_npccorps_200_ok'}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_corporations_npccorps_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_npccorps_500_internal_server_error'}}}}}
    parameter = [{'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, datasource= "tranquility",**kwargs
    ):
        """
                Get a list of npc corporations
        
        ---
        
        Alternate route: `/v1/corporations/npccorps/`
        
        Alternate route: `/legacy/corporations/npccorps/`
        
        Alternate route: `/dev/corporations/npccorps/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type datasource: str
        :param datasource: The server name you would like data from

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"datasource" : datasource, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetailMembers(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/members/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of member character IDs', 'examples': {'application/json': [{'character_id': 90000001}, {'character_id': 90000002}]}, 'schema': {'title': 'get_corporations_corporation_id_members_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_corporations_corporation_id_members_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['character_id'], 'properties': {'character_id': {'type': 'integer', 'format': 'int32', 'description': 'character_id integer', 'title': 'get_corporations_corporation_id_members_character_id'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_corporations_corporation_id_members_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_members_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-corporations.read_corporation_membership.v1'}}, 'schema': {'title': 'get_corporations_corporation_id_members_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_corporations_corporation_id_members_403_forbidden'}}}}}
    parameter = [{'name': 'corporation_id', 'format': 'int32', 'description': 'A corporation ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, corporation_id, datasource= "tranquility",**kwargs
    ):
        """
                Read the current list of members if the calling character is a member.
        
        ---
        
        Alternate route: `/v2/corporations/{corporation_id}/members/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/members/`
        
        Alternate route: `/dev/corporations/{corporation_id}/members/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type corporation_id: int
        :param corporation_id: A corporation ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"corporation_id" : corporation_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsDetailRoles(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/{corporation_id}/roles/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': "List of member character ID's and roles", 'examples': {'application/json': [{'character_id': 1000171, 'roles': ['Director', 'Station_Manager']}]}, 'schema': {'title': 'get_corporations_corporation_id_roles_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_corporations_corporation_id_roles_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['character_id'], 'properties': {'grantable_roles': {'title': 'get_corporations_corporation_id_roles_grantable_roles', 'type': 'array', 'description': 'grantable_roles array', 'items': {'title': 'get_corporations_corporation_id_roles_grantable_role', 'type': 'string', 'description': 'grantable_role string', 'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer']}}, 'roles': {'title': 'get_corporations_corporation_id_roles_roles', 'type': 'array', 'description': 'roles array', 'items': {'title': 'get_corporations_corporation_id_roles_role', 'type': 'string', 'description': 'role string', 'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer']}}, 'grantable_roles_at_hq': {'title': 'get_corporations_corporation_id_roles_grantable_roles_at_hq', 'type': 'array', 'description': 'grantable_roles_at_hq array', 'items': {'title': 'get_corporations_corporation_id_roles_grantable_roles_at_hq', 'type': 'string', 'description': 'grantable_roles_at_hq string', 'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer']}}, 'roles_at_hq': {'title': 'get_corporations_corporation_id_roles_roles_at_hq', 'type': 'array', 'description': 'roles_at_hq array', 'items': {'title': 'get_corporations_corporation_id_roles_roles_at_hq', 'type': 'string', 'description': 'roles_at_hq string', 'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer']}}, 'character_id': {'type': 'integer', 'format': 'int32', 'description': 'character_id integer', 'title': 'get_corporations_corporation_id_roles_character_id'}, 'roles_at_other': {'title': 'get_corporations_corporation_id_roles_roles_at_other', 'type': 'array', 'description': 'roles_at_other array', 'items': {'title': 'get_corporations_corporation_id_roles_roles_at_other', 'type': 'string', 'description': 'roles_at_other string', 'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer']}}, 'grantable_roles_at_other': {'title': 'get_corporations_corporation_id_roles_grantable_roles_at_other', 'type': 'array', 'description': 'grantable_roles_at_other array', 'items': {'title': 'get_corporations_corporation_id_roles_grantable_roles_at_other', 'type': 'string', 'description': 'grantable_roles_at_other string', 'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer']}}, 'roles_at_base': {'title': 'get_corporations_corporation_id_roles_roles_at_base', 'type': 'array', 'description': 'roles_at_base array', 'items': {'title': 'get_corporations_corporation_id_roles_roles_at_base', 'type': 'string', 'description': 'roles_at_base string', 'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer']}}, 'grantable_roles_at_base': {'title': 'get_corporations_corporation_id_roles_grantable_roles_at_base', 'type': 'array', 'description': 'grantable_roles_at_base array', 'items': {'title': 'get_corporations_corporation_id_roles_grantable_roles_at_base', 'type': 'string', 'description': 'grantable_roles_at_base string', 'uniqueItems': True, 'enum': ['Director', 'Personnel_Manager', 'Accountant', 'Security_Officer', 'Factory_Manager', 'Station_Manager', 'Auditor', 'Hangar_Take_1', 'Hangar_Take_2', 'Hangar_Take_3', 'Hangar_Take_4', 'Hangar_Take_5', 'Hangar_Take_6', 'Hangar_Take_7', 'Hangar_Query_1', 'Hangar_Query_2', 'Hangar_Query_3', 'Hangar_Query_4', 'Hangar_Query_5', 'Hangar_Query_6', 'Hangar_Query_7', 'Account_Take_1', 'Account_Take_2', 'Account_Take_3', 'Account_Take_4', 'Account_Take_5', 'Account_Take_6', 'Account_Take_7', 'Diplomat', 'Config_Equipment', 'Container_Take_1', 'Container_Take_2', 'Container_Take_3', 'Container_Take_4', 'Container_Take_5', 'Container_Take_6', 'Container_Take_7', 'Rent_Office', 'Rent_Factory_Facility', 'Rent_Research_Facility', 'Junior_Accountant', 'Config_Starbase_Equipment', 'Trader', 'Communications_Officer', 'Contract_Manager', 'Starbase_Defense_Operator', 'Starbase_Fuel_Technician', 'Fitting_Manager', 'Terrestrial_Combat_Officer', 'Terrestrial_Logistics_Officer']}}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_corporations_corporation_id_roles_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_corporation_id_roles_500_internal_server_error'}}}}, '403': {'description': 'Forbidden', 'examples': {'application/json': {'error': 'Token is not valid for scope(s): esi-corporations.read_corporation_membership.v1'}}, 'schema': {'title': 'get_corporations_corporation_id_roles_forbidden', 'type': 'object', 'description': 'Forbidden', 'properties': {'error': {'type': 'string', 'description': 'Forbidden message', 'title': 'get_corporations_corporation_id_roles_403_forbidden'}}}}}
    parameter = [{'name': 'corporation_id', 'format': 'int32', 'description': 'A corporation ID', 'type': 'integer', 'in': 'path', 'required': True}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'token', 'type': 'string', 'in': 'query', 'description': 'Access token to use, if preferred over a header'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, corporation_id, datasource= "tranquility",**kwargs
    ):
        """
                Return the roles of all members if the character has the personnel manager role or any grantable role.
        
        ---
        
        Alternate route: `/v1/corporations/{corporation_id}/roles/`
        
        Alternate route: `/legacy/corporations/{corporation_id}/roles/`
        
        Alternate route: `/dev/corporations/{corporation_id}/roles/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type corporation_id: int
        :param corporation_id: A corporation ID

        :type datasource: str
        :param datasource: The server name you would like data from

        :type token: str
        :param token: Access token to use, if preferred over a header

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"corporation_id" : corporation_id, "datasource" : datasource, "token" : token, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)


class CorporationsNames(object):
    base_url = "https://esi.tech.ccp.is/latest/corporations/names/"

    get_responses = {'200': {'headers': {'Cache-Control': {'type': 'string', 'description': 'The caching mechanism used'}, 'Expires': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}, 'Last-Modified': {'type': 'string', 'description': 'RFC7231 formatted datetime string'}}, 'description': 'List of id/name associations', 'examples': {'application/json': [{'corporation_id': 1000171, 'corporation_name': 'Republic University'}]}, 'schema': {'title': 'get_corporations_names_ok', 'type': 'array', 'description': '200 ok array', 'items': {'title': 'get_corporations_names_200_ok', 'type': 'object', 'description': '200 ok object', 'required': ['corporation_id', 'corporation_name'], 'properties': {'corporation_id': {'type': 'integer', 'format': 'int32', 'description': 'corporation_id integer', 'title': 'get_corporations_names_corporation_id'}, 'corporation_name': {'type': 'string', 'description': 'corporation_name string', 'title': 'get_corporations_names_corporation_name'}}}}}, '500': {'description': 'Internal server error', 'examples': {'application/json': {'error': "uncaught exception: IOError('out of memory')"}}, 'schema': {'title': 'get_corporations_names_internal_server_error', 'type': 'object', 'description': 'Internal server error', 'properties': {'error': {'type': 'string', 'description': 'Internal server error message', 'title': 'get_corporations_names_500_internal_server_error'}}}}}
    parameter = [{'name': 'corporation_ids', 'description': 'A comma separated list of corporation IDs', 'minItems': 1, 'type': 'array', 'in': 'query', 'required': True, 'items': {'type': 'integer', 'format': 'int64'}}, {'name': 'datasource', 'default': 'tranquility', 'enum': ['tranquility', 'singularity'], 'type': 'string', 'in': 'query', 'description': 'The server name you would like data from'}, {'name': 'user_agent', 'type': 'string', 'in': 'query', 'description': 'Client identifier, takes precedence over headers'}, {'name': 'X-User-Agent', 'type': 'string', 'in': 'header', 'description': 'Client identifier, takes precedence over User-Agent'}]
    def get(self, corporation_ids, datasource= "tranquility",**kwargs
    ):
        """
                Resolve a set of corporation IDs to corporation names
        
        ---
        
        Alternate route: `/v1/corporations/names/`
        
        Alternate route: `/legacy/corporations/names/`
        
        Alternate route: `/dev/corporations/names/`
        
        
        ---
        
        This route is cached for up to 3600 seconds

        :type corporation_ids: list
        :param corporation_ids: A comma separated list of corporation IDs

        :type datasource: str
        :param datasource: The server name you would like data from

        :type user_agent: str
        :param user_agent: Client identifier, takes precedence over headers

        :type x_user_agent: str
        :param x_user_agent: Client identifier, takes precedence over User-Agent

        """
        kwargs_dict ={"corporation_ids" : corporation_ids, "datasource" : datasource, "user_agent" : user_agent, "X-User-Agent" : x_user_agent, }
        kwargs_dict.update(kwargs)
        return EsiRequestObject(self.base_url, self.get_responses) \
            .get(**kwargs_dict)